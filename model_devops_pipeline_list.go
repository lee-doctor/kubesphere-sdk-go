/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DevopsPipelineList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevopsPipelineList{}

// DevopsPipelineList struct for DevopsPipelineList
type DevopsPipelineList struct {
	Items []DevopsPipeline `json:"items"`
	TotalCount int32 `json:"total_count"`
}

type _DevopsPipelineList DevopsPipelineList

// NewDevopsPipelineList instantiates a new DevopsPipelineList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevopsPipelineList(items []DevopsPipeline, totalCount int32) *DevopsPipelineList {
	this := DevopsPipelineList{}
	this.Items = items
	this.TotalCount = totalCount
	return &this
}

// NewDevopsPipelineListWithDefaults instantiates a new DevopsPipelineList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevopsPipelineListWithDefaults() *DevopsPipelineList {
	this := DevopsPipelineList{}
	return &this
}

// GetItems returns the Items field value
func (o *DevopsPipelineList) GetItems() []DevopsPipeline {
	if o == nil {
		var ret []DevopsPipeline
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *DevopsPipelineList) GetItemsOk() ([]DevopsPipeline, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *DevopsPipelineList) SetItems(v []DevopsPipeline) {
	o.Items = v
}

// GetTotalCount returns the TotalCount field value
func (o *DevopsPipelineList) GetTotalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *DevopsPipelineList) GetTotalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *DevopsPipelineList) SetTotalCount(v int32) {
	o.TotalCount = v
}

func (o DevopsPipelineList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevopsPipelineList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	toSerialize["total_count"] = o.TotalCount
	return toSerialize, nil
}

func (o *DevopsPipelineList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
		"total_count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDevopsPipelineList := _DevopsPipelineList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDevopsPipelineList)

	if err != nil {
		return err
	}

	*o = DevopsPipelineList(varDevopsPipelineList)

	return err
}

type NullableDevopsPipelineList struct {
	value *DevopsPipelineList
	isSet bool
}

func (v NullableDevopsPipelineList) Get() *DevopsPipelineList {
	return v.value
}

func (v *NullableDevopsPipelineList) Set(val *DevopsPipelineList) {
	v.value = val
	v.isSet = true
}

func (v NullableDevopsPipelineList) IsSet() bool {
	return v.isSet
}

func (v *NullableDevopsPipelineList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevopsPipelineList(val *DevopsPipelineList) *NullableDevopsPipelineList {
	return &NullableDevopsPipelineList{value: val, isSet: true}
}

func (v NullableDevopsPipelineList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevopsPipelineList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


