/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1Config type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Config{}

// V1Config struct for V1Config
type V1Config struct {
	ArgsEscaped *bool `json:"ArgsEscaped,omitempty"`
	AttachStderr *bool `json:"AttachStderr,omitempty"`
	AttachStdin *bool `json:"AttachStdin,omitempty"`
	AttachStdout *bool `json:"AttachStdout,omitempty"`
	Cmd []string `json:"Cmd,omitempty"`
	Domainname *string `json:"Domainname,omitempty"`
	Entrypoint []string `json:"Entrypoint,omitempty"`
	Env []string `json:"Env,omitempty"`
	ExposedPorts *map[string]map[string]interface{} `json:"ExposedPorts,omitempty"`
	Healthcheck *V1HealthConfig `json:"Healthcheck,omitempty"`
	Hostname *string `json:"Hostname,omitempty"`
	Image *string `json:"Image,omitempty"`
	Labels *map[string]string `json:"Labels,omitempty"`
	MacAddress *string `json:"MacAddress,omitempty"`
	NetworkDisabled *bool `json:"NetworkDisabled,omitempty"`
	OnBuild []string `json:"OnBuild,omitempty"`
	OpenStdin *bool `json:"OpenStdin,omitempty"`
	Shell []string `json:"Shell,omitempty"`
	StdinOnce *bool `json:"StdinOnce,omitempty"`
	StopSignal *string `json:"StopSignal,omitempty"`
	Tty *bool `json:"Tty,omitempty"`
	User *string `json:"User,omitempty"`
	Volumes *map[string]map[string]interface{} `json:"Volumes,omitempty"`
	WorkingDir *string `json:"WorkingDir,omitempty"`
}

// NewV1Config instantiates a new V1Config object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Config() *V1Config {
	this := V1Config{}
	return &this
}

// NewV1ConfigWithDefaults instantiates a new V1Config object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ConfigWithDefaults() *V1Config {
	this := V1Config{}
	return &this
}

// GetArgsEscaped returns the ArgsEscaped field value if set, zero value otherwise.
func (o *V1Config) GetArgsEscaped() bool {
	if o == nil || IsNil(o.ArgsEscaped) {
		var ret bool
		return ret
	}
	return *o.ArgsEscaped
}

// GetArgsEscapedOk returns a tuple with the ArgsEscaped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetArgsEscapedOk() (*bool, bool) {
	if o == nil || IsNil(o.ArgsEscaped) {
		return nil, false
	}
	return o.ArgsEscaped, true
}

// HasArgsEscaped returns a boolean if a field has been set.
func (o *V1Config) HasArgsEscaped() bool {
	if o != nil && !IsNil(o.ArgsEscaped) {
		return true
	}

	return false
}

// SetArgsEscaped gets a reference to the given bool and assigns it to the ArgsEscaped field.
func (o *V1Config) SetArgsEscaped(v bool) {
	o.ArgsEscaped = &v
}

// GetAttachStderr returns the AttachStderr field value if set, zero value otherwise.
func (o *V1Config) GetAttachStderr() bool {
	if o == nil || IsNil(o.AttachStderr) {
		var ret bool
		return ret
	}
	return *o.AttachStderr
}

// GetAttachStderrOk returns a tuple with the AttachStderr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetAttachStderrOk() (*bool, bool) {
	if o == nil || IsNil(o.AttachStderr) {
		return nil, false
	}
	return o.AttachStderr, true
}

// HasAttachStderr returns a boolean if a field has been set.
func (o *V1Config) HasAttachStderr() bool {
	if o != nil && !IsNil(o.AttachStderr) {
		return true
	}

	return false
}

// SetAttachStderr gets a reference to the given bool and assigns it to the AttachStderr field.
func (o *V1Config) SetAttachStderr(v bool) {
	o.AttachStderr = &v
}

// GetAttachStdin returns the AttachStdin field value if set, zero value otherwise.
func (o *V1Config) GetAttachStdin() bool {
	if o == nil || IsNil(o.AttachStdin) {
		var ret bool
		return ret
	}
	return *o.AttachStdin
}

// GetAttachStdinOk returns a tuple with the AttachStdin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetAttachStdinOk() (*bool, bool) {
	if o == nil || IsNil(o.AttachStdin) {
		return nil, false
	}
	return o.AttachStdin, true
}

// HasAttachStdin returns a boolean if a field has been set.
func (o *V1Config) HasAttachStdin() bool {
	if o != nil && !IsNil(o.AttachStdin) {
		return true
	}

	return false
}

// SetAttachStdin gets a reference to the given bool and assigns it to the AttachStdin field.
func (o *V1Config) SetAttachStdin(v bool) {
	o.AttachStdin = &v
}

// GetAttachStdout returns the AttachStdout field value if set, zero value otherwise.
func (o *V1Config) GetAttachStdout() bool {
	if o == nil || IsNil(o.AttachStdout) {
		var ret bool
		return ret
	}
	return *o.AttachStdout
}

// GetAttachStdoutOk returns a tuple with the AttachStdout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetAttachStdoutOk() (*bool, bool) {
	if o == nil || IsNil(o.AttachStdout) {
		return nil, false
	}
	return o.AttachStdout, true
}

// HasAttachStdout returns a boolean if a field has been set.
func (o *V1Config) HasAttachStdout() bool {
	if o != nil && !IsNil(o.AttachStdout) {
		return true
	}

	return false
}

// SetAttachStdout gets a reference to the given bool and assigns it to the AttachStdout field.
func (o *V1Config) SetAttachStdout(v bool) {
	o.AttachStdout = &v
}

// GetCmd returns the Cmd field value if set, zero value otherwise.
func (o *V1Config) GetCmd() []string {
	if o == nil || IsNil(o.Cmd) {
		var ret []string
		return ret
	}
	return o.Cmd
}

// GetCmdOk returns a tuple with the Cmd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetCmdOk() ([]string, bool) {
	if o == nil || IsNil(o.Cmd) {
		return nil, false
	}
	return o.Cmd, true
}

// HasCmd returns a boolean if a field has been set.
func (o *V1Config) HasCmd() bool {
	if o != nil && !IsNil(o.Cmd) {
		return true
	}

	return false
}

// SetCmd gets a reference to the given []string and assigns it to the Cmd field.
func (o *V1Config) SetCmd(v []string) {
	o.Cmd = v
}

// GetDomainname returns the Domainname field value if set, zero value otherwise.
func (o *V1Config) GetDomainname() string {
	if o == nil || IsNil(o.Domainname) {
		var ret string
		return ret
	}
	return *o.Domainname
}

// GetDomainnameOk returns a tuple with the Domainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetDomainnameOk() (*string, bool) {
	if o == nil || IsNil(o.Domainname) {
		return nil, false
	}
	return o.Domainname, true
}

// HasDomainname returns a boolean if a field has been set.
func (o *V1Config) HasDomainname() bool {
	if o != nil && !IsNil(o.Domainname) {
		return true
	}

	return false
}

// SetDomainname gets a reference to the given string and assigns it to the Domainname field.
func (o *V1Config) SetDomainname(v string) {
	o.Domainname = &v
}

// GetEntrypoint returns the Entrypoint field value if set, zero value otherwise.
func (o *V1Config) GetEntrypoint() []string {
	if o == nil || IsNil(o.Entrypoint) {
		var ret []string
		return ret
	}
	return o.Entrypoint
}

// GetEntrypointOk returns a tuple with the Entrypoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetEntrypointOk() ([]string, bool) {
	if o == nil || IsNil(o.Entrypoint) {
		return nil, false
	}
	return o.Entrypoint, true
}

// HasEntrypoint returns a boolean if a field has been set.
func (o *V1Config) HasEntrypoint() bool {
	if o != nil && !IsNil(o.Entrypoint) {
		return true
	}

	return false
}

// SetEntrypoint gets a reference to the given []string and assigns it to the Entrypoint field.
func (o *V1Config) SetEntrypoint(v []string) {
	o.Entrypoint = v
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *V1Config) GetEnv() []string {
	if o == nil || IsNil(o.Env) {
		var ret []string
		return ret
	}
	return o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetEnvOk() ([]string, bool) {
	if o == nil || IsNil(o.Env) {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *V1Config) HasEnv() bool {
	if o != nil && !IsNil(o.Env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given []string and assigns it to the Env field.
func (o *V1Config) SetEnv(v []string) {
	o.Env = v
}

// GetExposedPorts returns the ExposedPorts field value if set, zero value otherwise.
func (o *V1Config) GetExposedPorts() map[string]map[string]interface{} {
	if o == nil || IsNil(o.ExposedPorts) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.ExposedPorts
}

// GetExposedPortsOk returns a tuple with the ExposedPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetExposedPortsOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExposedPorts) {
		return nil, false
	}
	return o.ExposedPorts, true
}

// HasExposedPorts returns a boolean if a field has been set.
func (o *V1Config) HasExposedPorts() bool {
	if o != nil && !IsNil(o.ExposedPorts) {
		return true
	}

	return false
}

// SetExposedPorts gets a reference to the given map[string]map[string]interface{} and assigns it to the ExposedPorts field.
func (o *V1Config) SetExposedPorts(v map[string]map[string]interface{}) {
	o.ExposedPorts = &v
}

// GetHealthcheck returns the Healthcheck field value if set, zero value otherwise.
func (o *V1Config) GetHealthcheck() V1HealthConfig {
	if o == nil || IsNil(o.Healthcheck) {
		var ret V1HealthConfig
		return ret
	}
	return *o.Healthcheck
}

// GetHealthcheckOk returns a tuple with the Healthcheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetHealthcheckOk() (*V1HealthConfig, bool) {
	if o == nil || IsNil(o.Healthcheck) {
		return nil, false
	}
	return o.Healthcheck, true
}

// HasHealthcheck returns a boolean if a field has been set.
func (o *V1Config) HasHealthcheck() bool {
	if o != nil && !IsNil(o.Healthcheck) {
		return true
	}

	return false
}

// SetHealthcheck gets a reference to the given V1HealthConfig and assigns it to the Healthcheck field.
func (o *V1Config) SetHealthcheck(v V1HealthConfig) {
	o.Healthcheck = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *V1Config) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *V1Config) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *V1Config) SetHostname(v string) {
	o.Hostname = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *V1Config) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *V1Config) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *V1Config) SetImage(v string) {
	o.Image = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *V1Config) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *V1Config) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *V1Config) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise.
func (o *V1Config) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress) {
		var ret string
		return ret
	}
	return *o.MacAddress
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetMacAddressOk() (*string, bool) {
	if o == nil || IsNil(o.MacAddress) {
		return nil, false
	}
	return o.MacAddress, true
}

// HasMacAddress returns a boolean if a field has been set.
func (o *V1Config) HasMacAddress() bool {
	if o != nil && !IsNil(o.MacAddress) {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given string and assigns it to the MacAddress field.
func (o *V1Config) SetMacAddress(v string) {
	o.MacAddress = &v
}

// GetNetworkDisabled returns the NetworkDisabled field value if set, zero value otherwise.
func (o *V1Config) GetNetworkDisabled() bool {
	if o == nil || IsNil(o.NetworkDisabled) {
		var ret bool
		return ret
	}
	return *o.NetworkDisabled
}

// GetNetworkDisabledOk returns a tuple with the NetworkDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetNetworkDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.NetworkDisabled) {
		return nil, false
	}
	return o.NetworkDisabled, true
}

// HasNetworkDisabled returns a boolean if a field has been set.
func (o *V1Config) HasNetworkDisabled() bool {
	if o != nil && !IsNil(o.NetworkDisabled) {
		return true
	}

	return false
}

// SetNetworkDisabled gets a reference to the given bool and assigns it to the NetworkDisabled field.
func (o *V1Config) SetNetworkDisabled(v bool) {
	o.NetworkDisabled = &v
}

// GetOnBuild returns the OnBuild field value if set, zero value otherwise.
func (o *V1Config) GetOnBuild() []string {
	if o == nil || IsNil(o.OnBuild) {
		var ret []string
		return ret
	}
	return o.OnBuild
}

// GetOnBuildOk returns a tuple with the OnBuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetOnBuildOk() ([]string, bool) {
	if o == nil || IsNil(o.OnBuild) {
		return nil, false
	}
	return o.OnBuild, true
}

// HasOnBuild returns a boolean if a field has been set.
func (o *V1Config) HasOnBuild() bool {
	if o != nil && !IsNil(o.OnBuild) {
		return true
	}

	return false
}

// SetOnBuild gets a reference to the given []string and assigns it to the OnBuild field.
func (o *V1Config) SetOnBuild(v []string) {
	o.OnBuild = v
}

// GetOpenStdin returns the OpenStdin field value if set, zero value otherwise.
func (o *V1Config) GetOpenStdin() bool {
	if o == nil || IsNil(o.OpenStdin) {
		var ret bool
		return ret
	}
	return *o.OpenStdin
}

// GetOpenStdinOk returns a tuple with the OpenStdin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetOpenStdinOk() (*bool, bool) {
	if o == nil || IsNil(o.OpenStdin) {
		return nil, false
	}
	return o.OpenStdin, true
}

// HasOpenStdin returns a boolean if a field has been set.
func (o *V1Config) HasOpenStdin() bool {
	if o != nil && !IsNil(o.OpenStdin) {
		return true
	}

	return false
}

// SetOpenStdin gets a reference to the given bool and assigns it to the OpenStdin field.
func (o *V1Config) SetOpenStdin(v bool) {
	o.OpenStdin = &v
}

// GetShell returns the Shell field value if set, zero value otherwise.
func (o *V1Config) GetShell() []string {
	if o == nil || IsNil(o.Shell) {
		var ret []string
		return ret
	}
	return o.Shell
}

// GetShellOk returns a tuple with the Shell field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetShellOk() ([]string, bool) {
	if o == nil || IsNil(o.Shell) {
		return nil, false
	}
	return o.Shell, true
}

// HasShell returns a boolean if a field has been set.
func (o *V1Config) HasShell() bool {
	if o != nil && !IsNil(o.Shell) {
		return true
	}

	return false
}

// SetShell gets a reference to the given []string and assigns it to the Shell field.
func (o *V1Config) SetShell(v []string) {
	o.Shell = v
}

// GetStdinOnce returns the StdinOnce field value if set, zero value otherwise.
func (o *V1Config) GetStdinOnce() bool {
	if o == nil || IsNil(o.StdinOnce) {
		var ret bool
		return ret
	}
	return *o.StdinOnce
}

// GetStdinOnceOk returns a tuple with the StdinOnce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetStdinOnceOk() (*bool, bool) {
	if o == nil || IsNil(o.StdinOnce) {
		return nil, false
	}
	return o.StdinOnce, true
}

// HasStdinOnce returns a boolean if a field has been set.
func (o *V1Config) HasStdinOnce() bool {
	if o != nil && !IsNil(o.StdinOnce) {
		return true
	}

	return false
}

// SetStdinOnce gets a reference to the given bool and assigns it to the StdinOnce field.
func (o *V1Config) SetStdinOnce(v bool) {
	o.StdinOnce = &v
}

// GetStopSignal returns the StopSignal field value if set, zero value otherwise.
func (o *V1Config) GetStopSignal() string {
	if o == nil || IsNil(o.StopSignal) {
		var ret string
		return ret
	}
	return *o.StopSignal
}

// GetStopSignalOk returns a tuple with the StopSignal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetStopSignalOk() (*string, bool) {
	if o == nil || IsNil(o.StopSignal) {
		return nil, false
	}
	return o.StopSignal, true
}

// HasStopSignal returns a boolean if a field has been set.
func (o *V1Config) HasStopSignal() bool {
	if o != nil && !IsNil(o.StopSignal) {
		return true
	}

	return false
}

// SetStopSignal gets a reference to the given string and assigns it to the StopSignal field.
func (o *V1Config) SetStopSignal(v string) {
	o.StopSignal = &v
}

// GetTty returns the Tty field value if set, zero value otherwise.
func (o *V1Config) GetTty() bool {
	if o == nil || IsNil(o.Tty) {
		var ret bool
		return ret
	}
	return *o.Tty
}

// GetTtyOk returns a tuple with the Tty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetTtyOk() (*bool, bool) {
	if o == nil || IsNil(o.Tty) {
		return nil, false
	}
	return o.Tty, true
}

// HasTty returns a boolean if a field has been set.
func (o *V1Config) HasTty() bool {
	if o != nil && !IsNil(o.Tty) {
		return true
	}

	return false
}

// SetTty gets a reference to the given bool and assigns it to the Tty field.
func (o *V1Config) SetTty(v bool) {
	o.Tty = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *V1Config) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *V1Config) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *V1Config) SetUser(v string) {
	o.User = &v
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *V1Config) GetVolumes() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Volumes) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetVolumesOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Volumes) {
		return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *V1Config) HasVolumes() bool {
	if o != nil && !IsNil(o.Volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given map[string]map[string]interface{} and assigns it to the Volumes field.
func (o *V1Config) SetVolumes(v map[string]map[string]interface{}) {
	o.Volumes = &v
}

// GetWorkingDir returns the WorkingDir field value if set, zero value otherwise.
func (o *V1Config) GetWorkingDir() string {
	if o == nil || IsNil(o.WorkingDir) {
		var ret string
		return ret
	}
	return *o.WorkingDir
}

// GetWorkingDirOk returns a tuple with the WorkingDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Config) GetWorkingDirOk() (*string, bool) {
	if o == nil || IsNil(o.WorkingDir) {
		return nil, false
	}
	return o.WorkingDir, true
}

// HasWorkingDir returns a boolean if a field has been set.
func (o *V1Config) HasWorkingDir() bool {
	if o != nil && !IsNil(o.WorkingDir) {
		return true
	}

	return false
}

// SetWorkingDir gets a reference to the given string and assigns it to the WorkingDir field.
func (o *V1Config) SetWorkingDir(v string) {
	o.WorkingDir = &v
}

func (o V1Config) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Config) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArgsEscaped) {
		toSerialize["ArgsEscaped"] = o.ArgsEscaped
	}
	if !IsNil(o.AttachStderr) {
		toSerialize["AttachStderr"] = o.AttachStderr
	}
	if !IsNil(o.AttachStdin) {
		toSerialize["AttachStdin"] = o.AttachStdin
	}
	if !IsNil(o.AttachStdout) {
		toSerialize["AttachStdout"] = o.AttachStdout
	}
	if !IsNil(o.Cmd) {
		toSerialize["Cmd"] = o.Cmd
	}
	if !IsNil(o.Domainname) {
		toSerialize["Domainname"] = o.Domainname
	}
	if !IsNil(o.Entrypoint) {
		toSerialize["Entrypoint"] = o.Entrypoint
	}
	if !IsNil(o.Env) {
		toSerialize["Env"] = o.Env
	}
	if !IsNil(o.ExposedPorts) {
		toSerialize["ExposedPorts"] = o.ExposedPorts
	}
	if !IsNil(o.Healthcheck) {
		toSerialize["Healthcheck"] = o.Healthcheck
	}
	if !IsNil(o.Hostname) {
		toSerialize["Hostname"] = o.Hostname
	}
	if !IsNil(o.Image) {
		toSerialize["Image"] = o.Image
	}
	if !IsNil(o.Labels) {
		toSerialize["Labels"] = o.Labels
	}
	if !IsNil(o.MacAddress) {
		toSerialize["MacAddress"] = o.MacAddress
	}
	if !IsNil(o.NetworkDisabled) {
		toSerialize["NetworkDisabled"] = o.NetworkDisabled
	}
	if !IsNil(o.OnBuild) {
		toSerialize["OnBuild"] = o.OnBuild
	}
	if !IsNil(o.OpenStdin) {
		toSerialize["OpenStdin"] = o.OpenStdin
	}
	if !IsNil(o.Shell) {
		toSerialize["Shell"] = o.Shell
	}
	if !IsNil(o.StdinOnce) {
		toSerialize["StdinOnce"] = o.StdinOnce
	}
	if !IsNil(o.StopSignal) {
		toSerialize["StopSignal"] = o.StopSignal
	}
	if !IsNil(o.Tty) {
		toSerialize["Tty"] = o.Tty
	}
	if !IsNil(o.User) {
		toSerialize["User"] = o.User
	}
	if !IsNil(o.Volumes) {
		toSerialize["Volumes"] = o.Volumes
	}
	if !IsNil(o.WorkingDir) {
		toSerialize["WorkingDir"] = o.WorkingDir
	}
	return toSerialize, nil
}

type NullableV1Config struct {
	value *V1Config
	isSet bool
}

func (v NullableV1Config) Get() *V1Config {
	return v.value
}

func (v *NullableV1Config) Set(val *V1Config) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Config) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Config) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Config(val *V1Config) *NullableV1Config {
	return &NullableV1Config{value: val, isSet: true}
}

func (v NullableV1Config) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Config) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


