/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1EmptyDirVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1EmptyDirVolumeSource{}

// V1EmptyDirVolumeSource Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
type V1EmptyDirVolumeSource struct {
	// medium represents what type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium *string `json:"medium,omitempty"`
	// sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	SizeLimit *string `json:"sizeLimit,omitempty"`
}

// NewV1EmptyDirVolumeSource instantiates a new V1EmptyDirVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1EmptyDirVolumeSource() *V1EmptyDirVolumeSource {
	this := V1EmptyDirVolumeSource{}
	return &this
}

// NewV1EmptyDirVolumeSourceWithDefaults instantiates a new V1EmptyDirVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1EmptyDirVolumeSourceWithDefaults() *V1EmptyDirVolumeSource {
	this := V1EmptyDirVolumeSource{}
	return &this
}

// GetMedium returns the Medium field value if set, zero value otherwise.
func (o *V1EmptyDirVolumeSource) GetMedium() string {
	if o == nil || IsNil(o.Medium) {
		var ret string
		return ret
	}
	return *o.Medium
}

// GetMediumOk returns a tuple with the Medium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1EmptyDirVolumeSource) GetMediumOk() (*string, bool) {
	if o == nil || IsNil(o.Medium) {
		return nil, false
	}
	return o.Medium, true
}

// HasMedium returns a boolean if a field has been set.
func (o *V1EmptyDirVolumeSource) HasMedium() bool {
	if o != nil && !IsNil(o.Medium) {
		return true
	}

	return false
}

// SetMedium gets a reference to the given string and assigns it to the Medium field.
func (o *V1EmptyDirVolumeSource) SetMedium(v string) {
	o.Medium = &v
}

// GetSizeLimit returns the SizeLimit field value if set, zero value otherwise.
func (o *V1EmptyDirVolumeSource) GetSizeLimit() string {
	if o == nil || IsNil(o.SizeLimit) {
		var ret string
		return ret
	}
	return *o.SizeLimit
}

// GetSizeLimitOk returns a tuple with the SizeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1EmptyDirVolumeSource) GetSizeLimitOk() (*string, bool) {
	if o == nil || IsNil(o.SizeLimit) {
		return nil, false
	}
	return o.SizeLimit, true
}

// HasSizeLimit returns a boolean if a field has been set.
func (o *V1EmptyDirVolumeSource) HasSizeLimit() bool {
	if o != nil && !IsNil(o.SizeLimit) {
		return true
	}

	return false
}

// SetSizeLimit gets a reference to the given string and assigns it to the SizeLimit field.
func (o *V1EmptyDirVolumeSource) SetSizeLimit(v string) {
	o.SizeLimit = &v
}

func (o V1EmptyDirVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1EmptyDirVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Medium) {
		toSerialize["medium"] = o.Medium
	}
	if !IsNil(o.SizeLimit) {
		toSerialize["sizeLimit"] = o.SizeLimit
	}
	return toSerialize, nil
}

type NullableV1EmptyDirVolumeSource struct {
	value *V1EmptyDirVolumeSource
	isSet bool
}

func (v NullableV1EmptyDirVolumeSource) Get() *V1EmptyDirVolumeSource {
	return v.value
}

func (v *NullableV1EmptyDirVolumeSource) Set(val *V1EmptyDirVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1EmptyDirVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1EmptyDirVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1EmptyDirVolumeSource(val *V1EmptyDirVolumeSource) *NullableV1EmptyDirVolumeSource {
	return &NullableV1EmptyDirVolumeSource{value: val, isSet: true}
}

func (v NullableV1EmptyDirVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1EmptyDirVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


