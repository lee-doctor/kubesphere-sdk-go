/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BigInt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BigInt{}

// BigInt struct for BigInt
type BigInt struct {
	Abs []int32 `json:"abs"`
	Neg bool `json:"neg"`
}

type _BigInt BigInt

// NewBigInt instantiates a new BigInt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBigInt(abs []int32, neg bool) *BigInt {
	this := BigInt{}
	this.Abs = abs
	this.Neg = neg
	return &this
}

// NewBigIntWithDefaults instantiates a new BigInt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBigIntWithDefaults() *BigInt {
	this := BigInt{}
	return &this
}

// GetAbs returns the Abs field value
func (o *BigInt) GetAbs() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Abs
}

// GetAbsOk returns a tuple with the Abs field value
// and a boolean to check if the value has been set.
func (o *BigInt) GetAbsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Abs, true
}

// SetAbs sets field value
func (o *BigInt) SetAbs(v []int32) {
	o.Abs = v
}

// GetNeg returns the Neg field value
func (o *BigInt) GetNeg() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Neg
}

// GetNegOk returns a tuple with the Neg field value
// and a boolean to check if the value has been set.
func (o *BigInt) GetNegOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Neg, true
}

// SetNeg sets field value
func (o *BigInt) SetNeg(v bool) {
	o.Neg = v
}

func (o BigInt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BigInt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["abs"] = o.Abs
	toSerialize["neg"] = o.Neg
	return toSerialize, nil
}

func (o *BigInt) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"abs",
		"neg",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBigInt := _BigInt{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBigInt)

	if err != nil {
		return err
	}

	*o = BigInt(varBigInt)

	return err
}

type NullableBigInt struct {
	value *BigInt
	isSet bool
}

func (v NullableBigInt) Get() *BigInt {
	return v.value
}

func (v *NullableBigInt) Set(val *BigInt) {
	v.value = val
	v.isSet = true
}

func (v NullableBigInt) IsSet() bool {
	return v.isSet
}

func (v *NullableBigInt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBigInt(val *BigInt) *NullableBigInt {
	return &NullableBigInt{value: val, isSet: true}
}

func (v NullableBigInt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBigInt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


