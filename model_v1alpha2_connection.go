/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1alpha2Connection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha2Connection{}

// V1alpha2Connection struct for V1alpha2Connection
type V1alpha2Connection struct {
	Id string `json:"id"`
	Label string `json:"label"`
	LabelMinor *string `json:"labelMinor,omitempty"`
	Metadata []V1alpha2MetadataRow `json:"metadata,omitempty"`
	NodeId string `json:"nodeId"`
}

type _V1alpha2Connection V1alpha2Connection

// NewV1alpha2Connection instantiates a new V1alpha2Connection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha2Connection(id string, label string, nodeId string) *V1alpha2Connection {
	this := V1alpha2Connection{}
	this.Id = id
	this.Label = label
	this.NodeId = nodeId
	return &this
}

// NewV1alpha2ConnectionWithDefaults instantiates a new V1alpha2Connection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha2ConnectionWithDefaults() *V1alpha2Connection {
	this := V1alpha2Connection{}
	return &this
}

// GetId returns the Id field value
func (o *V1alpha2Connection) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *V1alpha2Connection) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *V1alpha2Connection) SetId(v string) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *V1alpha2Connection) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *V1alpha2Connection) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *V1alpha2Connection) SetLabel(v string) {
	o.Label = v
}

// GetLabelMinor returns the LabelMinor field value if set, zero value otherwise.
func (o *V1alpha2Connection) GetLabelMinor() string {
	if o == nil || IsNil(o.LabelMinor) {
		var ret string
		return ret
	}
	return *o.LabelMinor
}

// GetLabelMinorOk returns a tuple with the LabelMinor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2Connection) GetLabelMinorOk() (*string, bool) {
	if o == nil || IsNil(o.LabelMinor) {
		return nil, false
	}
	return o.LabelMinor, true
}

// HasLabelMinor returns a boolean if a field has been set.
func (o *V1alpha2Connection) HasLabelMinor() bool {
	if o != nil && !IsNil(o.LabelMinor) {
		return true
	}

	return false
}

// SetLabelMinor gets a reference to the given string and assigns it to the LabelMinor field.
func (o *V1alpha2Connection) SetLabelMinor(v string) {
	o.LabelMinor = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V1alpha2Connection) GetMetadata() []V1alpha2MetadataRow {
	if o == nil || IsNil(o.Metadata) {
		var ret []V1alpha2MetadataRow
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2Connection) GetMetadataOk() ([]V1alpha2MetadataRow, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V1alpha2Connection) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given []V1alpha2MetadataRow and assigns it to the Metadata field.
func (o *V1alpha2Connection) SetMetadata(v []V1alpha2MetadataRow) {
	o.Metadata = v
}

// GetNodeId returns the NodeId field value
func (o *V1alpha2Connection) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *V1alpha2Connection) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *V1alpha2Connection) SetNodeId(v string) {
	o.NodeId = v
}

func (o V1alpha2Connection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha2Connection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	if !IsNil(o.LabelMinor) {
		toSerialize["labelMinor"] = o.LabelMinor
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["nodeId"] = o.NodeId
	return toSerialize, nil
}

func (o *V1alpha2Connection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"label",
		"nodeId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1alpha2Connection := _V1alpha2Connection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1alpha2Connection)

	if err != nil {
		return err
	}

	*o = V1alpha2Connection(varV1alpha2Connection)

	return err
}

type NullableV1alpha2Connection struct {
	value *V1alpha2Connection
	isSet bool
}

func (v NullableV1alpha2Connection) Get() *V1alpha2Connection {
	return v.value
}

func (v *NullableV1alpha2Connection) Set(val *V1alpha2Connection) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha2Connection) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha2Connection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha2Connection(val *V1alpha2Connection) *NullableV1alpha2Connection {
	return &NullableV1alpha2Connection{value: val, isSet: true}
}

func (v NullableV1alpha2Connection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha2Connection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


