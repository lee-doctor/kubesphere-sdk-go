/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1alpha2ResourceQuotaStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha2ResourceQuotaStatus{}

// V1alpha2ResourceQuotaStatus struct for V1alpha2ResourceQuotaStatus
type V1alpha2ResourceQuotaStatus struct {
	Namespaces []V1alpha2ResourceQuotaStatusByNamespace `json:"namespaces"`
	Total V1ResourceQuotaStatus `json:"total"`
}

type _V1alpha2ResourceQuotaStatus V1alpha2ResourceQuotaStatus

// NewV1alpha2ResourceQuotaStatus instantiates a new V1alpha2ResourceQuotaStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha2ResourceQuotaStatus(namespaces []V1alpha2ResourceQuotaStatusByNamespace, total V1ResourceQuotaStatus) *V1alpha2ResourceQuotaStatus {
	this := V1alpha2ResourceQuotaStatus{}
	this.Namespaces = namespaces
	this.Total = total
	return &this
}

// NewV1alpha2ResourceQuotaStatusWithDefaults instantiates a new V1alpha2ResourceQuotaStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha2ResourceQuotaStatusWithDefaults() *V1alpha2ResourceQuotaStatus {
	this := V1alpha2ResourceQuotaStatus{}
	return &this
}

// GetNamespaces returns the Namespaces field value
func (o *V1alpha2ResourceQuotaStatus) GetNamespaces() []V1alpha2ResourceQuotaStatusByNamespace {
	if o == nil {
		var ret []V1alpha2ResourceQuotaStatusByNamespace
		return ret
	}

	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value
// and a boolean to check if the value has been set.
func (o *V1alpha2ResourceQuotaStatus) GetNamespacesOk() ([]V1alpha2ResourceQuotaStatusByNamespace, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespaces, true
}

// SetNamespaces sets field value
func (o *V1alpha2ResourceQuotaStatus) SetNamespaces(v []V1alpha2ResourceQuotaStatusByNamespace) {
	o.Namespaces = v
}

// GetTotal returns the Total field value
func (o *V1alpha2ResourceQuotaStatus) GetTotal() V1ResourceQuotaStatus {
	if o == nil {
		var ret V1ResourceQuotaStatus
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *V1alpha2ResourceQuotaStatus) GetTotalOk() (*V1ResourceQuotaStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *V1alpha2ResourceQuotaStatus) SetTotal(v V1ResourceQuotaStatus) {
	o.Total = v
}

func (o V1alpha2ResourceQuotaStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha2ResourceQuotaStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["namespaces"] = o.Namespaces
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *V1alpha2ResourceQuotaStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"namespaces",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1alpha2ResourceQuotaStatus := _V1alpha2ResourceQuotaStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1alpha2ResourceQuotaStatus)

	if err != nil {
		return err
	}

	*o = V1alpha2ResourceQuotaStatus(varV1alpha2ResourceQuotaStatus)

	return err
}

type NullableV1alpha2ResourceQuotaStatus struct {
	value *V1alpha2ResourceQuotaStatus
	isSet bool
}

func (v NullableV1alpha2ResourceQuotaStatus) Get() *V1alpha2ResourceQuotaStatus {
	return v.value
}

func (v *NullableV1alpha2ResourceQuotaStatus) Set(val *V1alpha2ResourceQuotaStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha2ResourceQuotaStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha2ResourceQuotaStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha2ResourceQuotaStatus(val *V1alpha2ResourceQuotaStatus) *NullableV1alpha2ResourceQuotaStatus {
	return &NullableV1alpha2ResourceQuotaStatus{value: val, isSet: true}
}

func (v NullableV1alpha2ResourceQuotaStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha2ResourceQuotaStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


