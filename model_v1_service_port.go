/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1ServicePort type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ServicePort{}

// V1ServicePort ServicePort contains information on service's port.
type V1ServicePort struct {
	// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. Field can be enabled with ServiceAppProtocol feature gate.
	AppProtocol *string `json:"appProtocol,omitempty"`
	// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
	Name *string `json:"name,omitempty"`
	// The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
	NodePort *int32 `json:"nodePort,omitempty"`
	// The port that will be exposed by this service.
	Port int32 `json:"port"`
	// The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP.
	Protocol *string `json:"protocol,omitempty"`
	// Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
	TargetPort *string `json:"targetPort,omitempty"`
}

type _V1ServicePort V1ServicePort

// NewV1ServicePort instantiates a new V1ServicePort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ServicePort(port int32) *V1ServicePort {
	this := V1ServicePort{}
	this.Port = port
	return &this
}

// NewV1ServicePortWithDefaults instantiates a new V1ServicePort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ServicePortWithDefaults() *V1ServicePort {
	this := V1ServicePort{}
	return &this
}

// GetAppProtocol returns the AppProtocol field value if set, zero value otherwise.
func (o *V1ServicePort) GetAppProtocol() string {
	if o == nil || IsNil(o.AppProtocol) {
		var ret string
		return ret
	}
	return *o.AppProtocol
}

// GetAppProtocolOk returns a tuple with the AppProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServicePort) GetAppProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.AppProtocol) {
		return nil, false
	}
	return o.AppProtocol, true
}

// HasAppProtocol returns a boolean if a field has been set.
func (o *V1ServicePort) HasAppProtocol() bool {
	if o != nil && !IsNil(o.AppProtocol) {
		return true
	}

	return false
}

// SetAppProtocol gets a reference to the given string and assigns it to the AppProtocol field.
func (o *V1ServicePort) SetAppProtocol(v string) {
	o.AppProtocol = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1ServicePort) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServicePort) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1ServicePort) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1ServicePort) SetName(v string) {
	o.Name = &v
}

// GetNodePort returns the NodePort field value if set, zero value otherwise.
func (o *V1ServicePort) GetNodePort() int32 {
	if o == nil || IsNil(o.NodePort) {
		var ret int32
		return ret
	}
	return *o.NodePort
}

// GetNodePortOk returns a tuple with the NodePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServicePort) GetNodePortOk() (*int32, bool) {
	if o == nil || IsNil(o.NodePort) {
		return nil, false
	}
	return o.NodePort, true
}

// HasNodePort returns a boolean if a field has been set.
func (o *V1ServicePort) HasNodePort() bool {
	if o != nil && !IsNil(o.NodePort) {
		return true
	}

	return false
}

// SetNodePort gets a reference to the given int32 and assigns it to the NodePort field.
func (o *V1ServicePort) SetNodePort(v int32) {
	o.NodePort = &v
}

// GetPort returns the Port field value
func (o *V1ServicePort) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *V1ServicePort) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *V1ServicePort) SetPort(v int32) {
	o.Port = v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *V1ServicePort) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServicePort) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *V1ServicePort) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *V1ServicePort) SetProtocol(v string) {
	o.Protocol = &v
}

// GetTargetPort returns the TargetPort field value if set, zero value otherwise.
func (o *V1ServicePort) GetTargetPort() string {
	if o == nil || IsNil(o.TargetPort) {
		var ret string
		return ret
	}
	return *o.TargetPort
}

// GetTargetPortOk returns a tuple with the TargetPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServicePort) GetTargetPortOk() (*string, bool) {
	if o == nil || IsNil(o.TargetPort) {
		return nil, false
	}
	return o.TargetPort, true
}

// HasTargetPort returns a boolean if a field has been set.
func (o *V1ServicePort) HasTargetPort() bool {
	if o != nil && !IsNil(o.TargetPort) {
		return true
	}

	return false
}

// SetTargetPort gets a reference to the given string and assigns it to the TargetPort field.
func (o *V1ServicePort) SetTargetPort(v string) {
	o.TargetPort = &v
}

func (o V1ServicePort) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ServicePort) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppProtocol) {
		toSerialize["appProtocol"] = o.AppProtocol
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NodePort) {
		toSerialize["nodePort"] = o.NodePort
	}
	toSerialize["port"] = o.Port
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.TargetPort) {
		toSerialize["targetPort"] = o.TargetPort
	}
	return toSerialize, nil
}

func (o *V1ServicePort) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1ServicePort := _V1ServicePort{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1ServicePort)

	if err != nil {
		return err
	}

	*o = V1ServicePort(varV1ServicePort)

	return err
}

type NullableV1ServicePort struct {
	value *V1ServicePort
	isSet bool
}

func (v NullableV1ServicePort) Get() *V1ServicePort {
	return v.value
}

func (v *NullableV1ServicePort) Set(val *V1ServicePort) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ServicePort) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ServicePort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ServicePort(val *V1ServicePort) *NullableV1ServicePort {
	return &NullableV1ServicePort{value: val, isSet: true}
}

func (v NullableV1ServicePort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ServicePort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


