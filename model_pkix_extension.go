/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PkixExtension type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PkixExtension{}

// PkixExtension struct for PkixExtension
type PkixExtension struct {
	Critical bool `json:"Critical"`
	Id []int32 `json:"Id"`
	Value string `json:"Value"`
}

type _PkixExtension PkixExtension

// NewPkixExtension instantiates a new PkixExtension object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPkixExtension(critical bool, id []int32, value string) *PkixExtension {
	this := PkixExtension{}
	this.Critical = critical
	this.Id = id
	this.Value = value
	return &this
}

// NewPkixExtensionWithDefaults instantiates a new PkixExtension object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPkixExtensionWithDefaults() *PkixExtension {
	this := PkixExtension{}
	return &this
}

// GetCritical returns the Critical field value
func (o *PkixExtension) GetCritical() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Critical
}

// GetCriticalOk returns a tuple with the Critical field value
// and a boolean to check if the value has been set.
func (o *PkixExtension) GetCriticalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Critical, true
}

// SetCritical sets field value
func (o *PkixExtension) SetCritical(v bool) {
	o.Critical = v
}

// GetId returns the Id field value
func (o *PkixExtension) GetId() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PkixExtension) GetIdOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id, true
}

// SetId sets field value
func (o *PkixExtension) SetId(v []int32) {
	o.Id = v
}

// GetValue returns the Value field value
func (o *PkixExtension) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *PkixExtension) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *PkixExtension) SetValue(v string) {
	o.Value = v
}

func (o PkixExtension) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PkixExtension) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Critical"] = o.Critical
	toSerialize["Id"] = o.Id
	toSerialize["Value"] = o.Value
	return toSerialize, nil
}

func (o *PkixExtension) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Critical",
		"Id",
		"Value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPkixExtension := _PkixExtension{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPkixExtension)

	if err != nil {
		return err
	}

	*o = PkixExtension(varPkixExtension)

	return err
}

type NullablePkixExtension struct {
	value *PkixExtension
	isSet bool
}

func (v NullablePkixExtension) Get() *PkixExtension {
	return v.value
}

func (v *NullablePkixExtension) Set(val *PkixExtension) {
	v.value = val
	v.isSet = true
}

func (v NullablePkixExtension) IsSet() bool {
	return v.isSet
}

func (v *NullablePkixExtension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePkixExtension(val *PkixExtension) *NullablePkixExtension {
	return &NullablePkixExtension{value: val, isSet: true}
}

func (v NullablePkixExtension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePkixExtension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


