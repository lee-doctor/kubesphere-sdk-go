/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DevopsCronData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevopsCronData{}

// DevopsCronData struct for DevopsCronData
type DevopsCronData struct {
	// Cron script data.
	Cron string `json:"cron"`
	// Pipeline name, if pipeline haven't created, not required'
	PipelineName *string `json:"pipelineName,omitempty"`
}

type _DevopsCronData DevopsCronData

// NewDevopsCronData instantiates a new DevopsCronData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevopsCronData(cron string) *DevopsCronData {
	this := DevopsCronData{}
	this.Cron = cron
	return &this
}

// NewDevopsCronDataWithDefaults instantiates a new DevopsCronData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevopsCronDataWithDefaults() *DevopsCronData {
	this := DevopsCronData{}
	return &this
}

// GetCron returns the Cron field value
func (o *DevopsCronData) GetCron() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cron
}

// GetCronOk returns a tuple with the Cron field value
// and a boolean to check if the value has been set.
func (o *DevopsCronData) GetCronOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cron, true
}

// SetCron sets field value
func (o *DevopsCronData) SetCron(v string) {
	o.Cron = v
}

// GetPipelineName returns the PipelineName field value if set, zero value otherwise.
func (o *DevopsCronData) GetPipelineName() string {
	if o == nil || IsNil(o.PipelineName) {
		var ret string
		return ret
	}
	return *o.PipelineName
}

// GetPipelineNameOk returns a tuple with the PipelineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevopsCronData) GetPipelineNameOk() (*string, bool) {
	if o == nil || IsNil(o.PipelineName) {
		return nil, false
	}
	return o.PipelineName, true
}

// HasPipelineName returns a boolean if a field has been set.
func (o *DevopsCronData) HasPipelineName() bool {
	if o != nil && !IsNil(o.PipelineName) {
		return true
	}

	return false
}

// SetPipelineName gets a reference to the given string and assigns it to the PipelineName field.
func (o *DevopsCronData) SetPipelineName(v string) {
	o.PipelineName = &v
}

func (o DevopsCronData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevopsCronData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cron"] = o.Cron
	if !IsNil(o.PipelineName) {
		toSerialize["pipelineName"] = o.PipelineName
	}
	return toSerialize, nil
}

func (o *DevopsCronData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cron",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDevopsCronData := _DevopsCronData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDevopsCronData)

	if err != nil {
		return err
	}

	*o = DevopsCronData(varDevopsCronData)

	return err
}

type NullableDevopsCronData struct {
	value *DevopsCronData
	isSet bool
}

func (v NullableDevopsCronData) Get() *DevopsCronData {
	return v.value
}

func (v *NullableDevopsCronData) Set(val *DevopsCronData) {
	v.value = val
	v.isSet = true
}

func (v NullableDevopsCronData) IsSet() bool {
	return v.isSet
}

func (v *NullableDevopsCronData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevopsCronData(val *DevopsCronData) *NullableDevopsCronData {
	return &NullableDevopsCronData{value: val, isSet: true}
}

func (v NullableDevopsCronData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevopsCronData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


