/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1PreferredSchedulingTerm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1PreferredSchedulingTerm{}

// V1PreferredSchedulingTerm An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type V1PreferredSchedulingTerm struct {
	Preference V1NodeSelectorTerm `json:"preference"`
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight int32 `json:"weight"`
}

type _V1PreferredSchedulingTerm V1PreferredSchedulingTerm

// NewV1PreferredSchedulingTerm instantiates a new V1PreferredSchedulingTerm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1PreferredSchedulingTerm(preference V1NodeSelectorTerm, weight int32) *V1PreferredSchedulingTerm {
	this := V1PreferredSchedulingTerm{}
	this.Preference = preference
	this.Weight = weight
	return &this
}

// NewV1PreferredSchedulingTermWithDefaults instantiates a new V1PreferredSchedulingTerm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1PreferredSchedulingTermWithDefaults() *V1PreferredSchedulingTerm {
	this := V1PreferredSchedulingTerm{}
	return &this
}

// GetPreference returns the Preference field value
func (o *V1PreferredSchedulingTerm) GetPreference() V1NodeSelectorTerm {
	if o == nil {
		var ret V1NodeSelectorTerm
		return ret
	}

	return o.Preference
}

// GetPreferenceOk returns a tuple with the Preference field value
// and a boolean to check if the value has been set.
func (o *V1PreferredSchedulingTerm) GetPreferenceOk() (*V1NodeSelectorTerm, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Preference, true
}

// SetPreference sets field value
func (o *V1PreferredSchedulingTerm) SetPreference(v V1NodeSelectorTerm) {
	o.Preference = v
}

// GetWeight returns the Weight field value
func (o *V1PreferredSchedulingTerm) GetWeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Weight
}

// GetWeightOk returns a tuple with the Weight field value
// and a boolean to check if the value has been set.
func (o *V1PreferredSchedulingTerm) GetWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Weight, true
}

// SetWeight sets field value
func (o *V1PreferredSchedulingTerm) SetWeight(v int32) {
	o.Weight = v
}

func (o V1PreferredSchedulingTerm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1PreferredSchedulingTerm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["preference"] = o.Preference
	toSerialize["weight"] = o.Weight
	return toSerialize, nil
}

func (o *V1PreferredSchedulingTerm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"preference",
		"weight",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1PreferredSchedulingTerm := _V1PreferredSchedulingTerm{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1PreferredSchedulingTerm)

	if err != nil {
		return err
	}

	*o = V1PreferredSchedulingTerm(varV1PreferredSchedulingTerm)

	return err
}

type NullableV1PreferredSchedulingTerm struct {
	value *V1PreferredSchedulingTerm
	isSet bool
}

func (v NullableV1PreferredSchedulingTerm) Get() *V1PreferredSchedulingTerm {
	return v.value
}

func (v *NullableV1PreferredSchedulingTerm) Set(val *V1PreferredSchedulingTerm) {
	v.value = val
	v.isSet = true
}

func (v NullableV1PreferredSchedulingTerm) IsSet() bool {
	return v.isSet
}

func (v *NullableV1PreferredSchedulingTerm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1PreferredSchedulingTerm(val *V1PreferredSchedulingTerm) *NullableV1PreferredSchedulingTerm {
	return &NullableV1PreferredSchedulingTerm{value: val, isSet: true}
}

func (v NullableV1PreferredSchedulingTerm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1PreferredSchedulingTerm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


