/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MonitoringMetric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitoringMetric{}

// MonitoringMetric struct for MonitoringMetric
type MonitoringMetric struct {
	Data *MonitoringMetricData `json:"data,omitempty"`
	Error *string `json:"error,omitempty"`
	// metric name, eg. scheduler_up_sum
	MetricName *string `json:"metric_name,omitempty"`
}

// NewMonitoringMetric instantiates a new MonitoringMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringMetric() *MonitoringMetric {
	this := MonitoringMetric{}
	return &this
}

// NewMonitoringMetricWithDefaults instantiates a new MonitoringMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringMetricWithDefaults() *MonitoringMetric {
	this := MonitoringMetric{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *MonitoringMetric) GetData() MonitoringMetricData {
	if o == nil || IsNil(o.Data) {
		var ret MonitoringMetricData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMetric) GetDataOk() (*MonitoringMetricData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *MonitoringMetric) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given MonitoringMetricData and assigns it to the Data field.
func (o *MonitoringMetric) SetData(v MonitoringMetricData) {
	o.Data = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *MonitoringMetric) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMetric) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *MonitoringMetric) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *MonitoringMetric) SetError(v string) {
	o.Error = &v
}

// GetMetricName returns the MetricName field value if set, zero value otherwise.
func (o *MonitoringMetric) GetMetricName() string {
	if o == nil || IsNil(o.MetricName) {
		var ret string
		return ret
	}
	return *o.MetricName
}

// GetMetricNameOk returns a tuple with the MetricName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMetric) GetMetricNameOk() (*string, bool) {
	if o == nil || IsNil(o.MetricName) {
		return nil, false
	}
	return o.MetricName, true
}

// HasMetricName returns a boolean if a field has been set.
func (o *MonitoringMetric) HasMetricName() bool {
	if o != nil && !IsNil(o.MetricName) {
		return true
	}

	return false
}

// SetMetricName gets a reference to the given string and assigns it to the MetricName field.
func (o *MonitoringMetric) SetMetricName(v string) {
	o.MetricName = &v
}

func (o MonitoringMetric) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitoringMetric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.MetricName) {
		toSerialize["metric_name"] = o.MetricName
	}
	return toSerialize, nil
}

type NullableMonitoringMetric struct {
	value *MonitoringMetric
	isSet bool
}

func (v NullableMonitoringMetric) Get() *MonitoringMetric {
	return v.value
}

func (v *NullableMonitoringMetric) Set(val *MonitoringMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringMetric(val *MonitoringMetric) *NullableMonitoringMetric {
	return &NullableMonitoringMetric{value: val, isSet: true}
}

func (v NullableMonitoringMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


