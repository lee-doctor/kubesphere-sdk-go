/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1NFSVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1NFSVolumeSource{}

// V1NFSVolumeSource Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
type V1NFSVolumeSource struct {
	// path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Path string `json:"path"`
	// readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	ReadOnly *bool `json:"readOnly,omitempty"`
	// server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Server string `json:"server"`
}

type _V1NFSVolumeSource V1NFSVolumeSource

// NewV1NFSVolumeSource instantiates a new V1NFSVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1NFSVolumeSource(path string, server string) *V1NFSVolumeSource {
	this := V1NFSVolumeSource{}
	this.Path = path
	this.Server = server
	return &this
}

// NewV1NFSVolumeSourceWithDefaults instantiates a new V1NFSVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1NFSVolumeSourceWithDefaults() *V1NFSVolumeSource {
	this := V1NFSVolumeSource{}
	return &this
}

// GetPath returns the Path field value
func (o *V1NFSVolumeSource) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *V1NFSVolumeSource) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *V1NFSVolumeSource) SetPath(v string) {
	o.Path = v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *V1NFSVolumeSource) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NFSVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *V1NFSVolumeSource) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *V1NFSVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetServer returns the Server field value
func (o *V1NFSVolumeSource) GetServer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *V1NFSVolumeSource) GetServerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Server, true
}

// SetServer sets field value
func (o *V1NFSVolumeSource) SetServer(v string) {
	o.Server = v
}

func (o V1NFSVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1NFSVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["path"] = o.Path
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	toSerialize["server"] = o.Server
	return toSerialize, nil
}

func (o *V1NFSVolumeSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"path",
		"server",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1NFSVolumeSource := _V1NFSVolumeSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1NFSVolumeSource)

	if err != nil {
		return err
	}

	*o = V1NFSVolumeSource(varV1NFSVolumeSource)

	return err
}

type NullableV1NFSVolumeSource struct {
	value *V1NFSVolumeSource
	isSet bool
}

func (v NullableV1NFSVolumeSource) Get() *V1NFSVolumeSource {
	return v.value
}

func (v *NullableV1NFSVolumeSource) Set(val *V1NFSVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1NFSVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1NFSVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1NFSVolumeSource(val *V1NFSVolumeSource) *NullableV1NFSVolumeSource {
	return &NullableV1NFSVolumeSource{value: val, isSet: true}
}

func (v NullableV1NFSVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1NFSVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


