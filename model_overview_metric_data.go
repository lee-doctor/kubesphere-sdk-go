/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OverviewMetricData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OverviewMetricData{}

// OverviewMetricData struct for OverviewMetricData
type OverviewMetricData struct {
	Result []OverviewMetricValue `json:"result"`
	ResultType string `json:"resultType"`
}

type _OverviewMetricData OverviewMetricData

// NewOverviewMetricData instantiates a new OverviewMetricData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOverviewMetricData(result []OverviewMetricValue, resultType string) *OverviewMetricData {
	this := OverviewMetricData{}
	this.Result = result
	this.ResultType = resultType
	return &this
}

// NewOverviewMetricDataWithDefaults instantiates a new OverviewMetricData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOverviewMetricDataWithDefaults() *OverviewMetricData {
	this := OverviewMetricData{}
	return &this
}

// GetResult returns the Result field value
func (o *OverviewMetricData) GetResult() []OverviewMetricValue {
	if o == nil {
		var ret []OverviewMetricValue
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *OverviewMetricData) GetResultOk() ([]OverviewMetricValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.Result, true
}

// SetResult sets field value
func (o *OverviewMetricData) SetResult(v []OverviewMetricValue) {
	o.Result = v
}

// GetResultType returns the ResultType field value
func (o *OverviewMetricData) GetResultType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResultType
}

// GetResultTypeOk returns a tuple with the ResultType field value
// and a boolean to check if the value has been set.
func (o *OverviewMetricData) GetResultTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultType, true
}

// SetResultType sets field value
func (o *OverviewMetricData) SetResultType(v string) {
	o.ResultType = v
}

func (o OverviewMetricData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OverviewMetricData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	toSerialize["resultType"] = o.ResultType
	return toSerialize, nil
}

func (o *OverviewMetricData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"result",
		"resultType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOverviewMetricData := _OverviewMetricData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOverviewMetricData)

	if err != nil {
		return err
	}

	*o = OverviewMetricData(varOverviewMetricData)

	return err
}

type NullableOverviewMetricData struct {
	value *OverviewMetricData
	isSet bool
}

func (v NullableOverviewMetricData) Get() *OverviewMetricData {
	return v.value
}

func (v *NullableOverviewMetricData) Set(val *OverviewMetricData) {
	v.value = val
	v.isSet = true
}

func (v NullableOverviewMetricData) IsSet() bool {
	return v.isSet
}

func (v *NullableOverviewMetricData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOverviewMetricData(val *OverviewMetricData) *NullableOverviewMetricData {
	return &NullableOverviewMetricData{value: val, isSet: true}
}

func (v NullableOverviewMetricData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOverviewMetricData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


