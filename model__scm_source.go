/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ScmSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScmSource{}

// ScmSource struct for ScmSource
type ScmSource struct {
	// Itâ€™s a fully qualified name and is an identifier of the producer of this resource's capability.
	Class *string `json:"_class,omitempty"`
	ApiUrl map[string]interface{} `json:"apiUrl,omitempty"`
	// The id of the source configuration management (SCM).
	Id *string `json:"id,omitempty"`
}

// NewScmSource instantiates a new ScmSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScmSource() *ScmSource {
	this := ScmSource{}
	return &this
}

// NewScmSourceWithDefaults instantiates a new ScmSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScmSourceWithDefaults() *ScmSource {
	this := ScmSource{}
	return &this
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *ScmSource) GetClass() string {
	if o == nil || IsNil(o.Class) {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmSource) GetClassOk() (*string, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *ScmSource) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *ScmSource) SetClass(v string) {
	o.Class = &v
}

// GetApiUrl returns the ApiUrl field value if set, zero value otherwise.
func (o *ScmSource) GetApiUrl() map[string]interface{} {
	if o == nil || IsNil(o.ApiUrl) {
		var ret map[string]interface{}
		return ret
	}
	return o.ApiUrl
}

// GetApiUrlOk returns a tuple with the ApiUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmSource) GetApiUrlOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ApiUrl) {
		return map[string]interface{}{}, false
	}
	return o.ApiUrl, true
}

// HasApiUrl returns a boolean if a field has been set.
func (o *ScmSource) HasApiUrl() bool {
	if o != nil && !IsNil(o.ApiUrl) {
		return true
	}

	return false
}

// SetApiUrl gets a reference to the given map[string]interface{} and assigns it to the ApiUrl field.
func (o *ScmSource) SetApiUrl(v map[string]interface{}) {
	o.ApiUrl = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ScmSource) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScmSource) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ScmSource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ScmSource) SetId(v string) {
	o.Id = &v
}

func (o ScmSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScmSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Class) {
		toSerialize["_class"] = o.Class
	}
	if !IsNil(o.ApiUrl) {
		toSerialize["apiUrl"] = o.ApiUrl
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

type NullableScmSource struct {
	value *ScmSource
	isSet bool
}

func (v NullableScmSource) Get() *ScmSource {
	return v.value
}

func (v *NullableScmSource) Set(val *ScmSource) {
	v.value = val
	v.isSet = true
}

func (v NullableScmSource) IsSet() bool {
	return v.isSet
}

func (v *NullableScmSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScmSource(val *ScmSource) *NullableScmSource {
	return &NullableScmSource{value: val, isSet: true}
}

func (v NullableScmSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScmSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


