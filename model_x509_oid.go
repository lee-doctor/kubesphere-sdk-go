/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the X509OID type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &X509OID{}

// X509OID struct for X509OID
type X509OID struct {
	Der string `json:"der"`
}

type _X509OID X509OID

// NewX509OID instantiates a new X509OID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewX509OID(der string) *X509OID {
	this := X509OID{}
	this.Der = der
	return &this
}

// NewX509OIDWithDefaults instantiates a new X509OID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewX509OIDWithDefaults() *X509OID {
	this := X509OID{}
	return &this
}

// GetDer returns the Der field value
func (o *X509OID) GetDer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Der
}

// GetDerOk returns a tuple with the Der field value
// and a boolean to check if the value has been set.
func (o *X509OID) GetDerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Der, true
}

// SetDer sets field value
func (o *X509OID) SetDer(v string) {
	o.Der = v
}

func (o X509OID) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o X509OID) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["der"] = o.Der
	return toSerialize, nil
}

func (o *X509OID) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"der",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varX509OID := _X509OID{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varX509OID)

	if err != nil {
		return err
	}

	*o = X509OID(varX509OID)

	return err
}

type NullableX509OID struct {
	value *X509OID
	isSet bool
}

func (v NullableX509OID) Get() *X509OID {
	return v.value
}

func (v *NullableX509OID) Set(val *X509OID) {
	v.value = val
	v.isSet = true
}

func (v NullableX509OID) IsSet() bool {
	return v.isSet
}

func (v *NullableX509OID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableX509OID(val *X509OID) *NullableX509OID {
	return &NullableX509OID{value: val, isSet: true}
}

func (v NullableX509OID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableX509OID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


