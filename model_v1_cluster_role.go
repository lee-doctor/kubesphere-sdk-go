/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1ClusterRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ClusterRole{}

// V1ClusterRole ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.
type V1ClusterRole struct {
	AggregationRule *V1AggregationRule `json:"aggregationRule,omitempty"`
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	Metadata *V1ObjectMeta `json:"metadata,omitempty"`
	// Rules holds all the PolicyRules for this ClusterRole
	Rules []V1PolicyRule `json:"rules"`
}

type _V1ClusterRole V1ClusterRole

// NewV1ClusterRole instantiates a new V1ClusterRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ClusterRole(rules []V1PolicyRule) *V1ClusterRole {
	this := V1ClusterRole{}
	this.Rules = rules
	return &this
}

// NewV1ClusterRoleWithDefaults instantiates a new V1ClusterRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ClusterRoleWithDefaults() *V1ClusterRole {
	this := V1ClusterRole{}
	return &this
}

// GetAggregationRule returns the AggregationRule field value if set, zero value otherwise.
func (o *V1ClusterRole) GetAggregationRule() V1AggregationRule {
	if o == nil || IsNil(o.AggregationRule) {
		var ret V1AggregationRule
		return ret
	}
	return *o.AggregationRule
}

// GetAggregationRuleOk returns a tuple with the AggregationRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ClusterRole) GetAggregationRuleOk() (*V1AggregationRule, bool) {
	if o == nil || IsNil(o.AggregationRule) {
		return nil, false
	}
	return o.AggregationRule, true
}

// HasAggregationRule returns a boolean if a field has been set.
func (o *V1ClusterRole) HasAggregationRule() bool {
	if o != nil && !IsNil(o.AggregationRule) {
		return true
	}

	return false
}

// SetAggregationRule gets a reference to the given V1AggregationRule and assigns it to the AggregationRule field.
func (o *V1ClusterRole) SetAggregationRule(v V1AggregationRule) {
	o.AggregationRule = &v
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *V1ClusterRole) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ClusterRole) GetApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *V1ClusterRole) HasApiVersion() bool {
	if o != nil && !IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *V1ClusterRole) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V1ClusterRole) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ClusterRole) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V1ClusterRole) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V1ClusterRole) SetKind(v string) {
	o.Kind = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V1ClusterRole) GetMetadata() V1ObjectMeta {
	if o == nil || IsNil(o.Metadata) {
		var ret V1ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ClusterRole) GetMetadataOk() (*V1ObjectMeta, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V1ClusterRole) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given V1ObjectMeta and assigns it to the Metadata field.
func (o *V1ClusterRole) SetMetadata(v V1ObjectMeta) {
	o.Metadata = &v
}

// GetRules returns the Rules field value
func (o *V1ClusterRole) GetRules() []V1PolicyRule {
	if o == nil {
		var ret []V1PolicyRule
		return ret
	}

	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value
// and a boolean to check if the value has been set.
func (o *V1ClusterRole) GetRulesOk() ([]V1PolicyRule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rules, true
}

// SetRules sets field value
func (o *V1ClusterRole) SetRules(v []V1PolicyRule) {
	o.Rules = v
}

func (o V1ClusterRole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ClusterRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AggregationRule) {
		toSerialize["aggregationRule"] = o.AggregationRule
	}
	if !IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["rules"] = o.Rules
	return toSerialize, nil
}

func (o *V1ClusterRole) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1ClusterRole := _V1ClusterRole{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1ClusterRole)

	if err != nil {
		return err
	}

	*o = V1ClusterRole(varV1ClusterRole)

	return err
}

type NullableV1ClusterRole struct {
	value *V1ClusterRole
	isSet bool
}

func (v NullableV1ClusterRole) Get() *V1ClusterRole {
	return v.value
}

func (v *NullableV1ClusterRole) Set(val *V1ClusterRole) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ClusterRole) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ClusterRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ClusterRole(val *V1ClusterRole) *NullableV1ClusterRole {
	return &NullableV1ClusterRole{value: val, isSet: true}
}

func (v NullableV1ClusterRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ClusterRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


