/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1AggregationRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1AggregationRule{}

// V1AggregationRule AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
type V1AggregationRule struct {
	// ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
	ClusterRoleSelectors []V1LabelSelector `json:"clusterRoleSelectors,omitempty"`
}

// NewV1AggregationRule instantiates a new V1AggregationRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1AggregationRule() *V1AggregationRule {
	this := V1AggregationRule{}
	return &this
}

// NewV1AggregationRuleWithDefaults instantiates a new V1AggregationRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1AggregationRuleWithDefaults() *V1AggregationRule {
	this := V1AggregationRule{}
	return &this
}

// GetClusterRoleSelectors returns the ClusterRoleSelectors field value if set, zero value otherwise.
func (o *V1AggregationRule) GetClusterRoleSelectors() []V1LabelSelector {
	if o == nil || IsNil(o.ClusterRoleSelectors) {
		var ret []V1LabelSelector
		return ret
	}
	return o.ClusterRoleSelectors
}

// GetClusterRoleSelectorsOk returns a tuple with the ClusterRoleSelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AggregationRule) GetClusterRoleSelectorsOk() ([]V1LabelSelector, bool) {
	if o == nil || IsNil(o.ClusterRoleSelectors) {
		return nil, false
	}
	return o.ClusterRoleSelectors, true
}

// HasClusterRoleSelectors returns a boolean if a field has been set.
func (o *V1AggregationRule) HasClusterRoleSelectors() bool {
	if o != nil && !IsNil(o.ClusterRoleSelectors) {
		return true
	}

	return false
}

// SetClusterRoleSelectors gets a reference to the given []V1LabelSelector and assigns it to the ClusterRoleSelectors field.
func (o *V1AggregationRule) SetClusterRoleSelectors(v []V1LabelSelector) {
	o.ClusterRoleSelectors = v
}

func (o V1AggregationRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1AggregationRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClusterRoleSelectors) {
		toSerialize["clusterRoleSelectors"] = o.ClusterRoleSelectors
	}
	return toSerialize, nil
}

type NullableV1AggregationRule struct {
	value *V1AggregationRule
	isSet bool
}

func (v NullableV1AggregationRule) Get() *V1AggregationRule {
	return v.value
}

func (v *NullableV1AggregationRule) Set(val *V1AggregationRule) {
	v.value = val
	v.isSet = true
}

func (v NullableV1AggregationRule) IsSet() bool {
	return v.isSet
}

func (v *NullableV1AggregationRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1AggregationRule(val *V1AggregationRule) *NullableV1AggregationRule {
	return &NullableV1AggregationRule{value: val, isSet: true}
}

func (v NullableV1AggregationRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1AggregationRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


