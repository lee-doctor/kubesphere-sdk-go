/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InfDec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfDec{}

// InfDec struct for InfDec
type InfDec struct {
	Scale int32 `json:"scale"`
	Unscaled BigInt `json:"unscaled"`
}

type _InfDec InfDec

// NewInfDec instantiates a new InfDec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfDec(scale int32, unscaled BigInt) *InfDec {
	this := InfDec{}
	this.Scale = scale
	this.Unscaled = unscaled
	return &this
}

// NewInfDecWithDefaults instantiates a new InfDec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfDecWithDefaults() *InfDec {
	this := InfDec{}
	return &this
}

// GetScale returns the Scale field value
func (o *InfDec) GetScale() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Scale
}

// GetScaleOk returns a tuple with the Scale field value
// and a boolean to check if the value has been set.
func (o *InfDec) GetScaleOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scale, true
}

// SetScale sets field value
func (o *InfDec) SetScale(v int32) {
	o.Scale = v
}

// GetUnscaled returns the Unscaled field value
func (o *InfDec) GetUnscaled() BigInt {
	if o == nil {
		var ret BigInt
		return ret
	}

	return o.Unscaled
}

// GetUnscaledOk returns a tuple with the Unscaled field value
// and a boolean to check if the value has been set.
func (o *InfDec) GetUnscaledOk() (*BigInt, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unscaled, true
}

// SetUnscaled sets field value
func (o *InfDec) SetUnscaled(v BigInt) {
	o.Unscaled = v
}

func (o InfDec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfDec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["scale"] = o.Scale
	toSerialize["unscaled"] = o.Unscaled
	return toSerialize, nil
}

func (o *InfDec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"scale",
		"unscaled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInfDec := _InfDec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInfDec)

	if err != nil {
		return err
	}

	*o = InfDec(varInfDec)

	return err
}

type NullableInfDec struct {
	value *InfDec
	isSet bool
}

func (v NullableInfDec) Get() *InfDec {
	return v.value
}

func (v *NullableInfDec) Set(val *InfDec) {
	v.value = val
	v.isSet = true
}

func (v NullableInfDec) IsSet() bool {
	return v.isSet
}

func (v *NullableInfDec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfDec(val *InfDec) *NullableInfDec {
	return &NullableInfDec{value: val, isSet: true}
}

func (v NullableInfDec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfDec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


