/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DevopsCheckPlayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevopsCheckPlayload{}

// DevopsCheckPlayload struct for DevopsCheckPlayload
type DevopsCheckPlayload struct {
	// abort or not
	Abort *bool `json:"abort,omitempty"`
	// id
	Id *string `json:"id,omitempty"`
	Parameters []DevopsCheckPlayloadParameters `json:"parameters,omitempty"`
}

// NewDevopsCheckPlayload instantiates a new DevopsCheckPlayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevopsCheckPlayload() *DevopsCheckPlayload {
	this := DevopsCheckPlayload{}
	return &this
}

// NewDevopsCheckPlayloadWithDefaults instantiates a new DevopsCheckPlayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevopsCheckPlayloadWithDefaults() *DevopsCheckPlayload {
	this := DevopsCheckPlayload{}
	return &this
}

// GetAbort returns the Abort field value if set, zero value otherwise.
func (o *DevopsCheckPlayload) GetAbort() bool {
	if o == nil || IsNil(o.Abort) {
		var ret bool
		return ret
	}
	return *o.Abort
}

// GetAbortOk returns a tuple with the Abort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevopsCheckPlayload) GetAbortOk() (*bool, bool) {
	if o == nil || IsNil(o.Abort) {
		return nil, false
	}
	return o.Abort, true
}

// HasAbort returns a boolean if a field has been set.
func (o *DevopsCheckPlayload) HasAbort() bool {
	if o != nil && !IsNil(o.Abort) {
		return true
	}

	return false
}

// SetAbort gets a reference to the given bool and assigns it to the Abort field.
func (o *DevopsCheckPlayload) SetAbort(v bool) {
	o.Abort = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DevopsCheckPlayload) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevopsCheckPlayload) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DevopsCheckPlayload) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DevopsCheckPlayload) SetId(v string) {
	o.Id = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *DevopsCheckPlayload) GetParameters() []DevopsCheckPlayloadParameters {
	if o == nil || IsNil(o.Parameters) {
		var ret []DevopsCheckPlayloadParameters
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevopsCheckPlayload) GetParametersOk() ([]DevopsCheckPlayloadParameters, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *DevopsCheckPlayload) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []DevopsCheckPlayloadParameters and assigns it to the Parameters field.
func (o *DevopsCheckPlayload) SetParameters(v []DevopsCheckPlayloadParameters) {
	o.Parameters = v
}

func (o DevopsCheckPlayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevopsCheckPlayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Abort) {
		toSerialize["abort"] = o.Abort
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

type NullableDevopsCheckPlayload struct {
	value *DevopsCheckPlayload
	isSet bool
}

func (v NullableDevopsCheckPlayload) Get() *DevopsCheckPlayload {
	return v.value
}

func (v *NullableDevopsCheckPlayload) Set(val *DevopsCheckPlayload) {
	v.value = val
	v.isSet = true
}

func (v NullableDevopsCheckPlayload) IsSet() bool {
	return v.isSet
}

func (v *NullableDevopsCheckPlayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevopsCheckPlayload(val *DevopsCheckPlayload) *NullableDevopsCheckPlayload {
	return &NullableDevopsCheckPlayload{value: val, isSet: true}
}

func (v NullableDevopsCheckPlayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevopsCheckPlayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


