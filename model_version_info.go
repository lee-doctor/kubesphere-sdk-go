/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VersionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionInfo{}

// VersionInfo struct for VersionInfo
type VersionInfo struct {
	BuildDate string `json:"buildDate"`
	Compiler string `json:"compiler"`
	GitCommit string `json:"gitCommit"`
	GitMajor string `json:"gitMajor"`
	GitMinor string `json:"gitMinor"`
	GitTreeState string `json:"gitTreeState"`
	GitVersion string `json:"gitVersion"`
	GoVersion string `json:"goVersion"`
	Kubernetes *VersionInfo `json:"kubernetes,omitempty"`
	Platform string `json:"platform"`
}

type _VersionInfo VersionInfo

// NewVersionInfo instantiates a new VersionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionInfo(buildDate string, compiler string, gitCommit string, gitMajor string, gitMinor string, gitTreeState string, gitVersion string, goVersion string, platform string) *VersionInfo {
	this := VersionInfo{}
	this.BuildDate = buildDate
	this.Compiler = compiler
	this.GitCommit = gitCommit
	this.GitMajor = gitMajor
	this.GitMinor = gitMinor
	this.GitTreeState = gitTreeState
	this.GitVersion = gitVersion
	this.GoVersion = goVersion
	this.Platform = platform
	return &this
}

// NewVersionInfoWithDefaults instantiates a new VersionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionInfoWithDefaults() *VersionInfo {
	this := VersionInfo{}
	return &this
}

// GetBuildDate returns the BuildDate field value
func (o *VersionInfo) GetBuildDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuildDate
}

// GetBuildDateOk returns a tuple with the BuildDate field value
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetBuildDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuildDate, true
}

// SetBuildDate sets field value
func (o *VersionInfo) SetBuildDate(v string) {
	o.BuildDate = v
}

// GetCompiler returns the Compiler field value
func (o *VersionInfo) GetCompiler() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Compiler
}

// GetCompilerOk returns a tuple with the Compiler field value
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetCompilerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Compiler, true
}

// SetCompiler sets field value
func (o *VersionInfo) SetCompiler(v string) {
	o.Compiler = v
}

// GetGitCommit returns the GitCommit field value
func (o *VersionInfo) GetGitCommit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitCommit
}

// GetGitCommitOk returns a tuple with the GitCommit field value
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetGitCommitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitCommit, true
}

// SetGitCommit sets field value
func (o *VersionInfo) SetGitCommit(v string) {
	o.GitCommit = v
}

// GetGitMajor returns the GitMajor field value
func (o *VersionInfo) GetGitMajor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitMajor
}

// GetGitMajorOk returns a tuple with the GitMajor field value
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetGitMajorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitMajor, true
}

// SetGitMajor sets field value
func (o *VersionInfo) SetGitMajor(v string) {
	o.GitMajor = v
}

// GetGitMinor returns the GitMinor field value
func (o *VersionInfo) GetGitMinor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitMinor
}

// GetGitMinorOk returns a tuple with the GitMinor field value
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetGitMinorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitMinor, true
}

// SetGitMinor sets field value
func (o *VersionInfo) SetGitMinor(v string) {
	o.GitMinor = v
}

// GetGitTreeState returns the GitTreeState field value
func (o *VersionInfo) GetGitTreeState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitTreeState
}

// GetGitTreeStateOk returns a tuple with the GitTreeState field value
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetGitTreeStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitTreeState, true
}

// SetGitTreeState sets field value
func (o *VersionInfo) SetGitTreeState(v string) {
	o.GitTreeState = v
}

// GetGitVersion returns the GitVersion field value
func (o *VersionInfo) GetGitVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GitVersion
}

// GetGitVersionOk returns a tuple with the GitVersion field value
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetGitVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GitVersion, true
}

// SetGitVersion sets field value
func (o *VersionInfo) SetGitVersion(v string) {
	o.GitVersion = v
}

// GetGoVersion returns the GoVersion field value
func (o *VersionInfo) GetGoVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GoVersion
}

// GetGoVersionOk returns a tuple with the GoVersion field value
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetGoVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GoVersion, true
}

// SetGoVersion sets field value
func (o *VersionInfo) SetGoVersion(v string) {
	o.GoVersion = v
}

// GetKubernetes returns the Kubernetes field value if set, zero value otherwise.
func (o *VersionInfo) GetKubernetes() VersionInfo {
	if o == nil || IsNil(o.Kubernetes) {
		var ret VersionInfo
		return ret
	}
	return *o.Kubernetes
}

// GetKubernetesOk returns a tuple with the Kubernetes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetKubernetesOk() (*VersionInfo, bool) {
	if o == nil || IsNil(o.Kubernetes) {
		return nil, false
	}
	return o.Kubernetes, true
}

// HasKubernetes returns a boolean if a field has been set.
func (o *VersionInfo) HasKubernetes() bool {
	if o != nil && !IsNil(o.Kubernetes) {
		return true
	}

	return false
}

// SetKubernetes gets a reference to the given VersionInfo and assigns it to the Kubernetes field.
func (o *VersionInfo) SetKubernetes(v VersionInfo) {
	o.Kubernetes = &v
}

// GetPlatform returns the Platform field value
func (o *VersionInfo) GetPlatform() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value
// and a boolean to check if the value has been set.
func (o *VersionInfo) GetPlatformOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Platform, true
}

// SetPlatform sets field value
func (o *VersionInfo) SetPlatform(v string) {
	o.Platform = v
}

func (o VersionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["buildDate"] = o.BuildDate
	toSerialize["compiler"] = o.Compiler
	toSerialize["gitCommit"] = o.GitCommit
	toSerialize["gitMajor"] = o.GitMajor
	toSerialize["gitMinor"] = o.GitMinor
	toSerialize["gitTreeState"] = o.GitTreeState
	toSerialize["gitVersion"] = o.GitVersion
	toSerialize["goVersion"] = o.GoVersion
	if !IsNil(o.Kubernetes) {
		toSerialize["kubernetes"] = o.Kubernetes
	}
	toSerialize["platform"] = o.Platform
	return toSerialize, nil
}

func (o *VersionInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"buildDate",
		"compiler",
		"gitCommit",
		"gitMajor",
		"gitMinor",
		"gitTreeState",
		"gitVersion",
		"goVersion",
		"platform",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVersionInfo := _VersionInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVersionInfo)

	if err != nil {
		return err
	}

	*o = VersionInfo(varVersionInfo)

	return err
}

type NullableVersionInfo struct {
	value *VersionInfo
	isSet bool
}

func (v NullableVersionInfo) Get() *VersionInfo {
	return v.value
}

func (v *NullableVersionInfo) Set(val *VersionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionInfo(val *VersionInfo) *NullableVersionInfo {
	return &NullableVersionInfo{value: val, isSet: true}
}

func (v NullableVersionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


