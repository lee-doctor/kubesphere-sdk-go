/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NetIPNet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetIPNet{}

// NetIPNet struct for NetIPNet
type NetIPNet struct {
	IP string `json:"IP"`
	Mask string `json:"Mask"`
}

type _NetIPNet NetIPNet

// NewNetIPNet instantiates a new NetIPNet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetIPNet(iP string, mask string) *NetIPNet {
	this := NetIPNet{}
	this.IP = iP
	this.Mask = mask
	return &this
}

// NewNetIPNetWithDefaults instantiates a new NetIPNet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetIPNetWithDefaults() *NetIPNet {
	this := NetIPNet{}
	return &this
}

// GetIP returns the IP field value
func (o *NetIPNet) GetIP() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IP
}

// GetIPOk returns a tuple with the IP field value
// and a boolean to check if the value has been set.
func (o *NetIPNet) GetIPOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IP, true
}

// SetIP sets field value
func (o *NetIPNet) SetIP(v string) {
	o.IP = v
}

// GetMask returns the Mask field value
func (o *NetIPNet) GetMask() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Mask
}

// GetMaskOk returns a tuple with the Mask field value
// and a boolean to check if the value has been set.
func (o *NetIPNet) GetMaskOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mask, true
}

// SetMask sets field value
func (o *NetIPNet) SetMask(v string) {
	o.Mask = v
}

func (o NetIPNet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetIPNet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["IP"] = o.IP
	toSerialize["Mask"] = o.Mask
	return toSerialize, nil
}

func (o *NetIPNet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"IP",
		"Mask",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetIPNet := _NetIPNet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNetIPNet)

	if err != nil {
		return err
	}

	*o = NetIPNet(varNetIPNet)

	return err
}

type NullableNetIPNet struct {
	value *NetIPNet
	isSet bool
}

func (v NullableNetIPNet) Get() *NetIPNet {
	return v.value
}

func (v *NullableNetIPNet) Set(val *NetIPNet) {
	v.value = val
	v.isSet = true
}

func (v NullableNetIPNet) IsSet() bool {
	return v.isSet
}

func (v *NullableNetIPNet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetIPNet(val *NetIPNet) *NullableNetIPNet {
	return &NullableNetIPNet{value: val, isSet: true}
}

func (v NullableNetIPNet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetIPNet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


