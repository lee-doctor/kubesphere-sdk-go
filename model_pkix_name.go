/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PkixName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PkixName{}

// PkixName struct for PkixName
type PkixName struct {
	CommonName string `json:"CommonName"`
	Country []string `json:"Country"`
	ExtraNames []PkixAttributeTypeAndValue `json:"ExtraNames"`
	Locality []string `json:"Locality"`
	Names []PkixAttributeTypeAndValue `json:"Names"`
	Organization []string `json:"Organization"`
	OrganizationalUnit []string `json:"OrganizationalUnit"`
	PostalCode []string `json:"PostalCode"`
	Province []string `json:"Province"`
	SerialNumber string `json:"SerialNumber"`
	StreetAddress []string `json:"StreetAddress"`
}

type _PkixName PkixName

// NewPkixName instantiates a new PkixName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPkixName(commonName string, country []string, extraNames []PkixAttributeTypeAndValue, locality []string, names []PkixAttributeTypeAndValue, organization []string, organizationalUnit []string, postalCode []string, province []string, serialNumber string, streetAddress []string) *PkixName {
	this := PkixName{}
	this.CommonName = commonName
	this.Country = country
	this.ExtraNames = extraNames
	this.Locality = locality
	this.Names = names
	this.Organization = organization
	this.OrganizationalUnit = organizationalUnit
	this.PostalCode = postalCode
	this.Province = province
	this.SerialNumber = serialNumber
	this.StreetAddress = streetAddress
	return &this
}

// NewPkixNameWithDefaults instantiates a new PkixName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPkixNameWithDefaults() *PkixName {
	this := PkixName{}
	return &this
}

// GetCommonName returns the CommonName field value
func (o *PkixName) GetCommonName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value
// and a boolean to check if the value has been set.
func (o *PkixName) GetCommonNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommonName, true
}

// SetCommonName sets field value
func (o *PkixName) SetCommonName(v string) {
	o.CommonName = v
}

// GetCountry returns the Country field value
func (o *PkixName) GetCountry() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *PkixName) GetCountryOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Country, true
}

// SetCountry sets field value
func (o *PkixName) SetCountry(v []string) {
	o.Country = v
}

// GetExtraNames returns the ExtraNames field value
func (o *PkixName) GetExtraNames() []PkixAttributeTypeAndValue {
	if o == nil {
		var ret []PkixAttributeTypeAndValue
		return ret
	}

	return o.ExtraNames
}

// GetExtraNamesOk returns a tuple with the ExtraNames field value
// and a boolean to check if the value has been set.
func (o *PkixName) GetExtraNamesOk() ([]PkixAttributeTypeAndValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtraNames, true
}

// SetExtraNames sets field value
func (o *PkixName) SetExtraNames(v []PkixAttributeTypeAndValue) {
	o.ExtraNames = v
}

// GetLocality returns the Locality field value
func (o *PkixName) GetLocality() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Locality
}

// GetLocalityOk returns a tuple with the Locality field value
// and a boolean to check if the value has been set.
func (o *PkixName) GetLocalityOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locality, true
}

// SetLocality sets field value
func (o *PkixName) SetLocality(v []string) {
	o.Locality = v
}

// GetNames returns the Names field value
func (o *PkixName) GetNames() []PkixAttributeTypeAndValue {
	if o == nil {
		var ret []PkixAttributeTypeAndValue
		return ret
	}

	return o.Names
}

// GetNamesOk returns a tuple with the Names field value
// and a boolean to check if the value has been set.
func (o *PkixName) GetNamesOk() ([]PkixAttributeTypeAndValue, bool) {
	if o == nil {
		return nil, false
	}
	return o.Names, true
}

// SetNames sets field value
func (o *PkixName) SetNames(v []PkixAttributeTypeAndValue) {
	o.Names = v
}

// GetOrganization returns the Organization field value
func (o *PkixName) GetOrganization() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value
// and a boolean to check if the value has been set.
func (o *PkixName) GetOrganizationOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization, true
}

// SetOrganization sets field value
func (o *PkixName) SetOrganization(v []string) {
	o.Organization = v
}

// GetOrganizationalUnit returns the OrganizationalUnit field value
func (o *PkixName) GetOrganizationalUnit() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.OrganizationalUnit
}

// GetOrganizationalUnitOk returns a tuple with the OrganizationalUnit field value
// and a boolean to check if the value has been set.
func (o *PkixName) GetOrganizationalUnitOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrganizationalUnit, true
}

// SetOrganizationalUnit sets field value
func (o *PkixName) SetOrganizationalUnit(v []string) {
	o.OrganizationalUnit = v
}

// GetPostalCode returns the PostalCode field value
func (o *PkixName) GetPostalCode() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value
// and a boolean to check if the value has been set.
func (o *PkixName) GetPostalCodeOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostalCode, true
}

// SetPostalCode sets field value
func (o *PkixName) SetPostalCode(v []string) {
	o.PostalCode = v
}

// GetProvince returns the Province field value
func (o *PkixName) GetProvince() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Province
}

// GetProvinceOk returns a tuple with the Province field value
// and a boolean to check if the value has been set.
func (o *PkixName) GetProvinceOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Province, true
}

// SetProvince sets field value
func (o *PkixName) SetProvince(v []string) {
	o.Province = v
}

// GetSerialNumber returns the SerialNumber field value
func (o *PkixName) GetSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value
// and a boolean to check if the value has been set.
func (o *PkixName) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SerialNumber, true
}

// SetSerialNumber sets field value
func (o *PkixName) SetSerialNumber(v string) {
	o.SerialNumber = v
}

// GetStreetAddress returns the StreetAddress field value
func (o *PkixName) GetStreetAddress() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.StreetAddress
}

// GetStreetAddressOk returns a tuple with the StreetAddress field value
// and a boolean to check if the value has been set.
func (o *PkixName) GetStreetAddressOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StreetAddress, true
}

// SetStreetAddress sets field value
func (o *PkixName) SetStreetAddress(v []string) {
	o.StreetAddress = v
}

func (o PkixName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PkixName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["CommonName"] = o.CommonName
	toSerialize["Country"] = o.Country
	toSerialize["ExtraNames"] = o.ExtraNames
	toSerialize["Locality"] = o.Locality
	toSerialize["Names"] = o.Names
	toSerialize["Organization"] = o.Organization
	toSerialize["OrganizationalUnit"] = o.OrganizationalUnit
	toSerialize["PostalCode"] = o.PostalCode
	toSerialize["Province"] = o.Province
	toSerialize["SerialNumber"] = o.SerialNumber
	toSerialize["StreetAddress"] = o.StreetAddress
	return toSerialize, nil
}

func (o *PkixName) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"CommonName",
		"Country",
		"ExtraNames",
		"Locality",
		"Names",
		"Organization",
		"OrganizationalUnit",
		"PostalCode",
		"Province",
		"SerialNumber",
		"StreetAddress",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPkixName := _PkixName{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPkixName)

	if err != nil {
		return err
	}

	*o = PkixName(varPkixName)

	return err
}

type NullablePkixName struct {
	value *PkixName
	isSet bool
}

func (v NullablePkixName) Get() *PkixName {
	return v.value
}

func (v *NullablePkixName) Set(val *PkixName) {
	v.value = val
	v.isSet = true
}

func (v NullablePkixName) IsSet() bool {
	return v.isSet
}

func (v *NullablePkixName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePkixName(val *PkixName) *NullablePkixName {
	return &NullablePkixName{value: val, isSet: true}
}

func (v NullablePkixName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePkixName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


