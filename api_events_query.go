/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// EventsQueryAPIService EventsQueryAPI service
type EventsQueryAPIService service

type ApiEventsRequest struct {
	ctx context.Context
	ApiService *EventsQueryAPIService
	operation *string
	workspaceFilter *string
	workspaceSearch *string
	involvedObjectNamespaceFilter *string
	involvedObjectNamespaceSearch *string
	involvedObjectNameFilter *string
	involvedObjectNameSearch *string
	involvedObjectKindFilter *string
	reasonFilter *string
	reasonSearch *string
	messageSearch *string
	typeFilter *string
	startTime *string
	endTime *string
	interval *string
	sort *string
	from *int32
	size *int32
}

// Operation type. This can be one of three types: &#x60;query&#x60; (for querying events), &#x60;statistics&#x60; (for retrieving statistical data), &#x60;histogram&#x60; (for displaying events count by time interval). Defaults to query.
func (r ApiEventsRequest) Operation(operation string) ApiEventsRequest {
	r.operation = &operation
	return r
}

// A comma-separated list of workspaces. This field restricts the query to specified workspaces. For example, the following filter matches the workspace my-ws and demo-ws: &#x60;my-ws,demo-ws&#x60;.
func (r ApiEventsRequest) WorkspaceFilter(workspaceFilter string) ApiEventsRequest {
	r.workspaceFilter = &workspaceFilter
	return r
}

// A comma-separated list of keywords. Differing from **workspace_filter**, this field performs fuzzy matching on workspaces. For example, the following value limits the query to workspaces whose name contains the word my(My,MY,...) *OR* demo(Demo,DemO,...): &#x60;my,demo&#x60;.
func (r ApiEventsRequest) WorkspaceSearch(workspaceSearch string) ApiEventsRequest {
	r.workspaceSearch = &workspaceSearch
	return r
}

// A comma-separated list of namespaces. This field restricts the query to specified &#x60;involvedObject.namespace&#x60;.
func (r ApiEventsRequest) InvolvedObjectNamespaceFilter(involvedObjectNamespaceFilter string) ApiEventsRequest {
	r.involvedObjectNamespaceFilter = &involvedObjectNamespaceFilter
	return r
}

// A comma-separated list of keywords. Differing from **involved_object_namespace_filter**, this field performs fuzzy matching on &#x60;involvedObject.namespace&#x60;
func (r ApiEventsRequest) InvolvedObjectNamespaceSearch(involvedObjectNamespaceSearch string) ApiEventsRequest {
	r.involvedObjectNamespaceSearch = &involvedObjectNamespaceSearch
	return r
}

// A comma-separated list of names. This field restricts the query to specified &#x60;involvedObject.name&#x60;.
func (r ApiEventsRequest) InvolvedObjectNameFilter(involvedObjectNameFilter string) ApiEventsRequest {
	r.involvedObjectNameFilter = &involvedObjectNameFilter
	return r
}

// A comma-separated list of keywords. Differing from **involved_object_name_filter**, this field performs fuzzy matching on &#x60;involvedObject.name&#x60;.
func (r ApiEventsRequest) InvolvedObjectNameSearch(involvedObjectNameSearch string) ApiEventsRequest {
	r.involvedObjectNameSearch = &involvedObjectNameSearch
	return r
}

// A comma-separated list of kinds. This field restricts the query to specified &#x60;involvedObject.kind&#x60;.
func (r ApiEventsRequest) InvolvedObjectKindFilter(involvedObjectKindFilter string) ApiEventsRequest {
	r.involvedObjectKindFilter = &involvedObjectKindFilter
	return r
}

// A comma-separated list of reasons. This field restricts the query to specified &#x60;reason&#x60;.
func (r ApiEventsRequest) ReasonFilter(reasonFilter string) ApiEventsRequest {
	r.reasonFilter = &reasonFilter
	return r
}

// A comma-separated list of keywords. Differing from **reason_filter**, this field performs fuzzy matching on &#x60;reason&#x60;.
func (r ApiEventsRequest) ReasonSearch(reasonSearch string) ApiEventsRequest {
	r.reasonSearch = &reasonSearch
	return r
}

// A comma-separated list of keywords. This field performs fuzzy matching on &#x60;message&#x60;.
func (r ApiEventsRequest) MessageSearch(messageSearch string) ApiEventsRequest {
	r.messageSearch = &messageSearch
	return r
}

// Type of event matching on &#x60;type&#x60;. This can be one of two types: &#x60;Warning&#x60;, &#x60;Normal&#x60;
func (r ApiEventsRequest) TypeFilter(typeFilter string) ApiEventsRequest {
	r.typeFilter = &typeFilter
	return r
}

// Start time of query (limits &#x60;lastTimestamp&#x60;). The format is a string representing seconds since the epoch, eg. 1136214245.
func (r ApiEventsRequest) StartTime(startTime string) ApiEventsRequest {
	r.startTime = &startTime
	return r
}

// End time of query (limits &#x60;lastTimestamp&#x60;). The format is a string representing seconds since the epoch, eg. 1136214245.
func (r ApiEventsRequest) EndTime(endTime string) ApiEventsRequest {
	r.endTime = &endTime
	return r
}

// Time interval. It requires **operation** is set to &#x60;histogram&#x60;. The format is [0-9]+[smhdwMqy]. Defaults to 15m (i.e. 15 min).
func (r ApiEventsRequest) Interval(interval string) ApiEventsRequest {
	r.interval = &interval
	return r
}

// Sort order. One of asc, desc. This field sorts events by &#x60;lastTimestamp&#x60;.
func (r ApiEventsRequest) Sort(sort string) ApiEventsRequest {
	r.sort = &sort
	return r
}

// The offset from the result set. This field returns query results from the specified offset. It requires **operation** is set to &#x60;query&#x60;. Defaults to 0 (i.e. from the beginning of the result set).
func (r ApiEventsRequest) From(from int32) ApiEventsRequest {
	r.from = &from
	return r
}

// Size of result set to return. It requires **operation** is set to &#x60;query&#x60;. Defaults to 10 (i.e. 10 event records).
func (r ApiEventsRequest) Size(size int32) ApiEventsRequest {
	r.size = &size
	return r
}

func (r ApiEventsRequest) Execute() (*V1alpha1APIResponse, *http.Response, error) {
	return r.ApiService.EventsExecute(r)
}

/*
Events Query events against the cluster

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEventsRequest
*/
func (a *EventsQueryAPIService) Events(ctx context.Context) ApiEventsRequest {
	return ApiEventsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1alpha1APIResponse
func (a *EventsQueryAPIService) EventsExecute(r ApiEventsRequest) (*V1alpha1APIResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1alpha1APIResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsQueryAPIService.Events")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/tenant.kubesphere.io/v1alpha2/events"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.operation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "operation", r.operation, "form", "")
	} else {
		var defaultValue string = "query"
		r.operation = &defaultValue
	}
	if r.workspaceFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "workspace_filter", r.workspaceFilter, "form", "")
	}
	if r.workspaceSearch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "workspace_search", r.workspaceSearch, "form", "")
	}
	if r.involvedObjectNamespaceFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "involved_object_namespace_filter", r.involvedObjectNamespaceFilter, "form", "")
	}
	if r.involvedObjectNamespaceSearch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "involved_object_namespace_search", r.involvedObjectNamespaceSearch, "form", "")
	}
	if r.involvedObjectNameFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "involved_object_name_filter", r.involvedObjectNameFilter, "form", "")
	}
	if r.involvedObjectNameSearch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "involved_object_name_search", r.involvedObjectNameSearch, "form", "")
	}
	if r.involvedObjectKindFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "involved_object_kind_filter", r.involvedObjectKindFilter, "form", "")
	}
	if r.reasonFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reason_filter", r.reasonFilter, "form", "")
	}
	if r.reasonSearch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reason_search", r.reasonSearch, "form", "")
	}
	if r.messageSearch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "message_search", r.messageSearch, "form", "")
	}
	if r.typeFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type_filter", r.typeFilter, "form", "")
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_time", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_time", r.endTime, "form", "")
	}
	if r.interval != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interval", r.interval, "form", "")
	} else {
		var defaultValue string = "15m"
		r.interval = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	} else {
		var defaultValue string = "desc"
		r.sort = &defaultValue
	}
	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "form", "")
	} else {
		var defaultValue int32 = 0
		r.from = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	} else {
		var defaultValue int32 = 10
		r.size = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
