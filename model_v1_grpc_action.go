/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1GRPCAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1GRPCAction{}

// V1GRPCAction struct for V1GRPCAction
type V1GRPCAction struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port int32 `json:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).  If this is not specified, the default behavior is defined by gRPC.
	Service string `json:"service"`
}

type _V1GRPCAction V1GRPCAction

// NewV1GRPCAction instantiates a new V1GRPCAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1GRPCAction(port int32, service string) *V1GRPCAction {
	this := V1GRPCAction{}
	this.Port = port
	this.Service = service
	return &this
}

// NewV1GRPCActionWithDefaults instantiates a new V1GRPCAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1GRPCActionWithDefaults() *V1GRPCAction {
	this := V1GRPCAction{}
	return &this
}

// GetPort returns the Port field value
func (o *V1GRPCAction) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *V1GRPCAction) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *V1GRPCAction) SetPort(v int32) {
	o.Port = v
}

// GetService returns the Service field value
func (o *V1GRPCAction) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *V1GRPCAction) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *V1GRPCAction) SetService(v string) {
	o.Service = v
}

func (o V1GRPCAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1GRPCAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["port"] = o.Port
	toSerialize["service"] = o.Service
	return toSerialize, nil
}

func (o *V1GRPCAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"port",
		"service",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1GRPCAction := _V1GRPCAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1GRPCAction)

	if err != nil {
		return err
	}

	*o = V1GRPCAction(varV1GRPCAction)

	return err
}

type NullableV1GRPCAction struct {
	value *V1GRPCAction
	isSet bool
}

func (v NullableV1GRPCAction) Get() *V1GRPCAction {
	return v.value
}

func (v *NullableV1GRPCAction) Set(val *V1GRPCAction) {
	v.value = val
	v.isSet = true
}

func (v NullableV1GRPCAction) IsSet() bool {
	return v.isSet
}

func (v *NullableV1GRPCAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1GRPCAction(val *V1GRPCAction) *NullableV1GRPCAction {
	return &NullableV1GRPCAction{value: val, isSet: true}
}

func (v NullableV1GRPCAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1GRPCAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


