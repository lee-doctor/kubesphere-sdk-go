/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LoggingRecord type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoggingRecord{}

// LoggingRecord struct for LoggingRecord
type LoggingRecord struct {
	// container name
	Container *string `json:"container,omitempty"`
	// log message
	Log *string `json:"log,omitempty"`
	// namespace
	Namespace *string `json:"namespace,omitempty"`
	// pod name
	Pod *string `json:"pod,omitempty"`
	// log timestamp
	Time *string `json:"time,omitempty"`
}

// NewLoggingRecord instantiates a new LoggingRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoggingRecord() *LoggingRecord {
	this := LoggingRecord{}
	return &this
}

// NewLoggingRecordWithDefaults instantiates a new LoggingRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoggingRecordWithDefaults() *LoggingRecord {
	this := LoggingRecord{}
	return &this
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *LoggingRecord) GetContainer() string {
	if o == nil || IsNil(o.Container) {
		var ret string
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggingRecord) GetContainerOk() (*string, bool) {
	if o == nil || IsNil(o.Container) {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *LoggingRecord) HasContainer() bool {
	if o != nil && !IsNil(o.Container) {
		return true
	}

	return false
}

// SetContainer gets a reference to the given string and assigns it to the Container field.
func (o *LoggingRecord) SetContainer(v string) {
	o.Container = &v
}

// GetLog returns the Log field value if set, zero value otherwise.
func (o *LoggingRecord) GetLog() string {
	if o == nil || IsNil(o.Log) {
		var ret string
		return ret
	}
	return *o.Log
}

// GetLogOk returns a tuple with the Log field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggingRecord) GetLogOk() (*string, bool) {
	if o == nil || IsNil(o.Log) {
		return nil, false
	}
	return o.Log, true
}

// HasLog returns a boolean if a field has been set.
func (o *LoggingRecord) HasLog() bool {
	if o != nil && !IsNil(o.Log) {
		return true
	}

	return false
}

// SetLog gets a reference to the given string and assigns it to the Log field.
func (o *LoggingRecord) SetLog(v string) {
	o.Log = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *LoggingRecord) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggingRecord) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *LoggingRecord) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *LoggingRecord) SetNamespace(v string) {
	o.Namespace = &v
}

// GetPod returns the Pod field value if set, zero value otherwise.
func (o *LoggingRecord) GetPod() string {
	if o == nil || IsNil(o.Pod) {
		var ret string
		return ret
	}
	return *o.Pod
}

// GetPodOk returns a tuple with the Pod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggingRecord) GetPodOk() (*string, bool) {
	if o == nil || IsNil(o.Pod) {
		return nil, false
	}
	return o.Pod, true
}

// HasPod returns a boolean if a field has been set.
func (o *LoggingRecord) HasPod() bool {
	if o != nil && !IsNil(o.Pod) {
		return true
	}

	return false
}

// SetPod gets a reference to the given string and assigns it to the Pod field.
func (o *LoggingRecord) SetPod(v string) {
	o.Pod = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *LoggingRecord) GetTime() string {
	if o == nil || IsNil(o.Time) {
		var ret string
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggingRecord) GetTimeOk() (*string, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *LoggingRecord) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given string and assigns it to the Time field.
func (o *LoggingRecord) SetTime(v string) {
	o.Time = &v
}

func (o LoggingRecord) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoggingRecord) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Container) {
		toSerialize["container"] = o.Container
	}
	if !IsNil(o.Log) {
		toSerialize["log"] = o.Log
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.Pod) {
		toSerialize["pod"] = o.Pod
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	return toSerialize, nil
}

type NullableLoggingRecord struct {
	value *LoggingRecord
	isSet bool
}

func (v NullableLoggingRecord) Get() *LoggingRecord {
	return v.value
}

func (v *NullableLoggingRecord) Set(val *LoggingRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableLoggingRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableLoggingRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoggingRecord(val *LoggingRecord) *NullableLoggingRecord {
	return &NullableLoggingRecord{value: val, isSet: true}
}

func (v NullableLoggingRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoggingRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


