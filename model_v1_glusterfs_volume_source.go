/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1GlusterfsVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1GlusterfsVolumeSource{}

// V1GlusterfsVolumeSource Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
type V1GlusterfsVolumeSource struct {
	// endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints string `json:"endpoints"`
	// path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path string `json:"path"`
	// readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly *bool `json:"readOnly,omitempty"`
}

type _V1GlusterfsVolumeSource V1GlusterfsVolumeSource

// NewV1GlusterfsVolumeSource instantiates a new V1GlusterfsVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1GlusterfsVolumeSource(endpoints string, path string) *V1GlusterfsVolumeSource {
	this := V1GlusterfsVolumeSource{}
	this.Endpoints = endpoints
	this.Path = path
	return &this
}

// NewV1GlusterfsVolumeSourceWithDefaults instantiates a new V1GlusterfsVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1GlusterfsVolumeSourceWithDefaults() *V1GlusterfsVolumeSource {
	this := V1GlusterfsVolumeSource{}
	return &this
}

// GetEndpoints returns the Endpoints field value
func (o *V1GlusterfsVolumeSource) GetEndpoints() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Endpoints
}

// GetEndpointsOk returns a tuple with the Endpoints field value
// and a boolean to check if the value has been set.
func (o *V1GlusterfsVolumeSource) GetEndpointsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Endpoints, true
}

// SetEndpoints sets field value
func (o *V1GlusterfsVolumeSource) SetEndpoints(v string) {
	o.Endpoints = v
}

// GetPath returns the Path field value
func (o *V1GlusterfsVolumeSource) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *V1GlusterfsVolumeSource) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *V1GlusterfsVolumeSource) SetPath(v string) {
	o.Path = v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *V1GlusterfsVolumeSource) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GlusterfsVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *V1GlusterfsVolumeSource) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *V1GlusterfsVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

func (o V1GlusterfsVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1GlusterfsVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["endpoints"] = o.Endpoints
	toSerialize["path"] = o.Path
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	return toSerialize, nil
}

func (o *V1GlusterfsVolumeSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"endpoints",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1GlusterfsVolumeSource := _V1GlusterfsVolumeSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1GlusterfsVolumeSource)

	if err != nil {
		return err
	}

	*o = V1GlusterfsVolumeSource(varV1GlusterfsVolumeSource)

	return err
}

type NullableV1GlusterfsVolumeSource struct {
	value *V1GlusterfsVolumeSource
	isSet bool
}

func (v NullableV1GlusterfsVolumeSource) Get() *V1GlusterfsVolumeSource {
	return v.value
}

func (v *NullableV1GlusterfsVolumeSource) Set(val *V1GlusterfsVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1GlusterfsVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1GlusterfsVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1GlusterfsVolumeSource(val *V1GlusterfsVolumeSource) *NullableV1GlusterfsVolumeSource {
	return &NullableV1GlusterfsVolumeSource{value: val, isSet: true}
}

func (v NullableV1GlusterfsVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1GlusterfsVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


