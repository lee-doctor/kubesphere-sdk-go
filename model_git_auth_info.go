/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GitAuthInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitAuthInfo{}

// GitAuthInfo struct for GitAuthInfo
type GitAuthInfo struct {
	// git server url
	RemoteUrl string `json:"remoteUrl"`
	SecretRef *V1SecretReference `json:"secretRef,omitempty"`
}

type _GitAuthInfo GitAuthInfo

// NewGitAuthInfo instantiates a new GitAuthInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitAuthInfo(remoteUrl string) *GitAuthInfo {
	this := GitAuthInfo{}
	this.RemoteUrl = remoteUrl
	return &this
}

// NewGitAuthInfoWithDefaults instantiates a new GitAuthInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitAuthInfoWithDefaults() *GitAuthInfo {
	this := GitAuthInfo{}
	return &this
}

// GetRemoteUrl returns the RemoteUrl field value
func (o *GitAuthInfo) GetRemoteUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteUrl
}

// GetRemoteUrlOk returns a tuple with the RemoteUrl field value
// and a boolean to check if the value has been set.
func (o *GitAuthInfo) GetRemoteUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteUrl, true
}

// SetRemoteUrl sets field value
func (o *GitAuthInfo) SetRemoteUrl(v string) {
	o.RemoteUrl = v
}

// GetSecretRef returns the SecretRef field value if set, zero value otherwise.
func (o *GitAuthInfo) GetSecretRef() V1SecretReference {
	if o == nil || IsNil(o.SecretRef) {
		var ret V1SecretReference
		return ret
	}
	return *o.SecretRef
}

// GetSecretRefOk returns a tuple with the SecretRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitAuthInfo) GetSecretRefOk() (*V1SecretReference, bool) {
	if o == nil || IsNil(o.SecretRef) {
		return nil, false
	}
	return o.SecretRef, true
}

// HasSecretRef returns a boolean if a field has been set.
func (o *GitAuthInfo) HasSecretRef() bool {
	if o != nil && !IsNil(o.SecretRef) {
		return true
	}

	return false
}

// SetSecretRef gets a reference to the given V1SecretReference and assigns it to the SecretRef field.
func (o *GitAuthInfo) SetSecretRef(v V1SecretReference) {
	o.SecretRef = &v
}

func (o GitAuthInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitAuthInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["remoteUrl"] = o.RemoteUrl
	if !IsNil(o.SecretRef) {
		toSerialize["secretRef"] = o.SecretRef
	}
	return toSerialize, nil
}

func (o *GitAuthInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"remoteUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGitAuthInfo := _GitAuthInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGitAuthInfo)

	if err != nil {
		return err
	}

	*o = GitAuthInfo(varGitAuthInfo)

	return err
}

type NullableGitAuthInfo struct {
	value *GitAuthInfo
	isSet bool
}

func (v NullableGitAuthInfo) Get() *GitAuthInfo {
	return v.value
}

func (v *NullableGitAuthInfo) Set(val *GitAuthInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableGitAuthInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableGitAuthInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitAuthInfo(val *GitAuthInfo) *NullableGitAuthInfo {
	return &NullableGitAuthInfo{value: val, isSet: true}
}

func (v NullableGitAuthInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitAuthInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


