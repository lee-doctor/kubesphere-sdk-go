/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1beta1Template type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1beta1Template{}

// V1beta1Template struct for V1beta1Template
type V1beta1Template struct {
	Metadata *V1beta1ObjectMeta `json:"metadata,omitempty"`
	Spec *V1beta1WorkspaceSpec `json:"spec,omitempty"`
}

// NewV1beta1Template instantiates a new V1beta1Template object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1beta1Template() *V1beta1Template {
	this := V1beta1Template{}
	return &this
}

// NewV1beta1TemplateWithDefaults instantiates a new V1beta1Template object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1beta1TemplateWithDefaults() *V1beta1Template {
	this := V1beta1Template{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V1beta1Template) GetMetadata() V1beta1ObjectMeta {
	if o == nil || IsNil(o.Metadata) {
		var ret V1beta1ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1Template) GetMetadataOk() (*V1beta1ObjectMeta, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V1beta1Template) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given V1beta1ObjectMeta and assigns it to the Metadata field.
func (o *V1beta1Template) SetMetadata(v V1beta1ObjectMeta) {
	o.Metadata = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *V1beta1Template) GetSpec() V1beta1WorkspaceSpec {
	if o == nil || IsNil(o.Spec) {
		var ret V1beta1WorkspaceSpec
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1Template) GetSpecOk() (*V1beta1WorkspaceSpec, bool) {
	if o == nil || IsNil(o.Spec) {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *V1beta1Template) HasSpec() bool {
	if o != nil && !IsNil(o.Spec) {
		return true
	}

	return false
}

// SetSpec gets a reference to the given V1beta1WorkspaceSpec and assigns it to the Spec field.
func (o *V1beta1Template) SetSpec(v V1beta1WorkspaceSpec) {
	o.Spec = &v
}

func (o V1beta1Template) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1beta1Template) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Spec) {
		toSerialize["spec"] = o.Spec
	}
	return toSerialize, nil
}

type NullableV1beta1Template struct {
	value *V1beta1Template
	isSet bool
}

func (v NullableV1beta1Template) Get() *V1beta1Template {
	return v.value
}

func (v *NullableV1beta1Template) Set(val *V1beta1Template) {
	v.value = val
	v.isSet = true
}

func (v NullableV1beta1Template) IsSet() bool {
	return v.isSet
}

func (v *NullableV1beta1Template) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1beta1Template(val *V1beta1Template) *NullableV1beta1Template {
	return &NullableV1beta1Template{value: val, isSet: true}
}

func (v NullableV1beta1Template) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1beta1Template) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


