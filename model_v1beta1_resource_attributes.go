/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1beta1ResourceAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1beta1ResourceAttributes{}

// V1beta1ResourceAttributes struct for V1beta1ResourceAttributes
type V1beta1ResourceAttributes struct {
	Group *string `json:"group,omitempty"`
	Name *string `json:"name,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	Resource *string `json:"resource,omitempty"`
	ResourceScope *string `json:"resourceScope,omitempty"`
	Subresource *string `json:"subresource,omitempty"`
	Verb *string `json:"verb,omitempty"`
	Version *string `json:"version,omitempty"`
	Workspace *string `json:"workspace,omitempty"`
}

// NewV1beta1ResourceAttributes instantiates a new V1beta1ResourceAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1beta1ResourceAttributes() *V1beta1ResourceAttributes {
	this := V1beta1ResourceAttributes{}
	return &this
}

// NewV1beta1ResourceAttributesWithDefaults instantiates a new V1beta1ResourceAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1beta1ResourceAttributesWithDefaults() *V1beta1ResourceAttributes {
	this := V1beta1ResourceAttributes{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *V1beta1ResourceAttributes) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1ResourceAttributes) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *V1beta1ResourceAttributes) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *V1beta1ResourceAttributes) SetGroup(v string) {
	o.Group = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1beta1ResourceAttributes) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1ResourceAttributes) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1beta1ResourceAttributes) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1beta1ResourceAttributes) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *V1beta1ResourceAttributes) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1ResourceAttributes) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *V1beta1ResourceAttributes) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *V1beta1ResourceAttributes) SetNamespace(v string) {
	o.Namespace = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *V1beta1ResourceAttributes) GetResource() string {
	if o == nil || IsNil(o.Resource) {
		var ret string
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1ResourceAttributes) GetResourceOk() (*string, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *V1beta1ResourceAttributes) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given string and assigns it to the Resource field.
func (o *V1beta1ResourceAttributes) SetResource(v string) {
	o.Resource = &v
}

// GetResourceScope returns the ResourceScope field value if set, zero value otherwise.
func (o *V1beta1ResourceAttributes) GetResourceScope() string {
	if o == nil || IsNil(o.ResourceScope) {
		var ret string
		return ret
	}
	return *o.ResourceScope
}

// GetResourceScopeOk returns a tuple with the ResourceScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1ResourceAttributes) GetResourceScopeOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceScope) {
		return nil, false
	}
	return o.ResourceScope, true
}

// HasResourceScope returns a boolean if a field has been set.
func (o *V1beta1ResourceAttributes) HasResourceScope() bool {
	if o != nil && !IsNil(o.ResourceScope) {
		return true
	}

	return false
}

// SetResourceScope gets a reference to the given string and assigns it to the ResourceScope field.
func (o *V1beta1ResourceAttributes) SetResourceScope(v string) {
	o.ResourceScope = &v
}

// GetSubresource returns the Subresource field value if set, zero value otherwise.
func (o *V1beta1ResourceAttributes) GetSubresource() string {
	if o == nil || IsNil(o.Subresource) {
		var ret string
		return ret
	}
	return *o.Subresource
}

// GetSubresourceOk returns a tuple with the Subresource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1ResourceAttributes) GetSubresourceOk() (*string, bool) {
	if o == nil || IsNil(o.Subresource) {
		return nil, false
	}
	return o.Subresource, true
}

// HasSubresource returns a boolean if a field has been set.
func (o *V1beta1ResourceAttributes) HasSubresource() bool {
	if o != nil && !IsNil(o.Subresource) {
		return true
	}

	return false
}

// SetSubresource gets a reference to the given string and assigns it to the Subresource field.
func (o *V1beta1ResourceAttributes) SetSubresource(v string) {
	o.Subresource = &v
}

// GetVerb returns the Verb field value if set, zero value otherwise.
func (o *V1beta1ResourceAttributes) GetVerb() string {
	if o == nil || IsNil(o.Verb) {
		var ret string
		return ret
	}
	return *o.Verb
}

// GetVerbOk returns a tuple with the Verb field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1ResourceAttributes) GetVerbOk() (*string, bool) {
	if o == nil || IsNil(o.Verb) {
		return nil, false
	}
	return o.Verb, true
}

// HasVerb returns a boolean if a field has been set.
func (o *V1beta1ResourceAttributes) HasVerb() bool {
	if o != nil && !IsNil(o.Verb) {
		return true
	}

	return false
}

// SetVerb gets a reference to the given string and assigns it to the Verb field.
func (o *V1beta1ResourceAttributes) SetVerb(v string) {
	o.Verb = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *V1beta1ResourceAttributes) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1ResourceAttributes) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *V1beta1ResourceAttributes) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *V1beta1ResourceAttributes) SetVersion(v string) {
	o.Version = &v
}

// GetWorkspace returns the Workspace field value if set, zero value otherwise.
func (o *V1beta1ResourceAttributes) GetWorkspace() string {
	if o == nil || IsNil(o.Workspace) {
		var ret string
		return ret
	}
	return *o.Workspace
}

// GetWorkspaceOk returns a tuple with the Workspace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1ResourceAttributes) GetWorkspaceOk() (*string, bool) {
	if o == nil || IsNil(o.Workspace) {
		return nil, false
	}
	return o.Workspace, true
}

// HasWorkspace returns a boolean if a field has been set.
func (o *V1beta1ResourceAttributes) HasWorkspace() bool {
	if o != nil && !IsNil(o.Workspace) {
		return true
	}

	return false
}

// SetWorkspace gets a reference to the given string and assigns it to the Workspace field.
func (o *V1beta1ResourceAttributes) SetWorkspace(v string) {
	o.Workspace = &v
}

func (o V1beta1ResourceAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1beta1ResourceAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.ResourceScope) {
		toSerialize["resourceScope"] = o.ResourceScope
	}
	if !IsNil(o.Subresource) {
		toSerialize["subresource"] = o.Subresource
	}
	if !IsNil(o.Verb) {
		toSerialize["verb"] = o.Verb
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Workspace) {
		toSerialize["workspace"] = o.Workspace
	}
	return toSerialize, nil
}

type NullableV1beta1ResourceAttributes struct {
	value *V1beta1ResourceAttributes
	isSet bool
}

func (v NullableV1beta1ResourceAttributes) Get() *V1beta1ResourceAttributes {
	return v.value
}

func (v *NullableV1beta1ResourceAttributes) Set(val *V1beta1ResourceAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableV1beta1ResourceAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableV1beta1ResourceAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1beta1ResourceAttributes(val *V1beta1ResourceAttributes) *NullableV1beta1ResourceAttributes {
	return &NullableV1beta1ResourceAttributes{value: val, isSet: true}
}

func (v NullableV1beta1ResourceAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1beta1ResourceAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


