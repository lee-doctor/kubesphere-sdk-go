/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1beta1IngressRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1beta1IngressRule{}

// V1beta1IngressRule IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
type V1beta1IngressRule struct {
	// Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to    the IP in the Spec of the parent Ingress. 2. The `:` delimiter is not respected because ports are not allowed.    Currently the port of an Ingress is implicitly :80 for http and    :443 for https. Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.  Host can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \"*.foo.com\"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
	Host *string `json:"host,omitempty"`
	Http *V1beta1HTTPIngressRuleValue `json:"http,omitempty"`
}

// NewV1beta1IngressRule instantiates a new V1beta1IngressRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1beta1IngressRule() *V1beta1IngressRule {
	this := V1beta1IngressRule{}
	return &this
}

// NewV1beta1IngressRuleWithDefaults instantiates a new V1beta1IngressRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1beta1IngressRuleWithDefaults() *V1beta1IngressRule {
	this := V1beta1IngressRule{}
	return &this
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *V1beta1IngressRule) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1IngressRule) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *V1beta1IngressRule) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *V1beta1IngressRule) SetHost(v string) {
	o.Host = &v
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *V1beta1IngressRule) GetHttp() V1beta1HTTPIngressRuleValue {
	if o == nil || IsNil(o.Http) {
		var ret V1beta1HTTPIngressRuleValue
		return ret
	}
	return *o.Http
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1IngressRule) GetHttpOk() (*V1beta1HTTPIngressRuleValue, bool) {
	if o == nil || IsNil(o.Http) {
		return nil, false
	}
	return o.Http, true
}

// HasHttp returns a boolean if a field has been set.
func (o *V1beta1IngressRule) HasHttp() bool {
	if o != nil && !IsNil(o.Http) {
		return true
	}

	return false
}

// SetHttp gets a reference to the given V1beta1HTTPIngressRuleValue and assigns it to the Http field.
func (o *V1beta1IngressRule) SetHttp(v V1beta1HTTPIngressRuleValue) {
	o.Http = &v
}

func (o V1beta1IngressRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1beta1IngressRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Http) {
		toSerialize["http"] = o.Http
	}
	return toSerialize, nil
}

type NullableV1beta1IngressRule struct {
	value *V1beta1IngressRule
	isSet bool
}

func (v NullableV1beta1IngressRule) Get() *V1beta1IngressRule {
	return v.value
}

func (v *NullableV1beta1IngressRule) Set(val *V1beta1IngressRule) {
	v.value = val
	v.isSet = true
}

func (v NullableV1beta1IngressRule) IsSet() bool {
	return v.isSet
}

func (v *NullableV1beta1IngressRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1beta1IngressRule(val *V1beta1IngressRule) *NullableV1beta1IngressRule {
	return &NullableV1beta1IngressRule{value: val, isSet: true}
}

func (v NullableV1beta1IngressRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1beta1IngressRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


