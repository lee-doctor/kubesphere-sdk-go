/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1beta1IngressSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1beta1IngressSpec{}

// V1beta1IngressSpec IngressSpec describes the Ingress the user wishes to exist.
type V1beta1IngressSpec struct {
	Backend *V1beta1IngressBackend `json:"backend,omitempty"`
	// IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
	IngressClassName *string `json:"ingressClassName,omitempty"`
	// A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
	Rules []V1beta1IngressRule `json:"rules,omitempty"`
	// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
	Tls []V1beta1IngressTLS `json:"tls,omitempty"`
}

// NewV1beta1IngressSpec instantiates a new V1beta1IngressSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1beta1IngressSpec() *V1beta1IngressSpec {
	this := V1beta1IngressSpec{}
	return &this
}

// NewV1beta1IngressSpecWithDefaults instantiates a new V1beta1IngressSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1beta1IngressSpecWithDefaults() *V1beta1IngressSpec {
	this := V1beta1IngressSpec{}
	return &this
}

// GetBackend returns the Backend field value if set, zero value otherwise.
func (o *V1beta1IngressSpec) GetBackend() V1beta1IngressBackend {
	if o == nil || IsNil(o.Backend) {
		var ret V1beta1IngressBackend
		return ret
	}
	return *o.Backend
}

// GetBackendOk returns a tuple with the Backend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1IngressSpec) GetBackendOk() (*V1beta1IngressBackend, bool) {
	if o == nil || IsNil(o.Backend) {
		return nil, false
	}
	return o.Backend, true
}

// HasBackend returns a boolean if a field has been set.
func (o *V1beta1IngressSpec) HasBackend() bool {
	if o != nil && !IsNil(o.Backend) {
		return true
	}

	return false
}

// SetBackend gets a reference to the given V1beta1IngressBackend and assigns it to the Backend field.
func (o *V1beta1IngressSpec) SetBackend(v V1beta1IngressBackend) {
	o.Backend = &v
}

// GetIngressClassName returns the IngressClassName field value if set, zero value otherwise.
func (o *V1beta1IngressSpec) GetIngressClassName() string {
	if o == nil || IsNil(o.IngressClassName) {
		var ret string
		return ret
	}
	return *o.IngressClassName
}

// GetIngressClassNameOk returns a tuple with the IngressClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1IngressSpec) GetIngressClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.IngressClassName) {
		return nil, false
	}
	return o.IngressClassName, true
}

// HasIngressClassName returns a boolean if a field has been set.
func (o *V1beta1IngressSpec) HasIngressClassName() bool {
	if o != nil && !IsNil(o.IngressClassName) {
		return true
	}

	return false
}

// SetIngressClassName gets a reference to the given string and assigns it to the IngressClassName field.
func (o *V1beta1IngressSpec) SetIngressClassName(v string) {
	o.IngressClassName = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *V1beta1IngressSpec) GetRules() []V1beta1IngressRule {
	if o == nil || IsNil(o.Rules) {
		var ret []V1beta1IngressRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1IngressSpec) GetRulesOk() ([]V1beta1IngressRule, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *V1beta1IngressSpec) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []V1beta1IngressRule and assigns it to the Rules field.
func (o *V1beta1IngressSpec) SetRules(v []V1beta1IngressRule) {
	o.Rules = v
}

// GetTls returns the Tls field value if set, zero value otherwise.
func (o *V1beta1IngressSpec) GetTls() []V1beta1IngressTLS {
	if o == nil || IsNil(o.Tls) {
		var ret []V1beta1IngressTLS
		return ret
	}
	return o.Tls
}

// GetTlsOk returns a tuple with the Tls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1IngressSpec) GetTlsOk() ([]V1beta1IngressTLS, bool) {
	if o == nil || IsNil(o.Tls) {
		return nil, false
	}
	return o.Tls, true
}

// HasTls returns a boolean if a field has been set.
func (o *V1beta1IngressSpec) HasTls() bool {
	if o != nil && !IsNil(o.Tls) {
		return true
	}

	return false
}

// SetTls gets a reference to the given []V1beta1IngressTLS and assigns it to the Tls field.
func (o *V1beta1IngressSpec) SetTls(v []V1beta1IngressTLS) {
	o.Tls = v
}

func (o V1beta1IngressSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1beta1IngressSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Backend) {
		toSerialize["backend"] = o.Backend
	}
	if !IsNil(o.IngressClassName) {
		toSerialize["ingressClassName"] = o.IngressClassName
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	if !IsNil(o.Tls) {
		toSerialize["tls"] = o.Tls
	}
	return toSerialize, nil
}

type NullableV1beta1IngressSpec struct {
	value *V1beta1IngressSpec
	isSet bool
}

func (v NullableV1beta1IngressSpec) Get() *V1beta1IngressSpec {
	return v.value
}

func (v *NullableV1beta1IngressSpec) Set(val *V1beta1IngressSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableV1beta1IngressSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableV1beta1IngressSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1beta1IngressSpec(val *V1beta1IngressSpec) *NullableV1beta1IngressSpec {
	return &NullableV1beta1IngressSpec{value: val, isSet: true}
}

func (v NullableV1beta1IngressSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1beta1IngressSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


