/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1ManagedFieldsEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ManagedFieldsEntry{}

// V1ManagedFieldsEntry ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
type V1ManagedFieldsEntry struct {
	// APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
	ApiVersion *string `json:"apiVersion,omitempty"`
	// FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"
	FieldsType *string `json:"fieldsType,omitempty"`
	// FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type.
	FieldsV1 *string `json:"fieldsV1,omitempty"`
	// Manager is an identifier of the workflow managing these fields.
	Manager *string `json:"manager,omitempty"`
	// Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
	Operation *string `json:"operation,omitempty"`
	// Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'
	Time *string `json:"time,omitempty"`
}

// NewV1ManagedFieldsEntry instantiates a new V1ManagedFieldsEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ManagedFieldsEntry() *V1ManagedFieldsEntry {
	this := V1ManagedFieldsEntry{}
	return &this
}

// NewV1ManagedFieldsEntryWithDefaults instantiates a new V1ManagedFieldsEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ManagedFieldsEntryWithDefaults() *V1ManagedFieldsEntry {
	this := V1ManagedFieldsEntry{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *V1ManagedFieldsEntry) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ManagedFieldsEntry) GetApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *V1ManagedFieldsEntry) HasApiVersion() bool {
	if o != nil && !IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *V1ManagedFieldsEntry) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetFieldsType returns the FieldsType field value if set, zero value otherwise.
func (o *V1ManagedFieldsEntry) GetFieldsType() string {
	if o == nil || IsNil(o.FieldsType) {
		var ret string
		return ret
	}
	return *o.FieldsType
}

// GetFieldsTypeOk returns a tuple with the FieldsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ManagedFieldsEntry) GetFieldsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FieldsType) {
		return nil, false
	}
	return o.FieldsType, true
}

// HasFieldsType returns a boolean if a field has been set.
func (o *V1ManagedFieldsEntry) HasFieldsType() bool {
	if o != nil && !IsNil(o.FieldsType) {
		return true
	}

	return false
}

// SetFieldsType gets a reference to the given string and assigns it to the FieldsType field.
func (o *V1ManagedFieldsEntry) SetFieldsType(v string) {
	o.FieldsType = &v
}

// GetFieldsV1 returns the FieldsV1 field value if set, zero value otherwise.
func (o *V1ManagedFieldsEntry) GetFieldsV1() string {
	if o == nil || IsNil(o.FieldsV1) {
		var ret string
		return ret
	}
	return *o.FieldsV1
}

// GetFieldsV1Ok returns a tuple with the FieldsV1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ManagedFieldsEntry) GetFieldsV1Ok() (*string, bool) {
	if o == nil || IsNil(o.FieldsV1) {
		return nil, false
	}
	return o.FieldsV1, true
}

// HasFieldsV1 returns a boolean if a field has been set.
func (o *V1ManagedFieldsEntry) HasFieldsV1() bool {
	if o != nil && !IsNil(o.FieldsV1) {
		return true
	}

	return false
}

// SetFieldsV1 gets a reference to the given string and assigns it to the FieldsV1 field.
func (o *V1ManagedFieldsEntry) SetFieldsV1(v string) {
	o.FieldsV1 = &v
}

// GetManager returns the Manager field value if set, zero value otherwise.
func (o *V1ManagedFieldsEntry) GetManager() string {
	if o == nil || IsNil(o.Manager) {
		var ret string
		return ret
	}
	return *o.Manager
}

// GetManagerOk returns a tuple with the Manager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ManagedFieldsEntry) GetManagerOk() (*string, bool) {
	if o == nil || IsNil(o.Manager) {
		return nil, false
	}
	return o.Manager, true
}

// HasManager returns a boolean if a field has been set.
func (o *V1ManagedFieldsEntry) HasManager() bool {
	if o != nil && !IsNil(o.Manager) {
		return true
	}

	return false
}

// SetManager gets a reference to the given string and assigns it to the Manager field.
func (o *V1ManagedFieldsEntry) SetManager(v string) {
	o.Manager = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *V1ManagedFieldsEntry) GetOperation() string {
	if o == nil || IsNil(o.Operation) {
		var ret string
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ManagedFieldsEntry) GetOperationOk() (*string, bool) {
	if o == nil || IsNil(o.Operation) {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *V1ManagedFieldsEntry) HasOperation() bool {
	if o != nil && !IsNil(o.Operation) {
		return true
	}

	return false
}

// SetOperation gets a reference to the given string and assigns it to the Operation field.
func (o *V1ManagedFieldsEntry) SetOperation(v string) {
	o.Operation = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *V1ManagedFieldsEntry) GetTime() string {
	if o == nil || IsNil(o.Time) {
		var ret string
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ManagedFieldsEntry) GetTimeOk() (*string, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *V1ManagedFieldsEntry) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given string and assigns it to the Time field.
func (o *V1ManagedFieldsEntry) SetTime(v string) {
	o.Time = &v
}

func (o V1ManagedFieldsEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ManagedFieldsEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !IsNil(o.FieldsType) {
		toSerialize["fieldsType"] = o.FieldsType
	}
	if !IsNil(o.FieldsV1) {
		toSerialize["fieldsV1"] = o.FieldsV1
	}
	if !IsNil(o.Manager) {
		toSerialize["manager"] = o.Manager
	}
	if !IsNil(o.Operation) {
		toSerialize["operation"] = o.Operation
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	return toSerialize, nil
}

type NullableV1ManagedFieldsEntry struct {
	value *V1ManagedFieldsEntry
	isSet bool
}

func (v NullableV1ManagedFieldsEntry) Get() *V1ManagedFieldsEntry {
	return v.value
}

func (v *NullableV1ManagedFieldsEntry) Set(val *V1ManagedFieldsEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ManagedFieldsEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ManagedFieldsEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ManagedFieldsEntry(val *V1ManagedFieldsEntry) *NullableV1ManagedFieldsEntry {
	return &NullableV1ManagedFieldsEntry{value: val, isSet: true}
}

func (v NullableV1ManagedFieldsEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ManagedFieldsEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


