/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1alpha2ResourceQuotaStatusByNamespace type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha2ResourceQuotaStatusByNamespace{}

// V1alpha2ResourceQuotaStatusByNamespace ResourceQuotaStatus defines the enforced hard limits and observed use.
type V1alpha2ResourceQuotaStatusByNamespace struct {
	// Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
	Hard *map[string]ResourceQuantity `json:"hard,omitempty"`
	Namespace string `json:"namespace"`
	// Used is the current observed total usage of the resource in the namespace.
	Used *map[string]ResourceQuantity `json:"used,omitempty"`
}

type _V1alpha2ResourceQuotaStatusByNamespace V1alpha2ResourceQuotaStatusByNamespace

// NewV1alpha2ResourceQuotaStatusByNamespace instantiates a new V1alpha2ResourceQuotaStatusByNamespace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha2ResourceQuotaStatusByNamespace(namespace string) *V1alpha2ResourceQuotaStatusByNamespace {
	this := V1alpha2ResourceQuotaStatusByNamespace{}
	this.Namespace = namespace
	return &this
}

// NewV1alpha2ResourceQuotaStatusByNamespaceWithDefaults instantiates a new V1alpha2ResourceQuotaStatusByNamespace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha2ResourceQuotaStatusByNamespaceWithDefaults() *V1alpha2ResourceQuotaStatusByNamespace {
	this := V1alpha2ResourceQuotaStatusByNamespace{}
	return &this
}

// GetHard returns the Hard field value if set, zero value otherwise.
func (o *V1alpha2ResourceQuotaStatusByNamespace) GetHard() map[string]ResourceQuantity {
	if o == nil || IsNil(o.Hard) {
		var ret map[string]ResourceQuantity
		return ret
	}
	return *o.Hard
}

// GetHardOk returns a tuple with the Hard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2ResourceQuotaStatusByNamespace) GetHardOk() (*map[string]ResourceQuantity, bool) {
	if o == nil || IsNil(o.Hard) {
		return nil, false
	}
	return o.Hard, true
}

// HasHard returns a boolean if a field has been set.
func (o *V1alpha2ResourceQuotaStatusByNamespace) HasHard() bool {
	if o != nil && !IsNil(o.Hard) {
		return true
	}

	return false
}

// SetHard gets a reference to the given map[string]ResourceQuantity and assigns it to the Hard field.
func (o *V1alpha2ResourceQuotaStatusByNamespace) SetHard(v map[string]ResourceQuantity) {
	o.Hard = &v
}

// GetNamespace returns the Namespace field value
func (o *V1alpha2ResourceQuotaStatusByNamespace) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *V1alpha2ResourceQuotaStatusByNamespace) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *V1alpha2ResourceQuotaStatusByNamespace) SetNamespace(v string) {
	o.Namespace = v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *V1alpha2ResourceQuotaStatusByNamespace) GetUsed() map[string]ResourceQuantity {
	if o == nil || IsNil(o.Used) {
		var ret map[string]ResourceQuantity
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2ResourceQuotaStatusByNamespace) GetUsedOk() (*map[string]ResourceQuantity, bool) {
	if o == nil || IsNil(o.Used) {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *V1alpha2ResourceQuotaStatusByNamespace) HasUsed() bool {
	if o != nil && !IsNil(o.Used) {
		return true
	}

	return false
}

// SetUsed gets a reference to the given map[string]ResourceQuantity and assigns it to the Used field.
func (o *V1alpha2ResourceQuotaStatusByNamespace) SetUsed(v map[string]ResourceQuantity) {
	o.Used = &v
}

func (o V1alpha2ResourceQuotaStatusByNamespace) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha2ResourceQuotaStatusByNamespace) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hard) {
		toSerialize["hard"] = o.Hard
	}
	toSerialize["namespace"] = o.Namespace
	if !IsNil(o.Used) {
		toSerialize["used"] = o.Used
	}
	return toSerialize, nil
}

func (o *V1alpha2ResourceQuotaStatusByNamespace) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"namespace",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1alpha2ResourceQuotaStatusByNamespace := _V1alpha2ResourceQuotaStatusByNamespace{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1alpha2ResourceQuotaStatusByNamespace)

	if err != nil {
		return err
	}

	*o = V1alpha2ResourceQuotaStatusByNamespace(varV1alpha2ResourceQuotaStatusByNamespace)

	return err
}

type NullableV1alpha2ResourceQuotaStatusByNamespace struct {
	value *V1alpha2ResourceQuotaStatusByNamespace
	isSet bool
}

func (v NullableV1alpha2ResourceQuotaStatusByNamespace) Get() *V1alpha2ResourceQuotaStatusByNamespace {
	return v.value
}

func (v *NullableV1alpha2ResourceQuotaStatusByNamespace) Set(val *V1alpha2ResourceQuotaStatusByNamespace) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha2ResourceQuotaStatusByNamespace) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha2ResourceQuotaStatusByNamespace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha2ResourceQuotaStatusByNamespace(val *V1alpha2ResourceQuotaStatusByNamespace) *NullableV1alpha2ResourceQuotaStatusByNamespace {
	return &NullableV1alpha2ResourceQuotaStatusByNamespace{value: val, isSet: true}
}

func (v NullableV1alpha2ResourceQuotaStatusByNamespace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha2ResourceQuotaStatusByNamespace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


