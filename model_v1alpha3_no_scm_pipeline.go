/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1alpha3NoScmPipeline type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha3NoScmPipeline{}

// V1alpha3NoScmPipeline struct for V1alpha3NoScmPipeline
type V1alpha3NoScmPipeline struct {
	// description of pipeline
	Description *string `json:"description,omitempty"`
	// Whether to prohibit the pipeline from running in parallel
	DisableConcurrent *bool `json:"disable_concurrent,omitempty"`
	Discarder *V1alpha3DiscarderProperty `json:"discarder,omitempty"`
	// Jenkinsfile's content'
	Jenkinsfile *string `json:"jenkinsfile,omitempty"`
	// name of pipeline
	Name string `json:"name"`
	// Parameters define of pipeline,user could pass param when run pipeline
	Parameters []V1alpha3Parameter `json:"parameters,omitempty"`
	RemoteTrigger *V1alpha3RemoteTrigger `json:"remote_trigger,omitempty"`
	TimerTrigger *V1alpha3TimerTrigger `json:"timer_trigger,omitempty"`
}

type _V1alpha3NoScmPipeline V1alpha3NoScmPipeline

// NewV1alpha3NoScmPipeline instantiates a new V1alpha3NoScmPipeline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha3NoScmPipeline(name string) *V1alpha3NoScmPipeline {
	this := V1alpha3NoScmPipeline{}
	this.Name = name
	return &this
}

// NewV1alpha3NoScmPipelineWithDefaults instantiates a new V1alpha3NoScmPipeline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha3NoScmPipelineWithDefaults() *V1alpha3NoScmPipeline {
	this := V1alpha3NoScmPipeline{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *V1alpha3NoScmPipeline) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3NoScmPipeline) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *V1alpha3NoScmPipeline) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *V1alpha3NoScmPipeline) SetDescription(v string) {
	o.Description = &v
}

// GetDisableConcurrent returns the DisableConcurrent field value if set, zero value otherwise.
func (o *V1alpha3NoScmPipeline) GetDisableConcurrent() bool {
	if o == nil || IsNil(o.DisableConcurrent) {
		var ret bool
		return ret
	}
	return *o.DisableConcurrent
}

// GetDisableConcurrentOk returns a tuple with the DisableConcurrent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3NoScmPipeline) GetDisableConcurrentOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableConcurrent) {
		return nil, false
	}
	return o.DisableConcurrent, true
}

// HasDisableConcurrent returns a boolean if a field has been set.
func (o *V1alpha3NoScmPipeline) HasDisableConcurrent() bool {
	if o != nil && !IsNil(o.DisableConcurrent) {
		return true
	}

	return false
}

// SetDisableConcurrent gets a reference to the given bool and assigns it to the DisableConcurrent field.
func (o *V1alpha3NoScmPipeline) SetDisableConcurrent(v bool) {
	o.DisableConcurrent = &v
}

// GetDiscarder returns the Discarder field value if set, zero value otherwise.
func (o *V1alpha3NoScmPipeline) GetDiscarder() V1alpha3DiscarderProperty {
	if o == nil || IsNil(o.Discarder) {
		var ret V1alpha3DiscarderProperty
		return ret
	}
	return *o.Discarder
}

// GetDiscarderOk returns a tuple with the Discarder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3NoScmPipeline) GetDiscarderOk() (*V1alpha3DiscarderProperty, bool) {
	if o == nil || IsNil(o.Discarder) {
		return nil, false
	}
	return o.Discarder, true
}

// HasDiscarder returns a boolean if a field has been set.
func (o *V1alpha3NoScmPipeline) HasDiscarder() bool {
	if o != nil && !IsNil(o.Discarder) {
		return true
	}

	return false
}

// SetDiscarder gets a reference to the given V1alpha3DiscarderProperty and assigns it to the Discarder field.
func (o *V1alpha3NoScmPipeline) SetDiscarder(v V1alpha3DiscarderProperty) {
	o.Discarder = &v
}

// GetJenkinsfile returns the Jenkinsfile field value if set, zero value otherwise.
func (o *V1alpha3NoScmPipeline) GetJenkinsfile() string {
	if o == nil || IsNil(o.Jenkinsfile) {
		var ret string
		return ret
	}
	return *o.Jenkinsfile
}

// GetJenkinsfileOk returns a tuple with the Jenkinsfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3NoScmPipeline) GetJenkinsfileOk() (*string, bool) {
	if o == nil || IsNil(o.Jenkinsfile) {
		return nil, false
	}
	return o.Jenkinsfile, true
}

// HasJenkinsfile returns a boolean if a field has been set.
func (o *V1alpha3NoScmPipeline) HasJenkinsfile() bool {
	if o != nil && !IsNil(o.Jenkinsfile) {
		return true
	}

	return false
}

// SetJenkinsfile gets a reference to the given string and assigns it to the Jenkinsfile field.
func (o *V1alpha3NoScmPipeline) SetJenkinsfile(v string) {
	o.Jenkinsfile = &v
}

// GetName returns the Name field value
func (o *V1alpha3NoScmPipeline) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *V1alpha3NoScmPipeline) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *V1alpha3NoScmPipeline) SetName(v string) {
	o.Name = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *V1alpha3NoScmPipeline) GetParameters() []V1alpha3Parameter {
	if o == nil || IsNil(o.Parameters) {
		var ret []V1alpha3Parameter
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3NoScmPipeline) GetParametersOk() ([]V1alpha3Parameter, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *V1alpha3NoScmPipeline) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given []V1alpha3Parameter and assigns it to the Parameters field.
func (o *V1alpha3NoScmPipeline) SetParameters(v []V1alpha3Parameter) {
	o.Parameters = v
}

// GetRemoteTrigger returns the RemoteTrigger field value if set, zero value otherwise.
func (o *V1alpha3NoScmPipeline) GetRemoteTrigger() V1alpha3RemoteTrigger {
	if o == nil || IsNil(o.RemoteTrigger) {
		var ret V1alpha3RemoteTrigger
		return ret
	}
	return *o.RemoteTrigger
}

// GetRemoteTriggerOk returns a tuple with the RemoteTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3NoScmPipeline) GetRemoteTriggerOk() (*V1alpha3RemoteTrigger, bool) {
	if o == nil || IsNil(o.RemoteTrigger) {
		return nil, false
	}
	return o.RemoteTrigger, true
}

// HasRemoteTrigger returns a boolean if a field has been set.
func (o *V1alpha3NoScmPipeline) HasRemoteTrigger() bool {
	if o != nil && !IsNil(o.RemoteTrigger) {
		return true
	}

	return false
}

// SetRemoteTrigger gets a reference to the given V1alpha3RemoteTrigger and assigns it to the RemoteTrigger field.
func (o *V1alpha3NoScmPipeline) SetRemoteTrigger(v V1alpha3RemoteTrigger) {
	o.RemoteTrigger = &v
}

// GetTimerTrigger returns the TimerTrigger field value if set, zero value otherwise.
func (o *V1alpha3NoScmPipeline) GetTimerTrigger() V1alpha3TimerTrigger {
	if o == nil || IsNil(o.TimerTrigger) {
		var ret V1alpha3TimerTrigger
		return ret
	}
	return *o.TimerTrigger
}

// GetTimerTriggerOk returns a tuple with the TimerTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3NoScmPipeline) GetTimerTriggerOk() (*V1alpha3TimerTrigger, bool) {
	if o == nil || IsNil(o.TimerTrigger) {
		return nil, false
	}
	return o.TimerTrigger, true
}

// HasTimerTrigger returns a boolean if a field has been set.
func (o *V1alpha3NoScmPipeline) HasTimerTrigger() bool {
	if o != nil && !IsNil(o.TimerTrigger) {
		return true
	}

	return false
}

// SetTimerTrigger gets a reference to the given V1alpha3TimerTrigger and assigns it to the TimerTrigger field.
func (o *V1alpha3NoScmPipeline) SetTimerTrigger(v V1alpha3TimerTrigger) {
	o.TimerTrigger = &v
}

func (o V1alpha3NoScmPipeline) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha3NoScmPipeline) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisableConcurrent) {
		toSerialize["disable_concurrent"] = o.DisableConcurrent
	}
	if !IsNil(o.Discarder) {
		toSerialize["discarder"] = o.Discarder
	}
	if !IsNil(o.Jenkinsfile) {
		toSerialize["jenkinsfile"] = o.Jenkinsfile
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.RemoteTrigger) {
		toSerialize["remote_trigger"] = o.RemoteTrigger
	}
	if !IsNil(o.TimerTrigger) {
		toSerialize["timer_trigger"] = o.TimerTrigger
	}
	return toSerialize, nil
}

func (o *V1alpha3NoScmPipeline) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1alpha3NoScmPipeline := _V1alpha3NoScmPipeline{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1alpha3NoScmPipeline)

	if err != nil {
		return err
	}

	*o = V1alpha3NoScmPipeline(varV1alpha3NoScmPipeline)

	return err
}

type NullableV1alpha3NoScmPipeline struct {
	value *V1alpha3NoScmPipeline
	isSet bool
}

func (v NullableV1alpha3NoScmPipeline) Get() *V1alpha3NoScmPipeline {
	return v.value
}

func (v *NullableV1alpha3NoScmPipeline) Set(val *V1alpha3NoScmPipeline) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha3NoScmPipeline) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha3NoScmPipeline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha3NoScmPipeline(val *V1alpha3NoScmPipeline) *NullableV1alpha3NoScmPipeline {
	return &NullableV1alpha3NoScmPipeline{value: val, isSet: true}
}

func (v NullableV1alpha3NoScmPipeline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha3NoScmPipeline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


