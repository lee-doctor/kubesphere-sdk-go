/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OauthStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OauthStatus{}

// OauthStatus struct for OauthStatus
type OauthStatus struct {
	// is authenticated
	Authenticated bool `json:"authenticated"`
	// user info
	User map[string]interface{} `json:"user,omitempty"`
}

type _OauthStatus OauthStatus

// NewOauthStatus instantiates a new OauthStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOauthStatus(authenticated bool) *OauthStatus {
	this := OauthStatus{}
	this.Authenticated = authenticated
	return &this
}

// NewOauthStatusWithDefaults instantiates a new OauthStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOauthStatusWithDefaults() *OauthStatus {
	this := OauthStatus{}
	return &this
}

// GetAuthenticated returns the Authenticated field value
func (o *OauthStatus) GetAuthenticated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Authenticated
}

// GetAuthenticatedOk returns a tuple with the Authenticated field value
// and a boolean to check if the value has been set.
func (o *OauthStatus) GetAuthenticatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Authenticated, true
}

// SetAuthenticated sets field value
func (o *OauthStatus) SetAuthenticated(v bool) {
	o.Authenticated = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *OauthStatus) GetUser() map[string]interface{} {
	if o == nil || IsNil(o.User) {
		var ret map[string]interface{}
		return ret
	}
	return o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OauthStatus) GetUserOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.User) {
		return map[string]interface{}{}, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *OauthStatus) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given map[string]interface{} and assigns it to the User field.
func (o *OauthStatus) SetUser(v map[string]interface{}) {
	o.User = v
}

func (o OauthStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OauthStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authenticated"] = o.Authenticated
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

func (o *OauthStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authenticated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOauthStatus := _OauthStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOauthStatus)

	if err != nil {
		return err
	}

	*o = OauthStatus(varOauthStatus)

	return err
}

type NullableOauthStatus struct {
	value *OauthStatus
	isSet bool
}

func (v NullableOauthStatus) Get() *OauthStatus {
	return v.value
}

func (v *NullableOauthStatus) Set(val *OauthStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableOauthStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableOauthStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOauthStatus(val *OauthStatus) *NullableOauthStatus {
	return &NullableOauthStatus{value: val, isSet: true}
}

func (v NullableOauthStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOauthStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


