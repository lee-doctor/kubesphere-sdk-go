/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1StatefulSetSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1StatefulSetSpec{}

// V1StatefulSetSpec A StatefulSetSpec is the specification of a StatefulSet.
type V1StatefulSetSpec struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds *int32 `json:"minReadySeconds,omitempty"`
	Ordinals *V1StatefulSetOrdinals `json:"ordinals,omitempty"`
	PersistentVolumeClaimRetentionPolicy *V1StatefulSetPersistentVolumeClaimRetentionPolicy `json:"persistentVolumeClaimRetentionPolicy,omitempty"`
	// podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
	PodManagementPolicy *string `json:"podManagementPolicy,omitempty"`
	// replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
	Replicas *int32 `json:"replicas,omitempty"`
	// revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
	RevisionHistoryLimit *int32 `json:"revisionHistoryLimit,omitempty"`
	Selector V1LabelSelector `json:"selector"`
	// serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.
	ServiceName string `json:"serviceName"`
	Template V1PodTemplateSpec `json:"template"`
	UpdateStrategy *V1StatefulSetUpdateStrategy `json:"updateStrategy,omitempty"`
	// volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
	VolumeClaimTemplates []V1PersistentVolumeClaim `json:"volumeClaimTemplates,omitempty"`
}

type _V1StatefulSetSpec V1StatefulSetSpec

// NewV1StatefulSetSpec instantiates a new V1StatefulSetSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1StatefulSetSpec(selector V1LabelSelector, serviceName string, template V1PodTemplateSpec) *V1StatefulSetSpec {
	this := V1StatefulSetSpec{}
	this.Selector = selector
	this.ServiceName = serviceName
	this.Template = template
	return &this
}

// NewV1StatefulSetSpecWithDefaults instantiates a new V1StatefulSetSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1StatefulSetSpecWithDefaults() *V1StatefulSetSpec {
	this := V1StatefulSetSpec{}
	return &this
}

// GetMinReadySeconds returns the MinReadySeconds field value if set, zero value otherwise.
func (o *V1StatefulSetSpec) GetMinReadySeconds() int32 {
	if o == nil || IsNil(o.MinReadySeconds) {
		var ret int32
		return ret
	}
	return *o.MinReadySeconds
}

// GetMinReadySecondsOk returns a tuple with the MinReadySeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StatefulSetSpec) GetMinReadySecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinReadySeconds) {
		return nil, false
	}
	return o.MinReadySeconds, true
}

// HasMinReadySeconds returns a boolean if a field has been set.
func (o *V1StatefulSetSpec) HasMinReadySeconds() bool {
	if o != nil && !IsNil(o.MinReadySeconds) {
		return true
	}

	return false
}

// SetMinReadySeconds gets a reference to the given int32 and assigns it to the MinReadySeconds field.
func (o *V1StatefulSetSpec) SetMinReadySeconds(v int32) {
	o.MinReadySeconds = &v
}

// GetOrdinals returns the Ordinals field value if set, zero value otherwise.
func (o *V1StatefulSetSpec) GetOrdinals() V1StatefulSetOrdinals {
	if o == nil || IsNil(o.Ordinals) {
		var ret V1StatefulSetOrdinals
		return ret
	}
	return *o.Ordinals
}

// GetOrdinalsOk returns a tuple with the Ordinals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StatefulSetSpec) GetOrdinalsOk() (*V1StatefulSetOrdinals, bool) {
	if o == nil || IsNil(o.Ordinals) {
		return nil, false
	}
	return o.Ordinals, true
}

// HasOrdinals returns a boolean if a field has been set.
func (o *V1StatefulSetSpec) HasOrdinals() bool {
	if o != nil && !IsNil(o.Ordinals) {
		return true
	}

	return false
}

// SetOrdinals gets a reference to the given V1StatefulSetOrdinals and assigns it to the Ordinals field.
func (o *V1StatefulSetSpec) SetOrdinals(v V1StatefulSetOrdinals) {
	o.Ordinals = &v
}

// GetPersistentVolumeClaimRetentionPolicy returns the PersistentVolumeClaimRetentionPolicy field value if set, zero value otherwise.
func (o *V1StatefulSetSpec) GetPersistentVolumeClaimRetentionPolicy() V1StatefulSetPersistentVolumeClaimRetentionPolicy {
	if o == nil || IsNil(o.PersistentVolumeClaimRetentionPolicy) {
		var ret V1StatefulSetPersistentVolumeClaimRetentionPolicy
		return ret
	}
	return *o.PersistentVolumeClaimRetentionPolicy
}

// GetPersistentVolumeClaimRetentionPolicyOk returns a tuple with the PersistentVolumeClaimRetentionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StatefulSetSpec) GetPersistentVolumeClaimRetentionPolicyOk() (*V1StatefulSetPersistentVolumeClaimRetentionPolicy, bool) {
	if o == nil || IsNil(o.PersistentVolumeClaimRetentionPolicy) {
		return nil, false
	}
	return o.PersistentVolumeClaimRetentionPolicy, true
}

// HasPersistentVolumeClaimRetentionPolicy returns a boolean if a field has been set.
func (o *V1StatefulSetSpec) HasPersistentVolumeClaimRetentionPolicy() bool {
	if o != nil && !IsNil(o.PersistentVolumeClaimRetentionPolicy) {
		return true
	}

	return false
}

// SetPersistentVolumeClaimRetentionPolicy gets a reference to the given V1StatefulSetPersistentVolumeClaimRetentionPolicy and assigns it to the PersistentVolumeClaimRetentionPolicy field.
func (o *V1StatefulSetSpec) SetPersistentVolumeClaimRetentionPolicy(v V1StatefulSetPersistentVolumeClaimRetentionPolicy) {
	o.PersistentVolumeClaimRetentionPolicy = &v
}

// GetPodManagementPolicy returns the PodManagementPolicy field value if set, zero value otherwise.
func (o *V1StatefulSetSpec) GetPodManagementPolicy() string {
	if o == nil || IsNil(o.PodManagementPolicy) {
		var ret string
		return ret
	}
	return *o.PodManagementPolicy
}

// GetPodManagementPolicyOk returns a tuple with the PodManagementPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StatefulSetSpec) GetPodManagementPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.PodManagementPolicy) {
		return nil, false
	}
	return o.PodManagementPolicy, true
}

// HasPodManagementPolicy returns a boolean if a field has been set.
func (o *V1StatefulSetSpec) HasPodManagementPolicy() bool {
	if o != nil && !IsNil(o.PodManagementPolicy) {
		return true
	}

	return false
}

// SetPodManagementPolicy gets a reference to the given string and assigns it to the PodManagementPolicy field.
func (o *V1StatefulSetSpec) SetPodManagementPolicy(v string) {
	o.PodManagementPolicy = &v
}

// GetReplicas returns the Replicas field value if set, zero value otherwise.
func (o *V1StatefulSetSpec) GetReplicas() int32 {
	if o == nil || IsNil(o.Replicas) {
		var ret int32
		return ret
	}
	return *o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StatefulSetSpec) GetReplicasOk() (*int32, bool) {
	if o == nil || IsNil(o.Replicas) {
		return nil, false
	}
	return o.Replicas, true
}

// HasReplicas returns a boolean if a field has been set.
func (o *V1StatefulSetSpec) HasReplicas() bool {
	if o != nil && !IsNil(o.Replicas) {
		return true
	}

	return false
}

// SetReplicas gets a reference to the given int32 and assigns it to the Replicas field.
func (o *V1StatefulSetSpec) SetReplicas(v int32) {
	o.Replicas = &v
}

// GetRevisionHistoryLimit returns the RevisionHistoryLimit field value if set, zero value otherwise.
func (o *V1StatefulSetSpec) GetRevisionHistoryLimit() int32 {
	if o == nil || IsNil(o.RevisionHistoryLimit) {
		var ret int32
		return ret
	}
	return *o.RevisionHistoryLimit
}

// GetRevisionHistoryLimitOk returns a tuple with the RevisionHistoryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StatefulSetSpec) GetRevisionHistoryLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.RevisionHistoryLimit) {
		return nil, false
	}
	return o.RevisionHistoryLimit, true
}

// HasRevisionHistoryLimit returns a boolean if a field has been set.
func (o *V1StatefulSetSpec) HasRevisionHistoryLimit() bool {
	if o != nil && !IsNil(o.RevisionHistoryLimit) {
		return true
	}

	return false
}

// SetRevisionHistoryLimit gets a reference to the given int32 and assigns it to the RevisionHistoryLimit field.
func (o *V1StatefulSetSpec) SetRevisionHistoryLimit(v int32) {
	o.RevisionHistoryLimit = &v
}

// GetSelector returns the Selector field value
func (o *V1StatefulSetSpec) GetSelector() V1LabelSelector {
	if o == nil {
		var ret V1LabelSelector
		return ret
	}

	return o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value
// and a boolean to check if the value has been set.
func (o *V1StatefulSetSpec) GetSelectorOk() (*V1LabelSelector, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Selector, true
}

// SetSelector sets field value
func (o *V1StatefulSetSpec) SetSelector(v V1LabelSelector) {
	o.Selector = v
}

// GetServiceName returns the ServiceName field value
func (o *V1StatefulSetSpec) GetServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
func (o *V1StatefulSetSpec) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceName, true
}

// SetServiceName sets field value
func (o *V1StatefulSetSpec) SetServiceName(v string) {
	o.ServiceName = v
}

// GetTemplate returns the Template field value
func (o *V1StatefulSetSpec) GetTemplate() V1PodTemplateSpec {
	if o == nil {
		var ret V1PodTemplateSpec
		return ret
	}

	return o.Template
}

// GetTemplateOk returns a tuple with the Template field value
// and a boolean to check if the value has been set.
func (o *V1StatefulSetSpec) GetTemplateOk() (*V1PodTemplateSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Template, true
}

// SetTemplate sets field value
func (o *V1StatefulSetSpec) SetTemplate(v V1PodTemplateSpec) {
	o.Template = v
}

// GetUpdateStrategy returns the UpdateStrategy field value if set, zero value otherwise.
func (o *V1StatefulSetSpec) GetUpdateStrategy() V1StatefulSetUpdateStrategy {
	if o == nil || IsNil(o.UpdateStrategy) {
		var ret V1StatefulSetUpdateStrategy
		return ret
	}
	return *o.UpdateStrategy
}

// GetUpdateStrategyOk returns a tuple with the UpdateStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StatefulSetSpec) GetUpdateStrategyOk() (*V1StatefulSetUpdateStrategy, bool) {
	if o == nil || IsNil(o.UpdateStrategy) {
		return nil, false
	}
	return o.UpdateStrategy, true
}

// HasUpdateStrategy returns a boolean if a field has been set.
func (o *V1StatefulSetSpec) HasUpdateStrategy() bool {
	if o != nil && !IsNil(o.UpdateStrategy) {
		return true
	}

	return false
}

// SetUpdateStrategy gets a reference to the given V1StatefulSetUpdateStrategy and assigns it to the UpdateStrategy field.
func (o *V1StatefulSetSpec) SetUpdateStrategy(v V1StatefulSetUpdateStrategy) {
	o.UpdateStrategy = &v
}

// GetVolumeClaimTemplates returns the VolumeClaimTemplates field value if set, zero value otherwise.
func (o *V1StatefulSetSpec) GetVolumeClaimTemplates() []V1PersistentVolumeClaim {
	if o == nil || IsNil(o.VolumeClaimTemplates) {
		var ret []V1PersistentVolumeClaim
		return ret
	}
	return o.VolumeClaimTemplates
}

// GetVolumeClaimTemplatesOk returns a tuple with the VolumeClaimTemplates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StatefulSetSpec) GetVolumeClaimTemplatesOk() ([]V1PersistentVolumeClaim, bool) {
	if o == nil || IsNil(o.VolumeClaimTemplates) {
		return nil, false
	}
	return o.VolumeClaimTemplates, true
}

// HasVolumeClaimTemplates returns a boolean if a field has been set.
func (o *V1StatefulSetSpec) HasVolumeClaimTemplates() bool {
	if o != nil && !IsNil(o.VolumeClaimTemplates) {
		return true
	}

	return false
}

// SetVolumeClaimTemplates gets a reference to the given []V1PersistentVolumeClaim and assigns it to the VolumeClaimTemplates field.
func (o *V1StatefulSetSpec) SetVolumeClaimTemplates(v []V1PersistentVolumeClaim) {
	o.VolumeClaimTemplates = v
}

func (o V1StatefulSetSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1StatefulSetSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinReadySeconds) {
		toSerialize["minReadySeconds"] = o.MinReadySeconds
	}
	if !IsNil(o.Ordinals) {
		toSerialize["ordinals"] = o.Ordinals
	}
	if !IsNil(o.PersistentVolumeClaimRetentionPolicy) {
		toSerialize["persistentVolumeClaimRetentionPolicy"] = o.PersistentVolumeClaimRetentionPolicy
	}
	if !IsNil(o.PodManagementPolicy) {
		toSerialize["podManagementPolicy"] = o.PodManagementPolicy
	}
	if !IsNil(o.Replicas) {
		toSerialize["replicas"] = o.Replicas
	}
	if !IsNil(o.RevisionHistoryLimit) {
		toSerialize["revisionHistoryLimit"] = o.RevisionHistoryLimit
	}
	toSerialize["selector"] = o.Selector
	toSerialize["serviceName"] = o.ServiceName
	toSerialize["template"] = o.Template
	if !IsNil(o.UpdateStrategy) {
		toSerialize["updateStrategy"] = o.UpdateStrategy
	}
	if !IsNil(o.VolumeClaimTemplates) {
		toSerialize["volumeClaimTemplates"] = o.VolumeClaimTemplates
	}
	return toSerialize, nil
}

func (o *V1StatefulSetSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"selector",
		"serviceName",
		"template",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1StatefulSetSpec := _V1StatefulSetSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1StatefulSetSpec)

	if err != nil {
		return err
	}

	*o = V1StatefulSetSpec(varV1StatefulSetSpec)

	return err
}

type NullableV1StatefulSetSpec struct {
	value *V1StatefulSetSpec
	isSet bool
}

func (v NullableV1StatefulSetSpec) Get() *V1StatefulSetSpec {
	return v.value
}

func (v *NullableV1StatefulSetSpec) Set(val *V1StatefulSetSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableV1StatefulSetSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableV1StatefulSetSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1StatefulSetSpec(val *V1StatefulSetSpec) *NullableV1StatefulSetSpec {
	return &NullableV1StatefulSetSpec{value: val, isSet: true}
}

func (v NullableV1StatefulSetSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1StatefulSetSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


