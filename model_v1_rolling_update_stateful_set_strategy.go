/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1RollingUpdateStatefulSetStrategy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1RollingUpdateStatefulSetStrategy{}

// V1RollingUpdateStatefulSetStrategy RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
type V1RollingUpdateStatefulSetStrategy struct {
	// The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding up. This can not be 0. Defaults to 1. This field is alpha-level and is only honored by servers that enable the MaxUnavailableStatefulSet feature. The field applies to all pods in the range 0 to Replicas-1. That means if there is any unavailable pod in the range 0 to Replicas-1, it will be counted towards MaxUnavailable.
	MaxUnavailable *string `json:"maxUnavailable,omitempty"`
	// Partition indicates the ordinal at which the StatefulSet should be partitioned for updates. During a rolling update, all pods from ordinal Replicas-1 to Partition are updated. All pods from ordinal Partition-1 to 0 remain untouched. This is helpful in being able to do a canary based deployment. The default value is 0.
	Partition *int32 `json:"partition,omitempty"`
}

// NewV1RollingUpdateStatefulSetStrategy instantiates a new V1RollingUpdateStatefulSetStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1RollingUpdateStatefulSetStrategy() *V1RollingUpdateStatefulSetStrategy {
	this := V1RollingUpdateStatefulSetStrategy{}
	return &this
}

// NewV1RollingUpdateStatefulSetStrategyWithDefaults instantiates a new V1RollingUpdateStatefulSetStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1RollingUpdateStatefulSetStrategyWithDefaults() *V1RollingUpdateStatefulSetStrategy {
	this := V1RollingUpdateStatefulSetStrategy{}
	return &this
}

// GetMaxUnavailable returns the MaxUnavailable field value if set, zero value otherwise.
func (o *V1RollingUpdateStatefulSetStrategy) GetMaxUnavailable() string {
	if o == nil || IsNil(o.MaxUnavailable) {
		var ret string
		return ret
	}
	return *o.MaxUnavailable
}

// GetMaxUnavailableOk returns a tuple with the MaxUnavailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1RollingUpdateStatefulSetStrategy) GetMaxUnavailableOk() (*string, bool) {
	if o == nil || IsNil(o.MaxUnavailable) {
		return nil, false
	}
	return o.MaxUnavailable, true
}

// HasMaxUnavailable returns a boolean if a field has been set.
func (o *V1RollingUpdateStatefulSetStrategy) HasMaxUnavailable() bool {
	if o != nil && !IsNil(o.MaxUnavailable) {
		return true
	}

	return false
}

// SetMaxUnavailable gets a reference to the given string and assigns it to the MaxUnavailable field.
func (o *V1RollingUpdateStatefulSetStrategy) SetMaxUnavailable(v string) {
	o.MaxUnavailable = &v
}

// GetPartition returns the Partition field value if set, zero value otherwise.
func (o *V1RollingUpdateStatefulSetStrategy) GetPartition() int32 {
	if o == nil || IsNil(o.Partition) {
		var ret int32
		return ret
	}
	return *o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1RollingUpdateStatefulSetStrategy) GetPartitionOk() (*int32, bool) {
	if o == nil || IsNil(o.Partition) {
		return nil, false
	}
	return o.Partition, true
}

// HasPartition returns a boolean if a field has been set.
func (o *V1RollingUpdateStatefulSetStrategy) HasPartition() bool {
	if o != nil && !IsNil(o.Partition) {
		return true
	}

	return false
}

// SetPartition gets a reference to the given int32 and assigns it to the Partition field.
func (o *V1RollingUpdateStatefulSetStrategy) SetPartition(v int32) {
	o.Partition = &v
}

func (o V1RollingUpdateStatefulSetStrategy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1RollingUpdateStatefulSetStrategy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxUnavailable) {
		toSerialize["maxUnavailable"] = o.MaxUnavailable
	}
	if !IsNil(o.Partition) {
		toSerialize["partition"] = o.Partition
	}
	return toSerialize, nil
}

type NullableV1RollingUpdateStatefulSetStrategy struct {
	value *V1RollingUpdateStatefulSetStrategy
	isSet bool
}

func (v NullableV1RollingUpdateStatefulSetStrategy) Get() *V1RollingUpdateStatefulSetStrategy {
	return v.value
}

func (v *NullableV1RollingUpdateStatefulSetStrategy) Set(val *V1RollingUpdateStatefulSetStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableV1RollingUpdateStatefulSetStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableV1RollingUpdateStatefulSetStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1RollingUpdateStatefulSetStrategy(val *V1RollingUpdateStatefulSetStrategy) *NullableV1RollingUpdateStatefulSetStrategy {
	return &NullableV1RollingUpdateStatefulSetStrategy{value: val, isSet: true}
}

func (v NullableV1RollingUpdateStatefulSetStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1RollingUpdateStatefulSetStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


