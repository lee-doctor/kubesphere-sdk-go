/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1VolumeResourceRequirements type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1VolumeResourceRequirements{}

// V1VolumeResourceRequirements VolumeResourceRequirements describes the storage resource requirements for a volume.
type V1VolumeResourceRequirements struct {
	// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits *map[string]ResourceQuantity `json:"limits,omitempty"`
	// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. Requests cannot exceed Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests *map[string]ResourceQuantity `json:"requests,omitempty"`
}

// NewV1VolumeResourceRequirements instantiates a new V1VolumeResourceRequirements object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1VolumeResourceRequirements() *V1VolumeResourceRequirements {
	this := V1VolumeResourceRequirements{}
	return &this
}

// NewV1VolumeResourceRequirementsWithDefaults instantiates a new V1VolumeResourceRequirements object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1VolumeResourceRequirementsWithDefaults() *V1VolumeResourceRequirements {
	this := V1VolumeResourceRequirements{}
	return &this
}

// GetLimits returns the Limits field value if set, zero value otherwise.
func (o *V1VolumeResourceRequirements) GetLimits() map[string]ResourceQuantity {
	if o == nil || IsNil(o.Limits) {
		var ret map[string]ResourceQuantity
		return ret
	}
	return *o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VolumeResourceRequirements) GetLimitsOk() (*map[string]ResourceQuantity, bool) {
	if o == nil || IsNil(o.Limits) {
		return nil, false
	}
	return o.Limits, true
}

// HasLimits returns a boolean if a field has been set.
func (o *V1VolumeResourceRequirements) HasLimits() bool {
	if o != nil && !IsNil(o.Limits) {
		return true
	}

	return false
}

// SetLimits gets a reference to the given map[string]ResourceQuantity and assigns it to the Limits field.
func (o *V1VolumeResourceRequirements) SetLimits(v map[string]ResourceQuantity) {
	o.Limits = &v
}

// GetRequests returns the Requests field value if set, zero value otherwise.
func (o *V1VolumeResourceRequirements) GetRequests() map[string]ResourceQuantity {
	if o == nil || IsNil(o.Requests) {
		var ret map[string]ResourceQuantity
		return ret
	}
	return *o.Requests
}

// GetRequestsOk returns a tuple with the Requests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VolumeResourceRequirements) GetRequestsOk() (*map[string]ResourceQuantity, bool) {
	if o == nil || IsNil(o.Requests) {
		return nil, false
	}
	return o.Requests, true
}

// HasRequests returns a boolean if a field has been set.
func (o *V1VolumeResourceRequirements) HasRequests() bool {
	if o != nil && !IsNil(o.Requests) {
		return true
	}

	return false
}

// SetRequests gets a reference to the given map[string]ResourceQuantity and assigns it to the Requests field.
func (o *V1VolumeResourceRequirements) SetRequests(v map[string]ResourceQuantity) {
	o.Requests = &v
}

func (o V1VolumeResourceRequirements) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1VolumeResourceRequirements) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Limits) {
		toSerialize["limits"] = o.Limits
	}
	if !IsNil(o.Requests) {
		toSerialize["requests"] = o.Requests
	}
	return toSerialize, nil
}

type NullableV1VolumeResourceRequirements struct {
	value *V1VolumeResourceRequirements
	isSet bool
}

func (v NullableV1VolumeResourceRequirements) Get() *V1VolumeResourceRequirements {
	return v.value
}

func (v *NullableV1VolumeResourceRequirements) Set(val *V1VolumeResourceRequirements) {
	v.value = val
	v.isSet = true
}

func (v NullableV1VolumeResourceRequirements) IsSet() bool {
	return v.isSet
}

func (v *NullableV1VolumeResourceRequirements) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1VolumeResourceRequirements(val *V1VolumeResourceRequirements) *NullableV1VolumeResourceRequirements {
	return &NullableV1VolumeResourceRequirements{value: val, isSet: true}
}

func (v NullableV1VolumeResourceRequirements) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1VolumeResourceRequirements) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


