/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// AuditingQueryAPIService AuditingQueryAPI service
type AuditingQueryAPIService service

type ApiAuditingRequest struct {
	ctx context.Context
	ApiService *AuditingQueryAPIService
	operation *string
	workspaceFilter *string
	workspaceSearch *string
	objectrefNamespaceFilter *string
	objectrefNamespaceSearch *string
	objectrefNameFilter *string
	objectrefNameSearch *string
	levelFilter *string
	verbFilter *string
	userFilter *string
	userSearch *string
	groupSearch *string
	sourceIpSearch *string
	objectrefResourceFilter *string
	objectrefSubresourceFilter *string
	responseCodeFilter *string
	responseStatusFilter *string
	startTime *string
	endTime *string
	interval *string
	sort *string
	from *int32
	size *int32
}

// Operation type. This can be one of three types: &#x60;query&#x60; (for querying events), &#x60;statistics&#x60; (for retrieving statistical data), &#x60;histogram&#x60; (for displaying events count by time interval). Defaults to query.
func (r ApiAuditingRequest) Operation(operation string) ApiAuditingRequest {
	r.operation = &operation
	return r
}

// A comma-separated list of workspaces. This field restricts the query to specified workspaces. For example, the following filter matches the workspace my-ws and demo-ws: &#x60;my-ws,demo-ws&#x60;.
func (r ApiAuditingRequest) WorkspaceFilter(workspaceFilter string) ApiAuditingRequest {
	r.workspaceFilter = &workspaceFilter
	return r
}

// A comma-separated list of keywords. Differing from **workspace_filter**, this field performs fuzzy matching on workspaces. For example, the following value limits the query to workspaces whose name contains the word my(My,MY,...) *OR* demo(Demo,DemO,...): &#x60;my,demo&#x60;.
func (r ApiAuditingRequest) WorkspaceSearch(workspaceSearch string) ApiAuditingRequest {
	r.workspaceSearch = &workspaceSearch
	return r
}

// A comma-separated list of namespaces. This field restricts the query to specified &#x60;ObjectRef.Namespace&#x60;.
func (r ApiAuditingRequest) ObjectrefNamespaceFilter(objectrefNamespaceFilter string) ApiAuditingRequest {
	r.objectrefNamespaceFilter = &objectrefNamespaceFilter
	return r
}

// A comma-separated list of keywords. Differing from **objectref_namespace_filter**, this field performs fuzzy matching on &#x60;ObjectRef.Namespace&#x60;.
func (r ApiAuditingRequest) ObjectrefNamespaceSearch(objectrefNamespaceSearch string) ApiAuditingRequest {
	r.objectrefNamespaceSearch = &objectrefNamespaceSearch
	return r
}

// A comma-separated list of names. This field restricts the query to specified &#x60;ObjectRef.Name&#x60;.
func (r ApiAuditingRequest) ObjectrefNameFilter(objectrefNameFilter string) ApiAuditingRequest {
	r.objectrefNameFilter = &objectrefNameFilter
	return r
}

// A comma-separated list of keywords. Differing from **objectref_name_filter**, this field performs fuzzy matching on &#x60;ObjectRef.Name&#x60;.
func (r ApiAuditingRequest) ObjectrefNameSearch(objectrefNameSearch string) ApiAuditingRequest {
	r.objectrefNameSearch = &objectrefNameSearch
	return r
}

// A comma-separated list of levels. This know values are Metadata, Request, RequestResponse.
func (r ApiAuditingRequest) LevelFilter(levelFilter string) ApiAuditingRequest {
	r.levelFilter = &levelFilter
	return r
}

// A comma-separated list of verbs. This field restricts the query to specified verb. This field restricts the query to specified &#x60;Verb&#x60;.
func (r ApiAuditingRequest) VerbFilter(verbFilter string) ApiAuditingRequest {
	r.verbFilter = &verbFilter
	return r
}

// A comma-separated list of user. This field restricts the query to specified user. For example, the following filter matches the user user1 and user2: &#x60;user1,user2&#x60;.
func (r ApiAuditingRequest) UserFilter(userFilter string) ApiAuditingRequest {
	r.userFilter = &userFilter
	return r
}

// A comma-separated list of keywords. Differing from **user_filter**, this field performs fuzzy matching on &#39;User.username&#39;. For example, the following value limits the query to user whose name contains the word my(My,MY,...) *OR* demo(Demo,DemO,...): &#x60;my,demo&#x60;.
func (r ApiAuditingRequest) UserSearch(userSearch string) ApiAuditingRequest {
	r.userSearch = &userSearch
	return r
}

// A comma-separated list of keywords. This field performs fuzzy matching on &#39;User.Groups&#39;. For example, the following value limits the query to group which contains the word my(My,MY,...) *OR* demo(Demo,DemO,...): &#x60;my,demo&#x60;.
func (r ApiAuditingRequest) GroupSearch(groupSearch string) ApiAuditingRequest {
	r.groupSearch = &groupSearch
	return r
}

// A comma-separated list of keywords. This field performs fuzzy matching on &#39;SourceIPs&#39;. For example, the following value limits the query to SourceIPs which contains 127.0 *OR* 192.168.: &#x60;127.0,192.168.&#x60;.
func (r ApiAuditingRequest) SourceIpSearch(sourceIpSearch string) ApiAuditingRequest {
	r.sourceIpSearch = &sourceIpSearch
	return r
}

// A comma-separated list of resource. This field restricts the query to specified ip. This field restricts the query to specified &#x60;ObjectRef.Resource&#x60;.
func (r ApiAuditingRequest) ObjectrefResourceFilter(objectrefResourceFilter string) ApiAuditingRequest {
	r.objectrefResourceFilter = &objectrefResourceFilter
	return r
}

// A comma-separated list of subresource. This field restricts the query to specified subresource. This field restricts the query to specified &#x60;ObjectRef.Subresource&#x60;.
func (r ApiAuditingRequest) ObjectrefSubresourceFilter(objectrefSubresourceFilter string) ApiAuditingRequest {
	r.objectrefSubresourceFilter = &objectrefSubresourceFilter
	return r
}

// A comma-separated list of response status code. This field restricts the query to specified response status code. This field restricts the query to specified &#x60;ResponseStatus.code&#x60;.
func (r ApiAuditingRequest) ResponseCodeFilter(responseCodeFilter string) ApiAuditingRequest {
	r.responseCodeFilter = &responseCodeFilter
	return r
}

// A comma-separated list of response status. This field restricts the query to specified response status. This field restricts the query to specified &#x60;ResponseStatus.status&#x60;.
func (r ApiAuditingRequest) ResponseStatusFilter(responseStatusFilter string) ApiAuditingRequest {
	r.responseStatusFilter = &responseStatusFilter
	return r
}

// Start time of query (limits &#x60;RequestReceivedTimestamp&#x60;). The format is a string representing seconds since the epoch, eg. 1136214245.
func (r ApiAuditingRequest) StartTime(startTime string) ApiAuditingRequest {
	r.startTime = &startTime
	return r
}

// End time of query (limits &#x60;RequestReceivedTimestamp&#x60;). The format is a string representing seconds since the epoch, eg. 1136214245.
func (r ApiAuditingRequest) EndTime(endTime string) ApiAuditingRequest {
	r.endTime = &endTime
	return r
}

// Time interval. It requires **operation** is set to &#x60;histogram&#x60;. The format is [0-9]+[smhdwMqy]. Defaults to 15m (i.e. 15 min).
func (r ApiAuditingRequest) Interval(interval string) ApiAuditingRequest {
	r.interval = &interval
	return r
}

// Sort order. One of asc, desc. This field sorts events by &#x60;RequestReceivedTimestamp&#x60;.
func (r ApiAuditingRequest) Sort(sort string) ApiAuditingRequest {
	r.sort = &sort
	return r
}

// The offset from the result set. This field returns query results from the specified offset. It requires **operation** is set to &#x60;query&#x60;. Defaults to 0 (i.e. from the beginning of the result set).
func (r ApiAuditingRequest) From(from int32) ApiAuditingRequest {
	r.from = &from
	return r
}

// Size of result set to return. It requires **operation** is set to &#x60;query&#x60;. Defaults to 10 (i.e. 10 event records).
func (r ApiAuditingRequest) Size(size int32) ApiAuditingRequest {
	r.size = &size
	return r
}

func (r ApiAuditingRequest) Execute() (*V1alpha1APIResponse, *http.Response, error) {
	return r.ApiService.AuditingExecute(r)
}

/*
Auditing Query auditing events against the cluster

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuditingRequest
*/
func (a *AuditingQueryAPIService) Auditing(ctx context.Context) ApiAuditingRequest {
	return ApiAuditingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return V1alpha1APIResponse
func (a *AuditingQueryAPIService) AuditingExecute(r ApiAuditingRequest) (*V1alpha1APIResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1alpha1APIResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditingQueryAPIService.Auditing")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/tenant.kubesphere.io/v1alpha2/auditing/events"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.operation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "operation", r.operation, "form", "")
	} else {
		var defaultValue string = "query"
		r.operation = &defaultValue
	}
	if r.workspaceFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "workspace_filter", r.workspaceFilter, "form", "")
	}
	if r.workspaceSearch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "workspace_search", r.workspaceSearch, "form", "")
	}
	if r.objectrefNamespaceFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "objectref_namespace_filter", r.objectrefNamespaceFilter, "form", "")
	}
	if r.objectrefNamespaceSearch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "objectref_namespace_search", r.objectrefNamespaceSearch, "form", "")
	}
	if r.objectrefNameFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "objectref_name_filter", r.objectrefNameFilter, "form", "")
	}
	if r.objectrefNameSearch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "objectref_name_search", r.objectrefNameSearch, "form", "")
	}
	if r.levelFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "level_filter", r.levelFilter, "form", "")
	}
	if r.verbFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "verb_filter", r.verbFilter, "form", "")
	}
	if r.userFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_filter", r.userFilter, "form", "")
	}
	if r.userSearch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_search", r.userSearch, "form", "")
	}
	if r.groupSearch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_search", r.groupSearch, "form", "")
	}
	if r.sourceIpSearch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "source_ip_search", r.sourceIpSearch, "form", "")
	}
	if r.objectrefResourceFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "objectref_resource_filter", r.objectrefResourceFilter, "form", "")
	}
	if r.objectrefSubresourceFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "objectref_subresource_filter", r.objectrefSubresourceFilter, "form", "")
	}
	if r.responseCodeFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "response_code_filter", r.responseCodeFilter, "form", "")
	}
	if r.responseStatusFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "response_status_filter", r.responseStatusFilter, "form", "")
	}
	if r.startTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start_time", r.startTime, "form", "")
	}
	if r.endTime != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end_time", r.endTime, "form", "")
	}
	if r.interval != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "interval", r.interval, "form", "")
	} else {
		var defaultValue string = "15m"
		r.interval = &defaultValue
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "form", "")
	} else {
		var defaultValue string = "desc"
		r.sort = &defaultValue
	}
	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "form", "")
	} else {
		var defaultValue int32 = 0
		r.from = &defaultValue
	}
	if r.size != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "size", r.size, "form", "")
	} else {
		var defaultValue int32 = 10
		r.size = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
