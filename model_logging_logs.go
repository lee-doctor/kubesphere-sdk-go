/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LoggingLogs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoggingLogs{}

// LoggingLogs struct for LoggingLogs
type LoggingLogs struct {
	// actual array of results
	Records []LoggingRecord `json:"records,omitempty"`
	// total number of matched results
	Total int64 `json:"total"`
}

type _LoggingLogs LoggingLogs

// NewLoggingLogs instantiates a new LoggingLogs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoggingLogs(total int64) *LoggingLogs {
	this := LoggingLogs{}
	this.Total = total
	return &this
}

// NewLoggingLogsWithDefaults instantiates a new LoggingLogs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoggingLogsWithDefaults() *LoggingLogs {
	this := LoggingLogs{}
	return &this
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *LoggingLogs) GetRecords() []LoggingRecord {
	if o == nil || IsNil(o.Records) {
		var ret []LoggingRecord
		return ret
	}
	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoggingLogs) GetRecordsOk() ([]LoggingRecord, bool) {
	if o == nil || IsNil(o.Records) {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *LoggingLogs) HasRecords() bool {
	if o != nil && !IsNil(o.Records) {
		return true
	}

	return false
}

// SetRecords gets a reference to the given []LoggingRecord and assigns it to the Records field.
func (o *LoggingLogs) SetRecords(v []LoggingRecord) {
	o.Records = v
}

// GetTotal returns the Total field value
func (o *LoggingLogs) GetTotal() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *LoggingLogs) GetTotalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *LoggingLogs) SetTotal(v int64) {
	o.Total = v
}

func (o LoggingLogs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoggingLogs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Records) {
		toSerialize["records"] = o.Records
	}
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *LoggingLogs) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoggingLogs := _LoggingLogs{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLoggingLogs)

	if err != nil {
		return err
	}

	*o = LoggingLogs(varLoggingLogs)

	return err
}

type NullableLoggingLogs struct {
	value *LoggingLogs
	isSet bool
}

func (v NullableLoggingLogs) Get() *LoggingLogs {
	return v.value
}

func (v *NullableLoggingLogs) Set(val *LoggingLogs) {
	v.value = val
	v.isSet = true
}

func (v NullableLoggingLogs) IsSet() bool {
	return v.isSet
}

func (v *NullableLoggingLogs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoggingLogs(val *LoggingLogs) *NullableLoggingLogs {
	return &NullableLoggingLogs{value: val, isSet: true}
}

func (v NullableLoggingLogs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoggingLogs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


