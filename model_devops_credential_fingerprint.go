/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DevopsCredentialFingerprint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevopsCredentialFingerprint{}

// DevopsCredentialFingerprint struct for DevopsCredentialFingerprint
type DevopsCredentialFingerprint struct {
	// Credential's display name and description
	FileName *string `json:"file_name,omitempty"`
	// Credential's hash
	Hash *string `json:"hash,omitempty"`
	// all usage of Credential
	Usage []DevopsCredentialFingerprintUsage `json:"usage,omitempty"`
}

// NewDevopsCredentialFingerprint instantiates a new DevopsCredentialFingerprint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevopsCredentialFingerprint() *DevopsCredentialFingerprint {
	this := DevopsCredentialFingerprint{}
	return &this
}

// NewDevopsCredentialFingerprintWithDefaults instantiates a new DevopsCredentialFingerprint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevopsCredentialFingerprintWithDefaults() *DevopsCredentialFingerprint {
	this := DevopsCredentialFingerprint{}
	return &this
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *DevopsCredentialFingerprint) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevopsCredentialFingerprint) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *DevopsCredentialFingerprint) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *DevopsCredentialFingerprint) SetFileName(v string) {
	o.FileName = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *DevopsCredentialFingerprint) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevopsCredentialFingerprint) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *DevopsCredentialFingerprint) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *DevopsCredentialFingerprint) SetHash(v string) {
	o.Hash = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *DevopsCredentialFingerprint) GetUsage() []DevopsCredentialFingerprintUsage {
	if o == nil || IsNil(o.Usage) {
		var ret []DevopsCredentialFingerprintUsage
		return ret
	}
	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevopsCredentialFingerprint) GetUsageOk() ([]DevopsCredentialFingerprintUsage, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *DevopsCredentialFingerprint) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given []DevopsCredentialFingerprintUsage and assigns it to the Usage field.
func (o *DevopsCredentialFingerprint) SetUsage(v []DevopsCredentialFingerprintUsage) {
	o.Usage = v
}

func (o DevopsCredentialFingerprint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevopsCredentialFingerprint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileName) {
		toSerialize["file_name"] = o.FileName
	}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return toSerialize, nil
}

type NullableDevopsCredentialFingerprint struct {
	value *DevopsCredentialFingerprint
	isSet bool
}

func (v NullableDevopsCredentialFingerprint) Get() *DevopsCredentialFingerprint {
	return v.value
}

func (v *NullableDevopsCredentialFingerprint) Set(val *DevopsCredentialFingerprint) {
	v.value = val
	v.isSet = true
}

func (v NullableDevopsCredentialFingerprint) IsSet() bool {
	return v.isSet
}

func (v *NullableDevopsCredentialFingerprint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevopsCredentialFingerprint(val *DevopsCredentialFingerprint) *NullableDevopsCredentialFingerprint {
	return &NullableDevopsCredentialFingerprint{value: val, isSet: true}
}

func (v NullableDevopsCredentialFingerprint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevopsCredentialFingerprint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


