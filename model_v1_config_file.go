/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1ConfigFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ConfigFile{}

// V1ConfigFile struct for V1ConfigFile
type V1ConfigFile struct {
	Architecture string `json:"architecture"`
	Author *string `json:"author,omitempty"`
	Config V1Config `json:"config"`
	Container *string `json:"container,omitempty"`
	Created *string `json:"created,omitempty"`
	DockerVersion *string `json:"docker_version,omitempty"`
	History []V1History `json:"history,omitempty"`
	Os string `json:"os"`
	OsFeatures []string `json:"os.features,omitempty"`
	OsVersion *string `json:"os.version,omitempty"`
	Rootfs V1RootFS `json:"rootfs"`
	Variant *string `json:"variant,omitempty"`
}

type _V1ConfigFile V1ConfigFile

// NewV1ConfigFile instantiates a new V1ConfigFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ConfigFile(architecture string, config V1Config, os string, rootfs V1RootFS) *V1ConfigFile {
	this := V1ConfigFile{}
	this.Architecture = architecture
	this.Config = config
	this.Os = os
	this.Rootfs = rootfs
	return &this
}

// NewV1ConfigFileWithDefaults instantiates a new V1ConfigFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ConfigFileWithDefaults() *V1ConfigFile {
	this := V1ConfigFile{}
	return &this
}

// GetArchitecture returns the Architecture field value
func (o *V1ConfigFile) GetArchitecture() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Architecture
}

// GetArchitectureOk returns a tuple with the Architecture field value
// and a boolean to check if the value has been set.
func (o *V1ConfigFile) GetArchitectureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Architecture, true
}

// SetArchitecture sets field value
func (o *V1ConfigFile) SetArchitecture(v string) {
	o.Architecture = v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *V1ConfigFile) GetAuthor() string {
	if o == nil || IsNil(o.Author) {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFile) GetAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *V1ConfigFile) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *V1ConfigFile) SetAuthor(v string) {
	o.Author = &v
}

// GetConfig returns the Config field value
func (o *V1ConfigFile) GetConfig() V1Config {
	if o == nil {
		var ret V1Config
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *V1ConfigFile) GetConfigOk() (*V1Config, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *V1ConfigFile) SetConfig(v V1Config) {
	o.Config = v
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *V1ConfigFile) GetContainer() string {
	if o == nil || IsNil(o.Container) {
		var ret string
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFile) GetContainerOk() (*string, bool) {
	if o == nil || IsNil(o.Container) {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *V1ConfigFile) HasContainer() bool {
	if o != nil && !IsNil(o.Container) {
		return true
	}

	return false
}

// SetContainer gets a reference to the given string and assigns it to the Container field.
func (o *V1ConfigFile) SetContainer(v string) {
	o.Container = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *V1ConfigFile) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFile) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *V1ConfigFile) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *V1ConfigFile) SetCreated(v string) {
	o.Created = &v
}

// GetDockerVersion returns the DockerVersion field value if set, zero value otherwise.
func (o *V1ConfigFile) GetDockerVersion() string {
	if o == nil || IsNil(o.DockerVersion) {
		var ret string
		return ret
	}
	return *o.DockerVersion
}

// GetDockerVersionOk returns a tuple with the DockerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFile) GetDockerVersionOk() (*string, bool) {
	if o == nil || IsNil(o.DockerVersion) {
		return nil, false
	}
	return o.DockerVersion, true
}

// HasDockerVersion returns a boolean if a field has been set.
func (o *V1ConfigFile) HasDockerVersion() bool {
	if o != nil && !IsNil(o.DockerVersion) {
		return true
	}

	return false
}

// SetDockerVersion gets a reference to the given string and assigns it to the DockerVersion field.
func (o *V1ConfigFile) SetDockerVersion(v string) {
	o.DockerVersion = &v
}

// GetHistory returns the History field value if set, zero value otherwise.
func (o *V1ConfigFile) GetHistory() []V1History {
	if o == nil || IsNil(o.History) {
		var ret []V1History
		return ret
	}
	return o.History
}

// GetHistoryOk returns a tuple with the History field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFile) GetHistoryOk() ([]V1History, bool) {
	if o == nil || IsNil(o.History) {
		return nil, false
	}
	return o.History, true
}

// HasHistory returns a boolean if a field has been set.
func (o *V1ConfigFile) HasHistory() bool {
	if o != nil && !IsNil(o.History) {
		return true
	}

	return false
}

// SetHistory gets a reference to the given []V1History and assigns it to the History field.
func (o *V1ConfigFile) SetHistory(v []V1History) {
	o.History = v
}

// GetOs returns the Os field value
func (o *V1ConfigFile) GetOs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Os
}

// GetOsOk returns a tuple with the Os field value
// and a boolean to check if the value has been set.
func (o *V1ConfigFile) GetOsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Os, true
}

// SetOs sets field value
func (o *V1ConfigFile) SetOs(v string) {
	o.Os = v
}

// GetOsFeatures returns the OsFeatures field value if set, zero value otherwise.
func (o *V1ConfigFile) GetOsFeatures() []string {
	if o == nil || IsNil(o.OsFeatures) {
		var ret []string
		return ret
	}
	return o.OsFeatures
}

// GetOsFeaturesOk returns a tuple with the OsFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFile) GetOsFeaturesOk() ([]string, bool) {
	if o == nil || IsNil(o.OsFeatures) {
		return nil, false
	}
	return o.OsFeatures, true
}

// HasOsFeatures returns a boolean if a field has been set.
func (o *V1ConfigFile) HasOsFeatures() bool {
	if o != nil && !IsNil(o.OsFeatures) {
		return true
	}

	return false
}

// SetOsFeatures gets a reference to the given []string and assigns it to the OsFeatures field.
func (o *V1ConfigFile) SetOsFeatures(v []string) {
	o.OsFeatures = v
}

// GetOsVersion returns the OsVersion field value if set, zero value otherwise.
func (o *V1ConfigFile) GetOsVersion() string {
	if o == nil || IsNil(o.OsVersion) {
		var ret string
		return ret
	}
	return *o.OsVersion
}

// GetOsVersionOk returns a tuple with the OsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFile) GetOsVersionOk() (*string, bool) {
	if o == nil || IsNil(o.OsVersion) {
		return nil, false
	}
	return o.OsVersion, true
}

// HasOsVersion returns a boolean if a field has been set.
func (o *V1ConfigFile) HasOsVersion() bool {
	if o != nil && !IsNil(o.OsVersion) {
		return true
	}

	return false
}

// SetOsVersion gets a reference to the given string and assigns it to the OsVersion field.
func (o *V1ConfigFile) SetOsVersion(v string) {
	o.OsVersion = &v
}

// GetRootfs returns the Rootfs field value
func (o *V1ConfigFile) GetRootfs() V1RootFS {
	if o == nil {
		var ret V1RootFS
		return ret
	}

	return o.Rootfs
}

// GetRootfsOk returns a tuple with the Rootfs field value
// and a boolean to check if the value has been set.
func (o *V1ConfigFile) GetRootfsOk() (*V1RootFS, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rootfs, true
}

// SetRootfs sets field value
func (o *V1ConfigFile) SetRootfs(v V1RootFS) {
	o.Rootfs = v
}

// GetVariant returns the Variant field value if set, zero value otherwise.
func (o *V1ConfigFile) GetVariant() string {
	if o == nil || IsNil(o.Variant) {
		var ret string
		return ret
	}
	return *o.Variant
}

// GetVariantOk returns a tuple with the Variant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ConfigFile) GetVariantOk() (*string, bool) {
	if o == nil || IsNil(o.Variant) {
		return nil, false
	}
	return o.Variant, true
}

// HasVariant returns a boolean if a field has been set.
func (o *V1ConfigFile) HasVariant() bool {
	if o != nil && !IsNil(o.Variant) {
		return true
	}

	return false
}

// SetVariant gets a reference to the given string and assigns it to the Variant field.
func (o *V1ConfigFile) SetVariant(v string) {
	o.Variant = &v
}

func (o V1ConfigFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ConfigFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["architecture"] = o.Architecture
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	toSerialize["config"] = o.Config
	if !IsNil(o.Container) {
		toSerialize["container"] = o.Container
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.DockerVersion) {
		toSerialize["docker_version"] = o.DockerVersion
	}
	if !IsNil(o.History) {
		toSerialize["history"] = o.History
	}
	toSerialize["os"] = o.Os
	if !IsNil(o.OsFeatures) {
		toSerialize["os.features"] = o.OsFeatures
	}
	if !IsNil(o.OsVersion) {
		toSerialize["os.version"] = o.OsVersion
	}
	toSerialize["rootfs"] = o.Rootfs
	if !IsNil(o.Variant) {
		toSerialize["variant"] = o.Variant
	}
	return toSerialize, nil
}

func (o *V1ConfigFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"architecture",
		"config",
		"os",
		"rootfs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1ConfigFile := _V1ConfigFile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1ConfigFile)

	if err != nil {
		return err
	}

	*o = V1ConfigFile(varV1ConfigFile)

	return err
}

type NullableV1ConfigFile struct {
	value *V1ConfigFile
	isSet bool
}

func (v NullableV1ConfigFile) Get() *V1ConfigFile {
	return v.value
}

func (v *NullableV1ConfigFile) Set(val *V1ConfigFile) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ConfigFile) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ConfigFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ConfigFile(val *V1ConfigFile) *NullableV1ConfigFile {
	return &NullableV1ConfigFile{value: val, isSet: true}
}

func (v NullableV1ConfigFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ConfigFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


