/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DevOpsProjectRoleAPIService DevOpsProjectRoleAPI service
type DevOpsProjectRoleAPIService service

type ApiCreateDevOpsProjectNamespaceRoleRequest struct {
	ctx context.Context
	ApiService *DevOpsProjectRoleAPIService
	devops string
	body *V1Role
}

func (r ApiCreateDevOpsProjectNamespaceRoleRequest) Body(body V1Role) ApiCreateDevOpsProjectNamespaceRoleRequest {
	r.body = &body
	return r
}

func (r ApiCreateDevOpsProjectNamespaceRoleRequest) Execute() (*V1Role, *http.Response, error) {
	return r.ApiService.CreateDevOpsProjectNamespaceRoleExecute(r)
}

/*
CreateDevOpsProjectNamespaceRole Create role in the specified devops project.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param devops devops project name
 @return ApiCreateDevOpsProjectNamespaceRoleRequest
*/
func (a *DevOpsProjectRoleAPIService) CreateDevOpsProjectNamespaceRole(ctx context.Context, devops string) ApiCreateDevOpsProjectNamespaceRoleRequest {
	return ApiCreateDevOpsProjectNamespaceRoleRequest{
		ApiService: a,
		ctx: ctx,
		devops: devops,
	}
}

// Execute executes the request
//  @return V1Role
func (a *DevOpsProjectRoleAPIService) CreateDevOpsProjectNamespaceRoleExecute(r ApiCreateDevOpsProjectNamespaceRoleRequest) (*V1Role, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Role
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevOpsProjectRoleAPIService.CreateDevOpsProjectNamespaceRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/iam.kubesphere.io/v1alpha2/devops/{devops}/roles"
	localVarPath = strings.Replace(localVarPath, "{"+"devops"+"}", url.PathEscape(parameterValueToString(r.devops, "devops")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDevOpsProjectRoleRequest struct {
	ctx context.Context
	ApiService *DevOpsProjectRoleAPIService
	devops string
	role string
}

func (r ApiDeleteDevOpsProjectRoleRequest) Execute() (*ErrorsError, *http.Response, error) {
	return r.ApiService.DeleteDevOpsProjectRoleExecute(r)
}

/*
DeleteDevOpsProjectRole Delete role in the specified devops project.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param devops devops project name
 @param role role name
 @return ApiDeleteDevOpsProjectRoleRequest
*/
func (a *DevOpsProjectRoleAPIService) DeleteDevOpsProjectRole(ctx context.Context, devops string, role string) ApiDeleteDevOpsProjectRoleRequest {
	return ApiDeleteDevOpsProjectRoleRequest{
		ApiService: a,
		ctx: ctx,
		devops: devops,
		role: role,
	}
}

// Execute executes the request
//  @return ErrorsError
func (a *DevOpsProjectRoleAPIService) DeleteDevOpsProjectRoleExecute(r ApiDeleteDevOpsProjectRoleRequest) (*ErrorsError, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ErrorsError
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevOpsProjectRoleAPIService.DeleteDevOpsProjectRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/iam.kubesphere.io/v1alpha2/devops/{devops}/roles/{role}"
	localVarPath = strings.Replace(localVarPath, "{"+"devops"+"}", url.PathEscape(parameterValueToString(r.devops, "devops")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role"+"}", url.PathEscape(parameterValueToString(r.role, "role")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeDevOpsProjectNamespaceRoleRequest struct {
	ctx context.Context
	ApiService *DevOpsProjectRoleAPIService
	devops string
	role string
}

func (r ApiDescribeDevOpsProjectNamespaceRoleRequest) Execute() (*V1Role, *http.Response, error) {
	return r.ApiService.DescribeDevOpsProjectNamespaceRoleExecute(r)
}

/*
DescribeDevOpsProjectNamespaceRole Retrieve devops project role details.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param devops devops project name
 @param role role name
 @return ApiDescribeDevOpsProjectNamespaceRoleRequest
*/
func (a *DevOpsProjectRoleAPIService) DescribeDevOpsProjectNamespaceRole(ctx context.Context, devops string, role string) ApiDescribeDevOpsProjectNamespaceRoleRequest {
	return ApiDescribeDevOpsProjectNamespaceRoleRequest{
		ApiService: a,
		ctx: ctx,
		devops: devops,
		role: role,
	}
}

// Execute executes the request
//  @return V1Role
func (a *DevOpsProjectRoleAPIService) DescribeDevOpsProjectNamespaceRoleExecute(r ApiDescribeDevOpsProjectNamespaceRoleRequest) (*V1Role, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Role
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevOpsProjectRoleAPIService.DescribeDevOpsProjectNamespaceRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/iam.kubesphere.io/v1alpha2/devops/{devops}/roles/{role}"
	localVarPath = strings.Replace(localVarPath, "{"+"devops"+"}", url.PathEscape(parameterValueToString(r.devops, "devops")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role"+"}", url.PathEscape(parameterValueToString(r.role, "role")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDevOpsProjectRolesRequest struct {
	ctx context.Context
	ApiService *DevOpsProjectRoleAPIService
	devops string
}

func (r ApiListDevOpsProjectRolesRequest) Execute() (*ApiListResult, *http.Response, error) {
	return r.ApiService.ListDevOpsProjectRolesExecute(r)
}

/*
ListDevOpsProjectRoles List all roles in the specified devops project.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param devops devops project name
 @return ApiListDevOpsProjectRolesRequest
*/
func (a *DevOpsProjectRoleAPIService) ListDevOpsProjectRoles(ctx context.Context, devops string) ApiListDevOpsProjectRolesRequest {
	return ApiListDevOpsProjectRolesRequest{
		ApiService: a,
		ctx: ctx,
		devops: devops,
	}
}

// Execute executes the request
//  @return ApiListResult
func (a *DevOpsProjectRoleAPIService) ListDevOpsProjectRolesExecute(r ApiListDevOpsProjectRolesRequest) (*ApiListResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiListResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevOpsProjectRoleAPIService.ListDevOpsProjectRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/iam.kubesphere.io/v1alpha2/devops/{devops}/roles"
	localVarPath = strings.Replace(localVarPath, "{"+"devops"+"}", url.PathEscape(parameterValueToString(r.devops, "devops")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchDevOpsProjectNamespaceRoleRequest struct {
	ctx context.Context
	ApiService *DevOpsProjectRoleAPIService
	devops string
	role string
	body *V1Role
}

func (r ApiPatchDevOpsProjectNamespaceRoleRequest) Body(body V1Role) ApiPatchDevOpsProjectNamespaceRoleRequest {
	r.body = &body
	return r
}

func (r ApiPatchDevOpsProjectNamespaceRoleRequest) Execute() (*V1Role, *http.Response, error) {
	return r.ApiService.PatchDevOpsProjectNamespaceRoleExecute(r)
}

/*
PatchDevOpsProjectNamespaceRole Patch devops project role.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param devops devops project name
 @param role role name
 @return ApiPatchDevOpsProjectNamespaceRoleRequest
*/
func (a *DevOpsProjectRoleAPIService) PatchDevOpsProjectNamespaceRole(ctx context.Context, devops string, role string) ApiPatchDevOpsProjectNamespaceRoleRequest {
	return ApiPatchDevOpsProjectNamespaceRoleRequest{
		ApiService: a,
		ctx: ctx,
		devops: devops,
		role: role,
	}
}

// Execute executes the request
//  @return V1Role
func (a *DevOpsProjectRoleAPIService) PatchDevOpsProjectNamespaceRoleExecute(r ApiPatchDevOpsProjectNamespaceRoleRequest) (*V1Role, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Role
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevOpsProjectRoleAPIService.PatchDevOpsProjectNamespaceRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/iam.kubesphere.io/v1alpha2/devops/{devops}/roles/{role}"
	localVarPath = strings.Replace(localVarPath, "{"+"devops"+"}", url.PathEscape(parameterValueToString(r.devops, "devops")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role"+"}", url.PathEscape(parameterValueToString(r.role, "role")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrieveDevOpsProjectMemberRoleTemplatesRequest struct {
	ctx context.Context
	ApiService *DevOpsProjectRoleAPIService
	devops string
	member string
}

func (r ApiRetrieveDevOpsProjectMemberRoleTemplatesRequest) Execute() (*ApiListResult, *http.Response, error) {
	return r.ApiService.RetrieveDevOpsProjectMemberRoleTemplatesExecute(r)
}

/*
RetrieveDevOpsProjectMemberRoleTemplates Retrieve member's role templates in devops project.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param devops devops project name
 @param member devops project member's username
 @return ApiRetrieveDevOpsProjectMemberRoleTemplatesRequest
*/
func (a *DevOpsProjectRoleAPIService) RetrieveDevOpsProjectMemberRoleTemplates(ctx context.Context, devops string, member string) ApiRetrieveDevOpsProjectMemberRoleTemplatesRequest {
	return ApiRetrieveDevOpsProjectMemberRoleTemplatesRequest{
		ApiService: a,
		ctx: ctx,
		devops: devops,
		member: member,
	}
}

// Execute executes the request
//  @return ApiListResult
func (a *DevOpsProjectRoleAPIService) RetrieveDevOpsProjectMemberRoleTemplatesExecute(r ApiRetrieveDevOpsProjectMemberRoleTemplatesRequest) (*ApiListResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiListResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevOpsProjectRoleAPIService.RetrieveDevOpsProjectMemberRoleTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/iam.kubesphere.io/v1alpha2/devops/{devops}/members/{member}/roles"
	localVarPath = strings.Replace(localVarPath, "{"+"devops"+"}", url.PathEscape(parameterValueToString(r.devops, "devops")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member"+"}", url.PathEscape(parameterValueToString(r.member, "member")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDevOpsNamespaceRoleRequest struct {
	ctx context.Context
	ApiService *DevOpsProjectRoleAPIService
	devops string
	role string
	body *V1Role
}

func (r ApiUpdateDevOpsNamespaceRoleRequest) Body(body V1Role) ApiUpdateDevOpsNamespaceRoleRequest {
	r.body = &body
	return r
}

func (r ApiUpdateDevOpsNamespaceRoleRequest) Execute() (*V1Role, *http.Response, error) {
	return r.ApiService.UpdateDevOpsNamespaceRoleExecute(r)
}

/*
UpdateDevOpsNamespaceRole Update devops project role.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param devops devops project name
 @param role role name
 @return ApiUpdateDevOpsNamespaceRoleRequest
*/
func (a *DevOpsProjectRoleAPIService) UpdateDevOpsNamespaceRole(ctx context.Context, devops string, role string) ApiUpdateDevOpsNamespaceRoleRequest {
	return ApiUpdateDevOpsNamespaceRoleRequest{
		ApiService: a,
		ctx: ctx,
		devops: devops,
		role: role,
	}
}

// Execute executes the request
//  @return V1Role
func (a *DevOpsProjectRoleAPIService) UpdateDevOpsNamespaceRoleExecute(r ApiUpdateDevOpsNamespaceRoleRequest) (*V1Role, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1Role
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevOpsProjectRoleAPIService.UpdateDevOpsNamespaceRole")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/iam.kubesphere.io/v1alpha2/devops/{devops}/roles/{role}"
	localVarPath = strings.Replace(localVarPath, "{"+"devops"+"}", url.PathEscape(parameterValueToString(r.devops, "devops")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role"+"}", url.PathEscape(parameterValueToString(r.role, "role")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
