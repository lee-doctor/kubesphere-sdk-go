/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1alpha3MultiBranchPipeline type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha3MultiBranchPipeline{}

// V1alpha3MultiBranchPipeline struct for V1alpha3MultiBranchPipeline
type V1alpha3MultiBranchPipeline struct {
	BitbucketServerSource *V1alpha3BitbucketServerSource `json:"bitbucket_server_source,omitempty"`
	// description of pipeline
	Description *string `json:"description,omitempty"`
	Discarder *V1alpha3DiscarderProperty `json:"discarder,omitempty"`
	GitSource *V1alpha3GitSource `json:"git_source,omitempty"`
	GithubSource *V1alpha3GithubSource `json:"github_source,omitempty"`
	GitlabSource *V1alpha3GitlabSource `json:"gitlab_source,omitempty"`
	MultibranchJobTrigger *V1alpha3MultiBranchJobTrigger `json:"multibranch_job_trigger,omitempty"`
	// name of pipeline
	Name string `json:"name"`
	// script path in scm
	ScriptPath string `json:"script_path"`
	SingleSvnSource *V1alpha3SingleSvnSource `json:"single_svn_source,omitempty"`
	// type of scm, such as github/git/svn
	SourceType string `json:"source_type"`
	SvnSource *V1alpha3SvnSource `json:"svn_source,omitempty"`
	TimerTrigger *V1alpha3TimerTrigger `json:"timer_trigger,omitempty"`
}

type _V1alpha3MultiBranchPipeline V1alpha3MultiBranchPipeline

// NewV1alpha3MultiBranchPipeline instantiates a new V1alpha3MultiBranchPipeline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha3MultiBranchPipeline(name string, scriptPath string, sourceType string) *V1alpha3MultiBranchPipeline {
	this := V1alpha3MultiBranchPipeline{}
	this.Name = name
	this.ScriptPath = scriptPath
	this.SourceType = sourceType
	return &this
}

// NewV1alpha3MultiBranchPipelineWithDefaults instantiates a new V1alpha3MultiBranchPipeline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha3MultiBranchPipelineWithDefaults() *V1alpha3MultiBranchPipeline {
	this := V1alpha3MultiBranchPipeline{}
	return &this
}

// GetBitbucketServerSource returns the BitbucketServerSource field value if set, zero value otherwise.
func (o *V1alpha3MultiBranchPipeline) GetBitbucketServerSource() V1alpha3BitbucketServerSource {
	if o == nil || IsNil(o.BitbucketServerSource) {
		var ret V1alpha3BitbucketServerSource
		return ret
	}
	return *o.BitbucketServerSource
}

// GetBitbucketServerSourceOk returns a tuple with the BitbucketServerSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3MultiBranchPipeline) GetBitbucketServerSourceOk() (*V1alpha3BitbucketServerSource, bool) {
	if o == nil || IsNil(o.BitbucketServerSource) {
		return nil, false
	}
	return o.BitbucketServerSource, true
}

// HasBitbucketServerSource returns a boolean if a field has been set.
func (o *V1alpha3MultiBranchPipeline) HasBitbucketServerSource() bool {
	if o != nil && !IsNil(o.BitbucketServerSource) {
		return true
	}

	return false
}

// SetBitbucketServerSource gets a reference to the given V1alpha3BitbucketServerSource and assigns it to the BitbucketServerSource field.
func (o *V1alpha3MultiBranchPipeline) SetBitbucketServerSource(v V1alpha3BitbucketServerSource) {
	o.BitbucketServerSource = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *V1alpha3MultiBranchPipeline) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3MultiBranchPipeline) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *V1alpha3MultiBranchPipeline) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *V1alpha3MultiBranchPipeline) SetDescription(v string) {
	o.Description = &v
}

// GetDiscarder returns the Discarder field value if set, zero value otherwise.
func (o *V1alpha3MultiBranchPipeline) GetDiscarder() V1alpha3DiscarderProperty {
	if o == nil || IsNil(o.Discarder) {
		var ret V1alpha3DiscarderProperty
		return ret
	}
	return *o.Discarder
}

// GetDiscarderOk returns a tuple with the Discarder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3MultiBranchPipeline) GetDiscarderOk() (*V1alpha3DiscarderProperty, bool) {
	if o == nil || IsNil(o.Discarder) {
		return nil, false
	}
	return o.Discarder, true
}

// HasDiscarder returns a boolean if a field has been set.
func (o *V1alpha3MultiBranchPipeline) HasDiscarder() bool {
	if o != nil && !IsNil(o.Discarder) {
		return true
	}

	return false
}

// SetDiscarder gets a reference to the given V1alpha3DiscarderProperty and assigns it to the Discarder field.
func (o *V1alpha3MultiBranchPipeline) SetDiscarder(v V1alpha3DiscarderProperty) {
	o.Discarder = &v
}

// GetGitSource returns the GitSource field value if set, zero value otherwise.
func (o *V1alpha3MultiBranchPipeline) GetGitSource() V1alpha3GitSource {
	if o == nil || IsNil(o.GitSource) {
		var ret V1alpha3GitSource
		return ret
	}
	return *o.GitSource
}

// GetGitSourceOk returns a tuple with the GitSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3MultiBranchPipeline) GetGitSourceOk() (*V1alpha3GitSource, bool) {
	if o == nil || IsNil(o.GitSource) {
		return nil, false
	}
	return o.GitSource, true
}

// HasGitSource returns a boolean if a field has been set.
func (o *V1alpha3MultiBranchPipeline) HasGitSource() bool {
	if o != nil && !IsNil(o.GitSource) {
		return true
	}

	return false
}

// SetGitSource gets a reference to the given V1alpha3GitSource and assigns it to the GitSource field.
func (o *V1alpha3MultiBranchPipeline) SetGitSource(v V1alpha3GitSource) {
	o.GitSource = &v
}

// GetGithubSource returns the GithubSource field value if set, zero value otherwise.
func (o *V1alpha3MultiBranchPipeline) GetGithubSource() V1alpha3GithubSource {
	if o == nil || IsNil(o.GithubSource) {
		var ret V1alpha3GithubSource
		return ret
	}
	return *o.GithubSource
}

// GetGithubSourceOk returns a tuple with the GithubSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3MultiBranchPipeline) GetGithubSourceOk() (*V1alpha3GithubSource, bool) {
	if o == nil || IsNil(o.GithubSource) {
		return nil, false
	}
	return o.GithubSource, true
}

// HasGithubSource returns a boolean if a field has been set.
func (o *V1alpha3MultiBranchPipeline) HasGithubSource() bool {
	if o != nil && !IsNil(o.GithubSource) {
		return true
	}

	return false
}

// SetGithubSource gets a reference to the given V1alpha3GithubSource and assigns it to the GithubSource field.
func (o *V1alpha3MultiBranchPipeline) SetGithubSource(v V1alpha3GithubSource) {
	o.GithubSource = &v
}

// GetGitlabSource returns the GitlabSource field value if set, zero value otherwise.
func (o *V1alpha3MultiBranchPipeline) GetGitlabSource() V1alpha3GitlabSource {
	if o == nil || IsNil(o.GitlabSource) {
		var ret V1alpha3GitlabSource
		return ret
	}
	return *o.GitlabSource
}

// GetGitlabSourceOk returns a tuple with the GitlabSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3MultiBranchPipeline) GetGitlabSourceOk() (*V1alpha3GitlabSource, bool) {
	if o == nil || IsNil(o.GitlabSource) {
		return nil, false
	}
	return o.GitlabSource, true
}

// HasGitlabSource returns a boolean if a field has been set.
func (o *V1alpha3MultiBranchPipeline) HasGitlabSource() bool {
	if o != nil && !IsNil(o.GitlabSource) {
		return true
	}

	return false
}

// SetGitlabSource gets a reference to the given V1alpha3GitlabSource and assigns it to the GitlabSource field.
func (o *V1alpha3MultiBranchPipeline) SetGitlabSource(v V1alpha3GitlabSource) {
	o.GitlabSource = &v
}

// GetMultibranchJobTrigger returns the MultibranchJobTrigger field value if set, zero value otherwise.
func (o *V1alpha3MultiBranchPipeline) GetMultibranchJobTrigger() V1alpha3MultiBranchJobTrigger {
	if o == nil || IsNil(o.MultibranchJobTrigger) {
		var ret V1alpha3MultiBranchJobTrigger
		return ret
	}
	return *o.MultibranchJobTrigger
}

// GetMultibranchJobTriggerOk returns a tuple with the MultibranchJobTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3MultiBranchPipeline) GetMultibranchJobTriggerOk() (*V1alpha3MultiBranchJobTrigger, bool) {
	if o == nil || IsNil(o.MultibranchJobTrigger) {
		return nil, false
	}
	return o.MultibranchJobTrigger, true
}

// HasMultibranchJobTrigger returns a boolean if a field has been set.
func (o *V1alpha3MultiBranchPipeline) HasMultibranchJobTrigger() bool {
	if o != nil && !IsNil(o.MultibranchJobTrigger) {
		return true
	}

	return false
}

// SetMultibranchJobTrigger gets a reference to the given V1alpha3MultiBranchJobTrigger and assigns it to the MultibranchJobTrigger field.
func (o *V1alpha3MultiBranchPipeline) SetMultibranchJobTrigger(v V1alpha3MultiBranchJobTrigger) {
	o.MultibranchJobTrigger = &v
}

// GetName returns the Name field value
func (o *V1alpha3MultiBranchPipeline) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *V1alpha3MultiBranchPipeline) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *V1alpha3MultiBranchPipeline) SetName(v string) {
	o.Name = v
}

// GetScriptPath returns the ScriptPath field value
func (o *V1alpha3MultiBranchPipeline) GetScriptPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScriptPath
}

// GetScriptPathOk returns a tuple with the ScriptPath field value
// and a boolean to check if the value has been set.
func (o *V1alpha3MultiBranchPipeline) GetScriptPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScriptPath, true
}

// SetScriptPath sets field value
func (o *V1alpha3MultiBranchPipeline) SetScriptPath(v string) {
	o.ScriptPath = v
}

// GetSingleSvnSource returns the SingleSvnSource field value if set, zero value otherwise.
func (o *V1alpha3MultiBranchPipeline) GetSingleSvnSource() V1alpha3SingleSvnSource {
	if o == nil || IsNil(o.SingleSvnSource) {
		var ret V1alpha3SingleSvnSource
		return ret
	}
	return *o.SingleSvnSource
}

// GetSingleSvnSourceOk returns a tuple with the SingleSvnSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3MultiBranchPipeline) GetSingleSvnSourceOk() (*V1alpha3SingleSvnSource, bool) {
	if o == nil || IsNil(o.SingleSvnSource) {
		return nil, false
	}
	return o.SingleSvnSource, true
}

// HasSingleSvnSource returns a boolean if a field has been set.
func (o *V1alpha3MultiBranchPipeline) HasSingleSvnSource() bool {
	if o != nil && !IsNil(o.SingleSvnSource) {
		return true
	}

	return false
}

// SetSingleSvnSource gets a reference to the given V1alpha3SingleSvnSource and assigns it to the SingleSvnSource field.
func (o *V1alpha3MultiBranchPipeline) SetSingleSvnSource(v V1alpha3SingleSvnSource) {
	o.SingleSvnSource = &v
}

// GetSourceType returns the SourceType field value
func (o *V1alpha3MultiBranchPipeline) GetSourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *V1alpha3MultiBranchPipeline) GetSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *V1alpha3MultiBranchPipeline) SetSourceType(v string) {
	o.SourceType = v
}

// GetSvnSource returns the SvnSource field value if set, zero value otherwise.
func (o *V1alpha3MultiBranchPipeline) GetSvnSource() V1alpha3SvnSource {
	if o == nil || IsNil(o.SvnSource) {
		var ret V1alpha3SvnSource
		return ret
	}
	return *o.SvnSource
}

// GetSvnSourceOk returns a tuple with the SvnSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3MultiBranchPipeline) GetSvnSourceOk() (*V1alpha3SvnSource, bool) {
	if o == nil || IsNil(o.SvnSource) {
		return nil, false
	}
	return o.SvnSource, true
}

// HasSvnSource returns a boolean if a field has been set.
func (o *V1alpha3MultiBranchPipeline) HasSvnSource() bool {
	if o != nil && !IsNil(o.SvnSource) {
		return true
	}

	return false
}

// SetSvnSource gets a reference to the given V1alpha3SvnSource and assigns it to the SvnSource field.
func (o *V1alpha3MultiBranchPipeline) SetSvnSource(v V1alpha3SvnSource) {
	o.SvnSource = &v
}

// GetTimerTrigger returns the TimerTrigger field value if set, zero value otherwise.
func (o *V1alpha3MultiBranchPipeline) GetTimerTrigger() V1alpha3TimerTrigger {
	if o == nil || IsNil(o.TimerTrigger) {
		var ret V1alpha3TimerTrigger
		return ret
	}
	return *o.TimerTrigger
}

// GetTimerTriggerOk returns a tuple with the TimerTrigger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3MultiBranchPipeline) GetTimerTriggerOk() (*V1alpha3TimerTrigger, bool) {
	if o == nil || IsNil(o.TimerTrigger) {
		return nil, false
	}
	return o.TimerTrigger, true
}

// HasTimerTrigger returns a boolean if a field has been set.
func (o *V1alpha3MultiBranchPipeline) HasTimerTrigger() bool {
	if o != nil && !IsNil(o.TimerTrigger) {
		return true
	}

	return false
}

// SetTimerTrigger gets a reference to the given V1alpha3TimerTrigger and assigns it to the TimerTrigger field.
func (o *V1alpha3MultiBranchPipeline) SetTimerTrigger(v V1alpha3TimerTrigger) {
	o.TimerTrigger = &v
}

func (o V1alpha3MultiBranchPipeline) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha3MultiBranchPipeline) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BitbucketServerSource) {
		toSerialize["bitbucket_server_source"] = o.BitbucketServerSource
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Discarder) {
		toSerialize["discarder"] = o.Discarder
	}
	if !IsNil(o.GitSource) {
		toSerialize["git_source"] = o.GitSource
	}
	if !IsNil(o.GithubSource) {
		toSerialize["github_source"] = o.GithubSource
	}
	if !IsNil(o.GitlabSource) {
		toSerialize["gitlab_source"] = o.GitlabSource
	}
	if !IsNil(o.MultibranchJobTrigger) {
		toSerialize["multibranch_job_trigger"] = o.MultibranchJobTrigger
	}
	toSerialize["name"] = o.Name
	toSerialize["script_path"] = o.ScriptPath
	if !IsNil(o.SingleSvnSource) {
		toSerialize["single_svn_source"] = o.SingleSvnSource
	}
	toSerialize["source_type"] = o.SourceType
	if !IsNil(o.SvnSource) {
		toSerialize["svn_source"] = o.SvnSource
	}
	if !IsNil(o.TimerTrigger) {
		toSerialize["timer_trigger"] = o.TimerTrigger
	}
	return toSerialize, nil
}

func (o *V1alpha3MultiBranchPipeline) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"script_path",
		"source_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1alpha3MultiBranchPipeline := _V1alpha3MultiBranchPipeline{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1alpha3MultiBranchPipeline)

	if err != nil {
		return err
	}

	*o = V1alpha3MultiBranchPipeline(varV1alpha3MultiBranchPipeline)

	return err
}

type NullableV1alpha3MultiBranchPipeline struct {
	value *V1alpha3MultiBranchPipeline
	isSet bool
}

func (v NullableV1alpha3MultiBranchPipeline) Get() *V1alpha3MultiBranchPipeline {
	return v.value
}

func (v *NullableV1alpha3MultiBranchPipeline) Set(val *V1alpha3MultiBranchPipeline) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha3MultiBranchPipeline) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha3MultiBranchPipeline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha3MultiBranchPipeline(val *V1alpha3MultiBranchPipeline) *NullableV1alpha3MultiBranchPipeline {
	return &NullableV1alpha3MultiBranchPipeline{value: val, isSet: true}
}

func (v NullableV1alpha3MultiBranchPipeline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha3MultiBranchPipeline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


