/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1ClaimSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ClaimSource{}

// V1ClaimSource ClaimSource describes a reference to a ResourceClaim.  Exactly one of these fields should be set.  Consumers of this type must treat an empty object as if it has an unknown value.
type V1ClaimSource struct {
	// ResourceClaimName is the name of a ResourceClaim object in the same namespace as this pod.
	ResourceClaimName *string `json:"resourceClaimName,omitempty"`
	// ResourceClaimTemplateName is the name of a ResourceClaimTemplate object in the same namespace as this pod.  The template will be used to create a new ResourceClaim, which will be bound to this pod. When this pod is deleted, the ResourceClaim will also be deleted. The pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in pod.status.resourceClaimStatuses.  This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
	ResourceClaimTemplateName *string `json:"resourceClaimTemplateName,omitempty"`
}

// NewV1ClaimSource instantiates a new V1ClaimSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ClaimSource() *V1ClaimSource {
	this := V1ClaimSource{}
	return &this
}

// NewV1ClaimSourceWithDefaults instantiates a new V1ClaimSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ClaimSourceWithDefaults() *V1ClaimSource {
	this := V1ClaimSource{}
	return &this
}

// GetResourceClaimName returns the ResourceClaimName field value if set, zero value otherwise.
func (o *V1ClaimSource) GetResourceClaimName() string {
	if o == nil || IsNil(o.ResourceClaimName) {
		var ret string
		return ret
	}
	return *o.ResourceClaimName
}

// GetResourceClaimNameOk returns a tuple with the ResourceClaimName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ClaimSource) GetResourceClaimNameOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceClaimName) {
		return nil, false
	}
	return o.ResourceClaimName, true
}

// HasResourceClaimName returns a boolean if a field has been set.
func (o *V1ClaimSource) HasResourceClaimName() bool {
	if o != nil && !IsNil(o.ResourceClaimName) {
		return true
	}

	return false
}

// SetResourceClaimName gets a reference to the given string and assigns it to the ResourceClaimName field.
func (o *V1ClaimSource) SetResourceClaimName(v string) {
	o.ResourceClaimName = &v
}

// GetResourceClaimTemplateName returns the ResourceClaimTemplateName field value if set, zero value otherwise.
func (o *V1ClaimSource) GetResourceClaimTemplateName() string {
	if o == nil || IsNil(o.ResourceClaimTemplateName) {
		var ret string
		return ret
	}
	return *o.ResourceClaimTemplateName
}

// GetResourceClaimTemplateNameOk returns a tuple with the ResourceClaimTemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ClaimSource) GetResourceClaimTemplateNameOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceClaimTemplateName) {
		return nil, false
	}
	return o.ResourceClaimTemplateName, true
}

// HasResourceClaimTemplateName returns a boolean if a field has been set.
func (o *V1ClaimSource) HasResourceClaimTemplateName() bool {
	if o != nil && !IsNil(o.ResourceClaimTemplateName) {
		return true
	}

	return false
}

// SetResourceClaimTemplateName gets a reference to the given string and assigns it to the ResourceClaimTemplateName field.
func (o *V1ClaimSource) SetResourceClaimTemplateName(v string) {
	o.ResourceClaimTemplateName = &v
}

func (o V1ClaimSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ClaimSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ResourceClaimName) {
		toSerialize["resourceClaimName"] = o.ResourceClaimName
	}
	if !IsNil(o.ResourceClaimTemplateName) {
		toSerialize["resourceClaimTemplateName"] = o.ResourceClaimTemplateName
	}
	return toSerialize, nil
}

type NullableV1ClaimSource struct {
	value *V1ClaimSource
	isSet bool
}

func (v NullableV1ClaimSource) Get() *V1ClaimSource {
	return v.value
}

func (v *NullableV1ClaimSource) Set(val *V1ClaimSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ClaimSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ClaimSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ClaimSource(val *V1ClaimSource) *NullableV1ClaimSource {
	return &NullableV1ClaimSource{value: val, isSet: true}
}

func (v NullableV1ClaimSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ClaimSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


