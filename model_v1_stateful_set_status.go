/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1StatefulSetStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1StatefulSetStatus{}

// V1StatefulSetStatus StatefulSetStatus represents the current state of a StatefulSet.
type V1StatefulSetStatus struct {
	// Total number of available pods (ready for at least minReadySeconds) targeted by this statefulset.
	AvailableReplicas int32 `json:"availableReplicas"`
	// collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
	CollisionCount *int32 `json:"collisionCount,omitempty"`
	// Represents the latest available observations of a statefulset's current state.
	Conditions []V1StatefulSetCondition `json:"conditions,omitempty"`
	// currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
	CurrentReplicas *int32 `json:"currentReplicas,omitempty"`
	// currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
	CurrentRevision *string `json:"currentRevision,omitempty"`
	// observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`
	// readyReplicas is the number of pods created for this StatefulSet with a Ready Condition.
	ReadyReplicas *int32 `json:"readyReplicas,omitempty"`
	// replicas is the number of Pods created by the StatefulSet controller.
	Replicas int32 `json:"replicas"`
	// updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
	UpdateRevision *string `json:"updateRevision,omitempty"`
	// updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
	UpdatedReplicas *int32 `json:"updatedReplicas,omitempty"`
}

type _V1StatefulSetStatus V1StatefulSetStatus

// NewV1StatefulSetStatus instantiates a new V1StatefulSetStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1StatefulSetStatus(availableReplicas int32, replicas int32) *V1StatefulSetStatus {
	this := V1StatefulSetStatus{}
	this.AvailableReplicas = availableReplicas
	this.Replicas = replicas
	return &this
}

// NewV1StatefulSetStatusWithDefaults instantiates a new V1StatefulSetStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1StatefulSetStatusWithDefaults() *V1StatefulSetStatus {
	this := V1StatefulSetStatus{}
	return &this
}

// GetAvailableReplicas returns the AvailableReplicas field value
func (o *V1StatefulSetStatus) GetAvailableReplicas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AvailableReplicas
}

// GetAvailableReplicasOk returns a tuple with the AvailableReplicas field value
// and a boolean to check if the value has been set.
func (o *V1StatefulSetStatus) GetAvailableReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailableReplicas, true
}

// SetAvailableReplicas sets field value
func (o *V1StatefulSetStatus) SetAvailableReplicas(v int32) {
	o.AvailableReplicas = v
}

// GetCollisionCount returns the CollisionCount field value if set, zero value otherwise.
func (o *V1StatefulSetStatus) GetCollisionCount() int32 {
	if o == nil || IsNil(o.CollisionCount) {
		var ret int32
		return ret
	}
	return *o.CollisionCount
}

// GetCollisionCountOk returns a tuple with the CollisionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StatefulSetStatus) GetCollisionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CollisionCount) {
		return nil, false
	}
	return o.CollisionCount, true
}

// HasCollisionCount returns a boolean if a field has been set.
func (o *V1StatefulSetStatus) HasCollisionCount() bool {
	if o != nil && !IsNil(o.CollisionCount) {
		return true
	}

	return false
}

// SetCollisionCount gets a reference to the given int32 and assigns it to the CollisionCount field.
func (o *V1StatefulSetStatus) SetCollisionCount(v int32) {
	o.CollisionCount = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *V1StatefulSetStatus) GetConditions() []V1StatefulSetCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []V1StatefulSetCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StatefulSetStatus) GetConditionsOk() ([]V1StatefulSetCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *V1StatefulSetStatus) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []V1StatefulSetCondition and assigns it to the Conditions field.
func (o *V1StatefulSetStatus) SetConditions(v []V1StatefulSetCondition) {
	o.Conditions = v
}

// GetCurrentReplicas returns the CurrentReplicas field value if set, zero value otherwise.
func (o *V1StatefulSetStatus) GetCurrentReplicas() int32 {
	if o == nil || IsNil(o.CurrentReplicas) {
		var ret int32
		return ret
	}
	return *o.CurrentReplicas
}

// GetCurrentReplicasOk returns a tuple with the CurrentReplicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StatefulSetStatus) GetCurrentReplicasOk() (*int32, bool) {
	if o == nil || IsNil(o.CurrentReplicas) {
		return nil, false
	}
	return o.CurrentReplicas, true
}

// HasCurrentReplicas returns a boolean if a field has been set.
func (o *V1StatefulSetStatus) HasCurrentReplicas() bool {
	if o != nil && !IsNil(o.CurrentReplicas) {
		return true
	}

	return false
}

// SetCurrentReplicas gets a reference to the given int32 and assigns it to the CurrentReplicas field.
func (o *V1StatefulSetStatus) SetCurrentReplicas(v int32) {
	o.CurrentReplicas = &v
}

// GetCurrentRevision returns the CurrentRevision field value if set, zero value otherwise.
func (o *V1StatefulSetStatus) GetCurrentRevision() string {
	if o == nil || IsNil(o.CurrentRevision) {
		var ret string
		return ret
	}
	return *o.CurrentRevision
}

// GetCurrentRevisionOk returns a tuple with the CurrentRevision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StatefulSetStatus) GetCurrentRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentRevision) {
		return nil, false
	}
	return o.CurrentRevision, true
}

// HasCurrentRevision returns a boolean if a field has been set.
func (o *V1StatefulSetStatus) HasCurrentRevision() bool {
	if o != nil && !IsNil(o.CurrentRevision) {
		return true
	}

	return false
}

// SetCurrentRevision gets a reference to the given string and assigns it to the CurrentRevision field.
func (o *V1StatefulSetStatus) SetCurrentRevision(v string) {
	o.CurrentRevision = &v
}

// GetObservedGeneration returns the ObservedGeneration field value if set, zero value otherwise.
func (o *V1StatefulSetStatus) GetObservedGeneration() int64 {
	if o == nil || IsNil(o.ObservedGeneration) {
		var ret int64
		return ret
	}
	return *o.ObservedGeneration
}

// GetObservedGenerationOk returns a tuple with the ObservedGeneration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StatefulSetStatus) GetObservedGenerationOk() (*int64, bool) {
	if o == nil || IsNil(o.ObservedGeneration) {
		return nil, false
	}
	return o.ObservedGeneration, true
}

// HasObservedGeneration returns a boolean if a field has been set.
func (o *V1StatefulSetStatus) HasObservedGeneration() bool {
	if o != nil && !IsNil(o.ObservedGeneration) {
		return true
	}

	return false
}

// SetObservedGeneration gets a reference to the given int64 and assigns it to the ObservedGeneration field.
func (o *V1StatefulSetStatus) SetObservedGeneration(v int64) {
	o.ObservedGeneration = &v
}

// GetReadyReplicas returns the ReadyReplicas field value if set, zero value otherwise.
func (o *V1StatefulSetStatus) GetReadyReplicas() int32 {
	if o == nil || IsNil(o.ReadyReplicas) {
		var ret int32
		return ret
	}
	return *o.ReadyReplicas
}

// GetReadyReplicasOk returns a tuple with the ReadyReplicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StatefulSetStatus) GetReadyReplicasOk() (*int32, bool) {
	if o == nil || IsNil(o.ReadyReplicas) {
		return nil, false
	}
	return o.ReadyReplicas, true
}

// HasReadyReplicas returns a boolean if a field has been set.
func (o *V1StatefulSetStatus) HasReadyReplicas() bool {
	if o != nil && !IsNil(o.ReadyReplicas) {
		return true
	}

	return false
}

// SetReadyReplicas gets a reference to the given int32 and assigns it to the ReadyReplicas field.
func (o *V1StatefulSetStatus) SetReadyReplicas(v int32) {
	o.ReadyReplicas = &v
}

// GetReplicas returns the Replicas field value
func (o *V1StatefulSetStatus) GetReplicas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value
// and a boolean to check if the value has been set.
func (o *V1StatefulSetStatus) GetReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Replicas, true
}

// SetReplicas sets field value
func (o *V1StatefulSetStatus) SetReplicas(v int32) {
	o.Replicas = v
}

// GetUpdateRevision returns the UpdateRevision field value if set, zero value otherwise.
func (o *V1StatefulSetStatus) GetUpdateRevision() string {
	if o == nil || IsNil(o.UpdateRevision) {
		var ret string
		return ret
	}
	return *o.UpdateRevision
}

// GetUpdateRevisionOk returns a tuple with the UpdateRevision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StatefulSetStatus) GetUpdateRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateRevision) {
		return nil, false
	}
	return o.UpdateRevision, true
}

// HasUpdateRevision returns a boolean if a field has been set.
func (o *V1StatefulSetStatus) HasUpdateRevision() bool {
	if o != nil && !IsNil(o.UpdateRevision) {
		return true
	}

	return false
}

// SetUpdateRevision gets a reference to the given string and assigns it to the UpdateRevision field.
func (o *V1StatefulSetStatus) SetUpdateRevision(v string) {
	o.UpdateRevision = &v
}

// GetUpdatedReplicas returns the UpdatedReplicas field value if set, zero value otherwise.
func (o *V1StatefulSetStatus) GetUpdatedReplicas() int32 {
	if o == nil || IsNil(o.UpdatedReplicas) {
		var ret int32
		return ret
	}
	return *o.UpdatedReplicas
}

// GetUpdatedReplicasOk returns a tuple with the UpdatedReplicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1StatefulSetStatus) GetUpdatedReplicasOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedReplicas) {
		return nil, false
	}
	return o.UpdatedReplicas, true
}

// HasUpdatedReplicas returns a boolean if a field has been set.
func (o *V1StatefulSetStatus) HasUpdatedReplicas() bool {
	if o != nil && !IsNil(o.UpdatedReplicas) {
		return true
	}

	return false
}

// SetUpdatedReplicas gets a reference to the given int32 and assigns it to the UpdatedReplicas field.
func (o *V1StatefulSetStatus) SetUpdatedReplicas(v int32) {
	o.UpdatedReplicas = &v
}

func (o V1StatefulSetStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1StatefulSetStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["availableReplicas"] = o.AvailableReplicas
	if !IsNil(o.CollisionCount) {
		toSerialize["collisionCount"] = o.CollisionCount
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.CurrentReplicas) {
		toSerialize["currentReplicas"] = o.CurrentReplicas
	}
	if !IsNil(o.CurrentRevision) {
		toSerialize["currentRevision"] = o.CurrentRevision
	}
	if !IsNil(o.ObservedGeneration) {
		toSerialize["observedGeneration"] = o.ObservedGeneration
	}
	if !IsNil(o.ReadyReplicas) {
		toSerialize["readyReplicas"] = o.ReadyReplicas
	}
	toSerialize["replicas"] = o.Replicas
	if !IsNil(o.UpdateRevision) {
		toSerialize["updateRevision"] = o.UpdateRevision
	}
	if !IsNil(o.UpdatedReplicas) {
		toSerialize["updatedReplicas"] = o.UpdatedReplicas
	}
	return toSerialize, nil
}

func (o *V1StatefulSetStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"availableReplicas",
		"replicas",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1StatefulSetStatus := _V1StatefulSetStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1StatefulSetStatus)

	if err != nil {
		return err
	}

	*o = V1StatefulSetStatus(varV1StatefulSetStatus)

	return err
}

type NullableV1StatefulSetStatus struct {
	value *V1StatefulSetStatus
	isSet bool
}

func (v NullableV1StatefulSetStatus) Get() *V1StatefulSetStatus {
	return v.value
}

func (v *NullableV1StatefulSetStatus) Set(val *V1StatefulSetStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableV1StatefulSetStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableV1StatefulSetStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1StatefulSetStatus(val *V1StatefulSetStatus) *NullableV1StatefulSetStatus {
	return &NullableV1StatefulSetStatus{value: val, isSet: true}
}

func (v NullableV1StatefulSetStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1StatefulSetStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


