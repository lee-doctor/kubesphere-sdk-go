/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1alpha2IngressClassScopeSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha2IngressClassScopeSpec{}

// V1alpha2IngressClassScopeSpec struct for V1alpha2IngressClassScopeSpec
type V1alpha2IngressClassScopeSpec struct {
	IngressClass *V1alpha2IngressClass `json:"ingressClass,omitempty"`
	Scope *V1alpha2Scope `json:"scope,omitempty"`
}

// NewV1alpha2IngressClassScopeSpec instantiates a new V1alpha2IngressClassScopeSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha2IngressClassScopeSpec() *V1alpha2IngressClassScopeSpec {
	this := V1alpha2IngressClassScopeSpec{}
	return &this
}

// NewV1alpha2IngressClassScopeSpecWithDefaults instantiates a new V1alpha2IngressClassScopeSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha2IngressClassScopeSpecWithDefaults() *V1alpha2IngressClassScopeSpec {
	this := V1alpha2IngressClassScopeSpec{}
	return &this
}

// GetIngressClass returns the IngressClass field value if set, zero value otherwise.
func (o *V1alpha2IngressClassScopeSpec) GetIngressClass() V1alpha2IngressClass {
	if o == nil || IsNil(o.IngressClass) {
		var ret V1alpha2IngressClass
		return ret
	}
	return *o.IngressClass
}

// GetIngressClassOk returns a tuple with the IngressClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2IngressClassScopeSpec) GetIngressClassOk() (*V1alpha2IngressClass, bool) {
	if o == nil || IsNil(o.IngressClass) {
		return nil, false
	}
	return o.IngressClass, true
}

// HasIngressClass returns a boolean if a field has been set.
func (o *V1alpha2IngressClassScopeSpec) HasIngressClass() bool {
	if o != nil && !IsNil(o.IngressClass) {
		return true
	}

	return false
}

// SetIngressClass gets a reference to the given V1alpha2IngressClass and assigns it to the IngressClass field.
func (o *V1alpha2IngressClassScopeSpec) SetIngressClass(v V1alpha2IngressClass) {
	o.IngressClass = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *V1alpha2IngressClassScopeSpec) GetScope() V1alpha2Scope {
	if o == nil || IsNil(o.Scope) {
		var ret V1alpha2Scope
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2IngressClassScopeSpec) GetScopeOk() (*V1alpha2Scope, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *V1alpha2IngressClassScopeSpec) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given V1alpha2Scope and assigns it to the Scope field.
func (o *V1alpha2IngressClassScopeSpec) SetScope(v V1alpha2Scope) {
	o.Scope = &v
}

func (o V1alpha2IngressClassScopeSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha2IngressClassScopeSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IngressClass) {
		toSerialize["ingressClass"] = o.IngressClass
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	return toSerialize, nil
}

type NullableV1alpha2IngressClassScopeSpec struct {
	value *V1alpha2IngressClassScopeSpec
	isSet bool
}

func (v NullableV1alpha2IngressClassScopeSpec) Get() *V1alpha2IngressClassScopeSpec {
	return v.value
}

func (v *NullableV1alpha2IngressClassScopeSpec) Set(val *V1alpha2IngressClassScopeSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha2IngressClassScopeSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha2IngressClassScopeSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha2IngressClassScopeSpec(val *V1alpha2IngressClassScopeSpec) *NullableV1alpha2IngressClassScopeSpec {
	return &NullableV1alpha2IngressClassScopeSpec{value: val, isSet: true}
}

func (v NullableV1alpha2IngressClassScopeSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha2IngressClassScopeSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


