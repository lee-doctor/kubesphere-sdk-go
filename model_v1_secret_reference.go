/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1SecretReference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1SecretReference{}

// V1SecretReference SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
type V1SecretReference struct {
	// Name is unique within a namespace to reference a secret resource.
	Name *string `json:"name,omitempty"`
	// Namespace defines the space within which the secret name must be unique.
	Namespace *string `json:"namespace,omitempty"`
}

// NewV1SecretReference instantiates a new V1SecretReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1SecretReference() *V1SecretReference {
	this := V1SecretReference{}
	return &this
}

// NewV1SecretReferenceWithDefaults instantiates a new V1SecretReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1SecretReferenceWithDefaults() *V1SecretReference {
	this := V1SecretReference{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1SecretReference) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SecretReference) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1SecretReference) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1SecretReference) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *V1SecretReference) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SecretReference) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *V1SecretReference) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *V1SecretReference) SetNamespace(v string) {
	o.Namespace = &v
}

func (o V1SecretReference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1SecretReference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	return toSerialize, nil
}

type NullableV1SecretReference struct {
	value *V1SecretReference
	isSet bool
}

func (v NullableV1SecretReference) Get() *V1SecretReference {
	return v.value
}

func (v *NullableV1SecretReference) Set(val *V1SecretReference) {
	v.value = val
	v.isSet = true
}

func (v NullableV1SecretReference) IsSet() bool {
	return v.isSet
}

func (v *NullableV1SecretReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1SecretReference(val *V1SecretReference) *NullableV1SecretReference {
	return &NullableV1SecretReference{value: val, isSet: true}
}

func (v NullableV1SecretReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1SecretReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


