/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1QuobyteVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1QuobyteVolumeSource{}

// V1QuobyteVolumeSource Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
type V1QuobyteVolumeSource struct {
	// Group to map volume access to Default is no group
	Group *string `json:"group,omitempty"`
	// ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
	Registry string `json:"registry"`
	// Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
	Tenant *string `json:"tenant,omitempty"`
	// User to map volume access to Defaults to serivceaccount user
	User *string `json:"user,omitempty"`
	// Volume is a string that references an already created Quobyte volume by name.
	Volume string `json:"volume"`
}

type _V1QuobyteVolumeSource V1QuobyteVolumeSource

// NewV1QuobyteVolumeSource instantiates a new V1QuobyteVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1QuobyteVolumeSource(registry string, volume string) *V1QuobyteVolumeSource {
	this := V1QuobyteVolumeSource{}
	this.Registry = registry
	this.Volume = volume
	return &this
}

// NewV1QuobyteVolumeSourceWithDefaults instantiates a new V1QuobyteVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1QuobyteVolumeSourceWithDefaults() *V1QuobyteVolumeSource {
	this := V1QuobyteVolumeSource{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *V1QuobyteVolumeSource) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1QuobyteVolumeSource) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *V1QuobyteVolumeSource) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *V1QuobyteVolumeSource) SetGroup(v string) {
	o.Group = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *V1QuobyteVolumeSource) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1QuobyteVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *V1QuobyteVolumeSource) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *V1QuobyteVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetRegistry returns the Registry field value
func (o *V1QuobyteVolumeSource) GetRegistry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Registry
}

// GetRegistryOk returns a tuple with the Registry field value
// and a boolean to check if the value has been set.
func (o *V1QuobyteVolumeSource) GetRegistryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Registry, true
}

// SetRegistry sets field value
func (o *V1QuobyteVolumeSource) SetRegistry(v string) {
	o.Registry = v
}

// GetTenant returns the Tenant field value if set, zero value otherwise.
func (o *V1QuobyteVolumeSource) GetTenant() string {
	if o == nil || IsNil(o.Tenant) {
		var ret string
		return ret
	}
	return *o.Tenant
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1QuobyteVolumeSource) GetTenantOk() (*string, bool) {
	if o == nil || IsNil(o.Tenant) {
		return nil, false
	}
	return o.Tenant, true
}

// HasTenant returns a boolean if a field has been set.
func (o *V1QuobyteVolumeSource) HasTenant() bool {
	if o != nil && !IsNil(o.Tenant) {
		return true
	}

	return false
}

// SetTenant gets a reference to the given string and assigns it to the Tenant field.
func (o *V1QuobyteVolumeSource) SetTenant(v string) {
	o.Tenant = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *V1QuobyteVolumeSource) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1QuobyteVolumeSource) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *V1QuobyteVolumeSource) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *V1QuobyteVolumeSource) SetUser(v string) {
	o.User = &v
}

// GetVolume returns the Volume field value
func (o *V1QuobyteVolumeSource) GetVolume() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value
// and a boolean to check if the value has been set.
func (o *V1QuobyteVolumeSource) GetVolumeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Volume, true
}

// SetVolume sets field value
func (o *V1QuobyteVolumeSource) SetVolume(v string) {
	o.Volume = v
}

func (o V1QuobyteVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1QuobyteVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	toSerialize["registry"] = o.Registry
	if !IsNil(o.Tenant) {
		toSerialize["tenant"] = o.Tenant
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	toSerialize["volume"] = o.Volume
	return toSerialize, nil
}

func (o *V1QuobyteVolumeSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"registry",
		"volume",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1QuobyteVolumeSource := _V1QuobyteVolumeSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1QuobyteVolumeSource)

	if err != nil {
		return err
	}

	*o = V1QuobyteVolumeSource(varV1QuobyteVolumeSource)

	return err
}

type NullableV1QuobyteVolumeSource struct {
	value *V1QuobyteVolumeSource
	isSet bool
}

func (v NullableV1QuobyteVolumeSource) Get() *V1QuobyteVolumeSource {
	return v.value
}

func (v *NullableV1QuobyteVolumeSource) Set(val *V1QuobyteVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1QuobyteVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1QuobyteVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1QuobyteVolumeSource(val *V1QuobyteVolumeSource) *NullableV1QuobyteVolumeSource {
	return &NullableV1QuobyteVolumeSource{value: val, isSet: true}
}

func (v NullableV1QuobyteVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1QuobyteVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


