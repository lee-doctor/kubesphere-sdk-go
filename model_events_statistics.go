/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventsStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventsStatistics{}

// EventsStatistics struct for EventsStatistics
type EventsStatistics struct {
	// total number of events
	Events int64 `json:"events"`
	// total number of resources
	Resources int64 `json:"resources"`
}

type _EventsStatistics EventsStatistics

// NewEventsStatistics instantiates a new EventsStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsStatistics(events int64, resources int64) *EventsStatistics {
	this := EventsStatistics{}
	this.Events = events
	this.Resources = resources
	return &this
}

// NewEventsStatisticsWithDefaults instantiates a new EventsStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsStatisticsWithDefaults() *EventsStatistics {
	this := EventsStatistics{}
	return &this
}

// GetEvents returns the Events field value
func (o *EventsStatistics) GetEvents() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *EventsStatistics) GetEventsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Events, true
}

// SetEvents sets field value
func (o *EventsStatistics) SetEvents(v int64) {
	o.Events = v
}

// GetResources returns the Resources field value
func (o *EventsStatistics) GetResources() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value
// and a boolean to check if the value has been set.
func (o *EventsStatistics) GetResourcesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resources, true
}

// SetResources sets field value
func (o *EventsStatistics) SetResources(v int64) {
	o.Resources = v
}

func (o EventsStatistics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventsStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["events"] = o.Events
	toSerialize["resources"] = o.Resources
	return toSerialize, nil
}

func (o *EventsStatistics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"events",
		"resources",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventsStatistics := _EventsStatistics{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventsStatistics)

	if err != nil {
		return err
	}

	*o = EventsStatistics(varEventsStatistics)

	return err
}

type NullableEventsStatistics struct {
	value *EventsStatistics
	isSet bool
}

func (v NullableEventsStatistics) Get() *EventsStatistics {
	return v.value
}

func (v *NullableEventsStatistics) Set(val *EventsStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsStatistics(val *EventsStatistics) *NullableEventsStatistics {
	return &NullableEventsStatistics{value: val, isSet: true}
}

func (v NullableEventsStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


