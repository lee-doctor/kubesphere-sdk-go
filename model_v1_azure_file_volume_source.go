/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1AzureFileVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1AzureFileVolumeSource{}

// V1AzureFileVolumeSource AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
type V1AzureFileVolumeSource struct {
	// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	// the name of secret that contains Azure Storage Account Name and Key
	SecretName string `json:"secretName"`
	// Share Name
	ShareName string `json:"shareName"`
}

type _V1AzureFileVolumeSource V1AzureFileVolumeSource

// NewV1AzureFileVolumeSource instantiates a new V1AzureFileVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1AzureFileVolumeSource(secretName string, shareName string) *V1AzureFileVolumeSource {
	this := V1AzureFileVolumeSource{}
	this.SecretName = secretName
	this.ShareName = shareName
	return &this
}

// NewV1AzureFileVolumeSourceWithDefaults instantiates a new V1AzureFileVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1AzureFileVolumeSourceWithDefaults() *V1AzureFileVolumeSource {
	this := V1AzureFileVolumeSource{}
	return &this
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *V1AzureFileVolumeSource) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AzureFileVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *V1AzureFileVolumeSource) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *V1AzureFileVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetSecretName returns the SecretName field value
func (o *V1AzureFileVolumeSource) GetSecretName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretName
}

// GetSecretNameOk returns a tuple with the SecretName field value
// and a boolean to check if the value has been set.
func (o *V1AzureFileVolumeSource) GetSecretNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretName, true
}

// SetSecretName sets field value
func (o *V1AzureFileVolumeSource) SetSecretName(v string) {
	o.SecretName = v
}

// GetShareName returns the ShareName field value
func (o *V1AzureFileVolumeSource) GetShareName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShareName
}

// GetShareNameOk returns a tuple with the ShareName field value
// and a boolean to check if the value has been set.
func (o *V1AzureFileVolumeSource) GetShareNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShareName, true
}

// SetShareName sets field value
func (o *V1AzureFileVolumeSource) SetShareName(v string) {
	o.ShareName = v
}

func (o V1AzureFileVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1AzureFileVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	toSerialize["secretName"] = o.SecretName
	toSerialize["shareName"] = o.ShareName
	return toSerialize, nil
}

func (o *V1AzureFileVolumeSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"secretName",
		"shareName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1AzureFileVolumeSource := _V1AzureFileVolumeSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1AzureFileVolumeSource)

	if err != nil {
		return err
	}

	*o = V1AzureFileVolumeSource(varV1AzureFileVolumeSource)

	return err
}

type NullableV1AzureFileVolumeSource struct {
	value *V1AzureFileVolumeSource
	isSet bool
}

func (v NullableV1AzureFileVolumeSource) Get() *V1AzureFileVolumeSource {
	return v.value
}

func (v *NullableV1AzureFileVolumeSource) Set(val *V1AzureFileVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1AzureFileVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1AzureFileVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1AzureFileVolumeSource(val *V1AzureFileVolumeSource) *NullableV1AzureFileVolumeSource {
	return &NullableV1AzureFileVolumeSource{value: val, isSet: true}
}

func (v NullableV1AzureFileVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1AzureFileVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


