/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1alpha2Table type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha2Table{}

// V1alpha2Table struct for V1alpha2Table
type V1alpha2Table struct {
	Columns []V1alpha2Column `json:"columns"`
	Id string `json:"id"`
	Label string `json:"label"`
	Rows []V1alpha2Row `json:"rows"`
	TruncationCount *int32 `json:"truncationCount,omitempty"`
	Type string `json:"type"`
}

type _V1alpha2Table V1alpha2Table

// NewV1alpha2Table instantiates a new V1alpha2Table object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha2Table(columns []V1alpha2Column, id string, label string, rows []V1alpha2Row, type_ string) *V1alpha2Table {
	this := V1alpha2Table{}
	this.Columns = columns
	this.Id = id
	this.Label = label
	this.Rows = rows
	this.Type = type_
	return &this
}

// NewV1alpha2TableWithDefaults instantiates a new V1alpha2Table object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha2TableWithDefaults() *V1alpha2Table {
	this := V1alpha2Table{}
	return &this
}

// GetColumns returns the Columns field value
func (o *V1alpha2Table) GetColumns() []V1alpha2Column {
	if o == nil {
		var ret []V1alpha2Column
		return ret
	}

	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value
// and a boolean to check if the value has been set.
func (o *V1alpha2Table) GetColumnsOk() ([]V1alpha2Column, bool) {
	if o == nil {
		return nil, false
	}
	return o.Columns, true
}

// SetColumns sets field value
func (o *V1alpha2Table) SetColumns(v []V1alpha2Column) {
	o.Columns = v
}

// GetId returns the Id field value
func (o *V1alpha2Table) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *V1alpha2Table) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *V1alpha2Table) SetId(v string) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *V1alpha2Table) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *V1alpha2Table) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *V1alpha2Table) SetLabel(v string) {
	o.Label = v
}

// GetRows returns the Rows field value
func (o *V1alpha2Table) GetRows() []V1alpha2Row {
	if o == nil {
		var ret []V1alpha2Row
		return ret
	}

	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value
// and a boolean to check if the value has been set.
func (o *V1alpha2Table) GetRowsOk() ([]V1alpha2Row, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rows, true
}

// SetRows sets field value
func (o *V1alpha2Table) SetRows(v []V1alpha2Row) {
	o.Rows = v
}

// GetTruncationCount returns the TruncationCount field value if set, zero value otherwise.
func (o *V1alpha2Table) GetTruncationCount() int32 {
	if o == nil || IsNil(o.TruncationCount) {
		var ret int32
		return ret
	}
	return *o.TruncationCount
}

// GetTruncationCountOk returns a tuple with the TruncationCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2Table) GetTruncationCountOk() (*int32, bool) {
	if o == nil || IsNil(o.TruncationCount) {
		return nil, false
	}
	return o.TruncationCount, true
}

// HasTruncationCount returns a boolean if a field has been set.
func (o *V1alpha2Table) HasTruncationCount() bool {
	if o != nil && !IsNil(o.TruncationCount) {
		return true
	}

	return false
}

// SetTruncationCount gets a reference to the given int32 and assigns it to the TruncationCount field.
func (o *V1alpha2Table) SetTruncationCount(v int32) {
	o.TruncationCount = &v
}

// GetType returns the Type field value
func (o *V1alpha2Table) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *V1alpha2Table) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *V1alpha2Table) SetType(v string) {
	o.Type = v
}

func (o V1alpha2Table) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha2Table) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["columns"] = o.Columns
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	toSerialize["rows"] = o.Rows
	if !IsNil(o.TruncationCount) {
		toSerialize["truncationCount"] = o.TruncationCount
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *V1alpha2Table) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"columns",
		"id",
		"label",
		"rows",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1alpha2Table := _V1alpha2Table{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1alpha2Table)

	if err != nil {
		return err
	}

	*o = V1alpha2Table(varV1alpha2Table)

	return err
}

type NullableV1alpha2Table struct {
	value *V1alpha2Table
	isSet bool
}

func (v NullableV1alpha2Table) Get() *V1alpha2Table {
	return v.value
}

func (v *NullableV1alpha2Table) Set(val *V1alpha2Table) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha2Table) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha2Table) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha2Table(val *V1alpha2Table) *NullableV1alpha2Table {
	return &NullableV1alpha2Table{value: val, isSet: true}
}

func (v NullableV1alpha2Table) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha2Table) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


