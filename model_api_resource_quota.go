/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ApiResourceQuota type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiResourceQuota{}

// ApiResourceQuota struct for ApiResourceQuota
type ApiResourceQuota struct {
	Data V1ResourceQuotaStatus `json:"data"`
	// namespace
	Namespace string `json:"namespace"`
}

type _ApiResourceQuota ApiResourceQuota

// NewApiResourceQuota instantiates a new ApiResourceQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiResourceQuota(data V1ResourceQuotaStatus, namespace string) *ApiResourceQuota {
	this := ApiResourceQuota{}
	this.Data = data
	this.Namespace = namespace
	return &this
}

// NewApiResourceQuotaWithDefaults instantiates a new ApiResourceQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiResourceQuotaWithDefaults() *ApiResourceQuota {
	this := ApiResourceQuota{}
	return &this
}

// GetData returns the Data field value
func (o *ApiResourceQuota) GetData() V1ResourceQuotaStatus {
	if o == nil {
		var ret V1ResourceQuotaStatus
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ApiResourceQuota) GetDataOk() (*V1ResourceQuotaStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ApiResourceQuota) SetData(v V1ResourceQuotaStatus) {
	o.Data = v
}

// GetNamespace returns the Namespace field value
func (o *ApiResourceQuota) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *ApiResourceQuota) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *ApiResourceQuota) SetNamespace(v string) {
	o.Namespace = v
}

func (o ApiResourceQuota) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiResourceQuota) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["namespace"] = o.Namespace
	return toSerialize, nil
}

func (o *ApiResourceQuota) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"namespace",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiResourceQuota := _ApiResourceQuota{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiResourceQuota)

	if err != nil {
		return err
	}

	*o = ApiResourceQuota(varApiResourceQuota)

	return err
}

type NullableApiResourceQuota struct {
	value *ApiResourceQuota
	isSet bool
}

func (v NullableApiResourceQuota) Get() *ApiResourceQuota {
	return v.value
}

func (v *NullableApiResourceQuota) Set(val *ApiResourceQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableApiResourceQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableApiResourceQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiResourceQuota(val *ApiResourceQuota) *NullableApiResourceQuota {
	return &NullableApiResourceQuota{value: val, isSet: true}
}

func (v NullableApiResourceQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiResourceQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


