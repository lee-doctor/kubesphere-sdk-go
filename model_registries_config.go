/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RegistriesConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegistriesConfig{}

// RegistriesConfig struct for RegistriesConfig
type RegistriesConfig struct {
	// Command is already escaped (Windows only)
	ArgsEscaped *bool `json:"ArgsEscaped,omitempty"`
	// Boolean value, attaches to stderr.
	AttachStderr *bool `json:"AttachStderr,omitempty"`
	// Boolean value, attaches to stdin.
	AttachStdin *bool `json:"AttachStdin,omitempty"`
	// Boolean value, attaches to stdout.
	AttachStdout *bool `json:"AttachStdout,omitempty"`
	// Command to run specified as a string or an array of strings.
	Cmd []string `json:"Cmd,omitempty"`
	// A string value containing the domain name to use for the container.
	Domainname *string `json:"Domainname,omitempty"`
	Entrypoint map[string]interface{} `json:"Entrypoint,omitempty"`
	// A list of environment variables in the form of [\"VAR=value\", ...]
	Env []string `json:"Env,omitempty"`
	// An object mapping ports to an empty object in the form of: \"ExposedPorts\": { \"<port>/<tcp|udp>: {}\" }
	ExposedPorts map[string]interface{} `json:"ExposedPorts,omitempty"`
	// A string value containing the hostname to use for the container.
	Hostname *string `json:"Hostname,omitempty"`
	// A string specifying the image name to use for the container.
	Image *string `json:"Image,omitempty"`
	Labels *RegistriesLabels `json:"Labels,omitempty"`
	OnBuild map[string]interface{} `json:"OnBuild,omitempty"`
	// Boolean value, opens stdin
	OpenStdin *bool `json:"OpenStdin,omitempty"`
	// Boolean value, close stdin after the 1 attached client disconnects.
	StdinOnce *bool `json:"StdinOnce,omitempty"`
	// Signal to stop a container as a string or unsigned integer.
	StopSignal *string `json:"StopSignal,omitempty"`
	// Boolean value, Attach standard streams to a tty, including stdin if it is not closed.
	Tty *bool `json:"Tty,omitempty"`
	// A string value specifying the user inside the container.
	User *string `json:"User,omitempty"`
	Volumes map[string]interface{} `json:"Volumes,omitempty"`
	// A string specifying the working directory for commands to run in.
	WorkingDir *string `json:"WorkingDir,omitempty"`
}

// NewRegistriesConfig instantiates a new RegistriesConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistriesConfig() *RegistriesConfig {
	this := RegistriesConfig{}
	return &this
}

// NewRegistriesConfigWithDefaults instantiates a new RegistriesConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistriesConfigWithDefaults() *RegistriesConfig {
	this := RegistriesConfig{}
	return &this
}

// GetArgsEscaped returns the ArgsEscaped field value if set, zero value otherwise.
func (o *RegistriesConfig) GetArgsEscaped() bool {
	if o == nil || IsNil(o.ArgsEscaped) {
		var ret bool
		return ret
	}
	return *o.ArgsEscaped
}

// GetArgsEscapedOk returns a tuple with the ArgsEscaped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetArgsEscapedOk() (*bool, bool) {
	if o == nil || IsNil(o.ArgsEscaped) {
		return nil, false
	}
	return o.ArgsEscaped, true
}

// HasArgsEscaped returns a boolean if a field has been set.
func (o *RegistriesConfig) HasArgsEscaped() bool {
	if o != nil && !IsNil(o.ArgsEscaped) {
		return true
	}

	return false
}

// SetArgsEscaped gets a reference to the given bool and assigns it to the ArgsEscaped field.
func (o *RegistriesConfig) SetArgsEscaped(v bool) {
	o.ArgsEscaped = &v
}

// GetAttachStderr returns the AttachStderr field value if set, zero value otherwise.
func (o *RegistriesConfig) GetAttachStderr() bool {
	if o == nil || IsNil(o.AttachStderr) {
		var ret bool
		return ret
	}
	return *o.AttachStderr
}

// GetAttachStderrOk returns a tuple with the AttachStderr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetAttachStderrOk() (*bool, bool) {
	if o == nil || IsNil(o.AttachStderr) {
		return nil, false
	}
	return o.AttachStderr, true
}

// HasAttachStderr returns a boolean if a field has been set.
func (o *RegistriesConfig) HasAttachStderr() bool {
	if o != nil && !IsNil(o.AttachStderr) {
		return true
	}

	return false
}

// SetAttachStderr gets a reference to the given bool and assigns it to the AttachStderr field.
func (o *RegistriesConfig) SetAttachStderr(v bool) {
	o.AttachStderr = &v
}

// GetAttachStdin returns the AttachStdin field value if set, zero value otherwise.
func (o *RegistriesConfig) GetAttachStdin() bool {
	if o == nil || IsNil(o.AttachStdin) {
		var ret bool
		return ret
	}
	return *o.AttachStdin
}

// GetAttachStdinOk returns a tuple with the AttachStdin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetAttachStdinOk() (*bool, bool) {
	if o == nil || IsNil(o.AttachStdin) {
		return nil, false
	}
	return o.AttachStdin, true
}

// HasAttachStdin returns a boolean if a field has been set.
func (o *RegistriesConfig) HasAttachStdin() bool {
	if o != nil && !IsNil(o.AttachStdin) {
		return true
	}

	return false
}

// SetAttachStdin gets a reference to the given bool and assigns it to the AttachStdin field.
func (o *RegistriesConfig) SetAttachStdin(v bool) {
	o.AttachStdin = &v
}

// GetAttachStdout returns the AttachStdout field value if set, zero value otherwise.
func (o *RegistriesConfig) GetAttachStdout() bool {
	if o == nil || IsNil(o.AttachStdout) {
		var ret bool
		return ret
	}
	return *o.AttachStdout
}

// GetAttachStdoutOk returns a tuple with the AttachStdout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetAttachStdoutOk() (*bool, bool) {
	if o == nil || IsNil(o.AttachStdout) {
		return nil, false
	}
	return o.AttachStdout, true
}

// HasAttachStdout returns a boolean if a field has been set.
func (o *RegistriesConfig) HasAttachStdout() bool {
	if o != nil && !IsNil(o.AttachStdout) {
		return true
	}

	return false
}

// SetAttachStdout gets a reference to the given bool and assigns it to the AttachStdout field.
func (o *RegistriesConfig) SetAttachStdout(v bool) {
	o.AttachStdout = &v
}

// GetCmd returns the Cmd field value if set, zero value otherwise.
func (o *RegistriesConfig) GetCmd() []string {
	if o == nil || IsNil(o.Cmd) {
		var ret []string
		return ret
	}
	return o.Cmd
}

// GetCmdOk returns a tuple with the Cmd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetCmdOk() ([]string, bool) {
	if o == nil || IsNil(o.Cmd) {
		return nil, false
	}
	return o.Cmd, true
}

// HasCmd returns a boolean if a field has been set.
func (o *RegistriesConfig) HasCmd() bool {
	if o != nil && !IsNil(o.Cmd) {
		return true
	}

	return false
}

// SetCmd gets a reference to the given []string and assigns it to the Cmd field.
func (o *RegistriesConfig) SetCmd(v []string) {
	o.Cmd = v
}

// GetDomainname returns the Domainname field value if set, zero value otherwise.
func (o *RegistriesConfig) GetDomainname() string {
	if o == nil || IsNil(o.Domainname) {
		var ret string
		return ret
	}
	return *o.Domainname
}

// GetDomainnameOk returns a tuple with the Domainname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetDomainnameOk() (*string, bool) {
	if o == nil || IsNil(o.Domainname) {
		return nil, false
	}
	return o.Domainname, true
}

// HasDomainname returns a boolean if a field has been set.
func (o *RegistriesConfig) HasDomainname() bool {
	if o != nil && !IsNil(o.Domainname) {
		return true
	}

	return false
}

// SetDomainname gets a reference to the given string and assigns it to the Domainname field.
func (o *RegistriesConfig) SetDomainname(v string) {
	o.Domainname = &v
}

// GetEntrypoint returns the Entrypoint field value if set, zero value otherwise.
func (o *RegistriesConfig) GetEntrypoint() map[string]interface{} {
	if o == nil || IsNil(o.Entrypoint) {
		var ret map[string]interface{}
		return ret
	}
	return o.Entrypoint
}

// GetEntrypointOk returns a tuple with the Entrypoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetEntrypointOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Entrypoint) {
		return map[string]interface{}{}, false
	}
	return o.Entrypoint, true
}

// HasEntrypoint returns a boolean if a field has been set.
func (o *RegistriesConfig) HasEntrypoint() bool {
	if o != nil && !IsNil(o.Entrypoint) {
		return true
	}

	return false
}

// SetEntrypoint gets a reference to the given map[string]interface{} and assigns it to the Entrypoint field.
func (o *RegistriesConfig) SetEntrypoint(v map[string]interface{}) {
	o.Entrypoint = v
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *RegistriesConfig) GetEnv() []string {
	if o == nil || IsNil(o.Env) {
		var ret []string
		return ret
	}
	return o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetEnvOk() ([]string, bool) {
	if o == nil || IsNil(o.Env) {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *RegistriesConfig) HasEnv() bool {
	if o != nil && !IsNil(o.Env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given []string and assigns it to the Env field.
func (o *RegistriesConfig) SetEnv(v []string) {
	o.Env = v
}

// GetExposedPorts returns the ExposedPorts field value if set, zero value otherwise.
func (o *RegistriesConfig) GetExposedPorts() map[string]interface{} {
	if o == nil || IsNil(o.ExposedPorts) {
		var ret map[string]interface{}
		return ret
	}
	return o.ExposedPorts
}

// GetExposedPortsOk returns a tuple with the ExposedPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetExposedPortsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ExposedPorts) {
		return map[string]interface{}{}, false
	}
	return o.ExposedPorts, true
}

// HasExposedPorts returns a boolean if a field has been set.
func (o *RegistriesConfig) HasExposedPorts() bool {
	if o != nil && !IsNil(o.ExposedPorts) {
		return true
	}

	return false
}

// SetExposedPorts gets a reference to the given map[string]interface{} and assigns it to the ExposedPorts field.
func (o *RegistriesConfig) SetExposedPorts(v map[string]interface{}) {
	o.ExposedPorts = v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *RegistriesConfig) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *RegistriesConfig) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *RegistriesConfig) SetHostname(v string) {
	o.Hostname = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *RegistriesConfig) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *RegistriesConfig) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *RegistriesConfig) SetImage(v string) {
	o.Image = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *RegistriesConfig) GetLabels() RegistriesLabels {
	if o == nil || IsNil(o.Labels) {
		var ret RegistriesLabels
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetLabelsOk() (*RegistriesLabels, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *RegistriesConfig) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given RegistriesLabels and assigns it to the Labels field.
func (o *RegistriesConfig) SetLabels(v RegistriesLabels) {
	o.Labels = &v
}

// GetOnBuild returns the OnBuild field value if set, zero value otherwise.
func (o *RegistriesConfig) GetOnBuild() map[string]interface{} {
	if o == nil || IsNil(o.OnBuild) {
		var ret map[string]interface{}
		return ret
	}
	return o.OnBuild
}

// GetOnBuildOk returns a tuple with the OnBuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetOnBuildOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.OnBuild) {
		return map[string]interface{}{}, false
	}
	return o.OnBuild, true
}

// HasOnBuild returns a boolean if a field has been set.
func (o *RegistriesConfig) HasOnBuild() bool {
	if o != nil && !IsNil(o.OnBuild) {
		return true
	}

	return false
}

// SetOnBuild gets a reference to the given map[string]interface{} and assigns it to the OnBuild field.
func (o *RegistriesConfig) SetOnBuild(v map[string]interface{}) {
	o.OnBuild = v
}

// GetOpenStdin returns the OpenStdin field value if set, zero value otherwise.
func (o *RegistriesConfig) GetOpenStdin() bool {
	if o == nil || IsNil(o.OpenStdin) {
		var ret bool
		return ret
	}
	return *o.OpenStdin
}

// GetOpenStdinOk returns a tuple with the OpenStdin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetOpenStdinOk() (*bool, bool) {
	if o == nil || IsNil(o.OpenStdin) {
		return nil, false
	}
	return o.OpenStdin, true
}

// HasOpenStdin returns a boolean if a field has been set.
func (o *RegistriesConfig) HasOpenStdin() bool {
	if o != nil && !IsNil(o.OpenStdin) {
		return true
	}

	return false
}

// SetOpenStdin gets a reference to the given bool and assigns it to the OpenStdin field.
func (o *RegistriesConfig) SetOpenStdin(v bool) {
	o.OpenStdin = &v
}

// GetStdinOnce returns the StdinOnce field value if set, zero value otherwise.
func (o *RegistriesConfig) GetStdinOnce() bool {
	if o == nil || IsNil(o.StdinOnce) {
		var ret bool
		return ret
	}
	return *o.StdinOnce
}

// GetStdinOnceOk returns a tuple with the StdinOnce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetStdinOnceOk() (*bool, bool) {
	if o == nil || IsNil(o.StdinOnce) {
		return nil, false
	}
	return o.StdinOnce, true
}

// HasStdinOnce returns a boolean if a field has been set.
func (o *RegistriesConfig) HasStdinOnce() bool {
	if o != nil && !IsNil(o.StdinOnce) {
		return true
	}

	return false
}

// SetStdinOnce gets a reference to the given bool and assigns it to the StdinOnce field.
func (o *RegistriesConfig) SetStdinOnce(v bool) {
	o.StdinOnce = &v
}

// GetStopSignal returns the StopSignal field value if set, zero value otherwise.
func (o *RegistriesConfig) GetStopSignal() string {
	if o == nil || IsNil(o.StopSignal) {
		var ret string
		return ret
	}
	return *o.StopSignal
}

// GetStopSignalOk returns a tuple with the StopSignal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetStopSignalOk() (*string, bool) {
	if o == nil || IsNil(o.StopSignal) {
		return nil, false
	}
	return o.StopSignal, true
}

// HasStopSignal returns a boolean if a field has been set.
func (o *RegistriesConfig) HasStopSignal() bool {
	if o != nil && !IsNil(o.StopSignal) {
		return true
	}

	return false
}

// SetStopSignal gets a reference to the given string and assigns it to the StopSignal field.
func (o *RegistriesConfig) SetStopSignal(v string) {
	o.StopSignal = &v
}

// GetTty returns the Tty field value if set, zero value otherwise.
func (o *RegistriesConfig) GetTty() bool {
	if o == nil || IsNil(o.Tty) {
		var ret bool
		return ret
	}
	return *o.Tty
}

// GetTtyOk returns a tuple with the Tty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetTtyOk() (*bool, bool) {
	if o == nil || IsNil(o.Tty) {
		return nil, false
	}
	return o.Tty, true
}

// HasTty returns a boolean if a field has been set.
func (o *RegistriesConfig) HasTty() bool {
	if o != nil && !IsNil(o.Tty) {
		return true
	}

	return false
}

// SetTty gets a reference to the given bool and assigns it to the Tty field.
func (o *RegistriesConfig) SetTty(v bool) {
	o.Tty = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *RegistriesConfig) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *RegistriesConfig) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *RegistriesConfig) SetUser(v string) {
	o.User = &v
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *RegistriesConfig) GetVolumes() map[string]interface{} {
	if o == nil || IsNil(o.Volumes) {
		var ret map[string]interface{}
		return ret
	}
	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetVolumesOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Volumes) {
		return map[string]interface{}{}, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *RegistriesConfig) HasVolumes() bool {
	if o != nil && !IsNil(o.Volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given map[string]interface{} and assigns it to the Volumes field.
func (o *RegistriesConfig) SetVolumes(v map[string]interface{}) {
	o.Volumes = v
}

// GetWorkingDir returns the WorkingDir field value if set, zero value otherwise.
func (o *RegistriesConfig) GetWorkingDir() string {
	if o == nil || IsNil(o.WorkingDir) {
		var ret string
		return ret
	}
	return *o.WorkingDir
}

// GetWorkingDirOk returns a tuple with the WorkingDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesConfig) GetWorkingDirOk() (*string, bool) {
	if o == nil || IsNil(o.WorkingDir) {
		return nil, false
	}
	return o.WorkingDir, true
}

// HasWorkingDir returns a boolean if a field has been set.
func (o *RegistriesConfig) HasWorkingDir() bool {
	if o != nil && !IsNil(o.WorkingDir) {
		return true
	}

	return false
}

// SetWorkingDir gets a reference to the given string and assigns it to the WorkingDir field.
func (o *RegistriesConfig) SetWorkingDir(v string) {
	o.WorkingDir = &v
}

func (o RegistriesConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegistriesConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArgsEscaped) {
		toSerialize["ArgsEscaped"] = o.ArgsEscaped
	}
	if !IsNil(o.AttachStderr) {
		toSerialize["AttachStderr"] = o.AttachStderr
	}
	if !IsNil(o.AttachStdin) {
		toSerialize["AttachStdin"] = o.AttachStdin
	}
	if !IsNil(o.AttachStdout) {
		toSerialize["AttachStdout"] = o.AttachStdout
	}
	if !IsNil(o.Cmd) {
		toSerialize["Cmd"] = o.Cmd
	}
	if !IsNil(o.Domainname) {
		toSerialize["Domainname"] = o.Domainname
	}
	if !IsNil(o.Entrypoint) {
		toSerialize["Entrypoint"] = o.Entrypoint
	}
	if !IsNil(o.Env) {
		toSerialize["Env"] = o.Env
	}
	if !IsNil(o.ExposedPorts) {
		toSerialize["ExposedPorts"] = o.ExposedPorts
	}
	if !IsNil(o.Hostname) {
		toSerialize["Hostname"] = o.Hostname
	}
	if !IsNil(o.Image) {
		toSerialize["Image"] = o.Image
	}
	if !IsNil(o.Labels) {
		toSerialize["Labels"] = o.Labels
	}
	if !IsNil(o.OnBuild) {
		toSerialize["OnBuild"] = o.OnBuild
	}
	if !IsNil(o.OpenStdin) {
		toSerialize["OpenStdin"] = o.OpenStdin
	}
	if !IsNil(o.StdinOnce) {
		toSerialize["StdinOnce"] = o.StdinOnce
	}
	if !IsNil(o.StopSignal) {
		toSerialize["StopSignal"] = o.StopSignal
	}
	if !IsNil(o.Tty) {
		toSerialize["Tty"] = o.Tty
	}
	if !IsNil(o.User) {
		toSerialize["User"] = o.User
	}
	if !IsNil(o.Volumes) {
		toSerialize["Volumes"] = o.Volumes
	}
	if !IsNil(o.WorkingDir) {
		toSerialize["WorkingDir"] = o.WorkingDir
	}
	return toSerialize, nil
}

type NullableRegistriesConfig struct {
	value *RegistriesConfig
	isSet bool
}

func (v NullableRegistriesConfig) Get() *RegistriesConfig {
	return v.value
}

func (v *NullableRegistriesConfig) Set(val *RegistriesConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistriesConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistriesConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistriesConfig(val *RegistriesConfig) *NullableRegistriesConfig {
	return &NullableRegistriesConfig{value: val, isSet: true}
}

func (v NullableRegistriesConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistriesConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


