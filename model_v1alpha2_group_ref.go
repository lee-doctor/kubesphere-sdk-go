/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1alpha2GroupRef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha2GroupRef{}

// V1alpha2GroupRef struct for V1alpha2GroupRef
type V1alpha2GroupRef struct {
	ApiGroup *string `json:"apiGroup,omitempty"`
	Kind *string `json:"kind,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewV1alpha2GroupRef instantiates a new V1alpha2GroupRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha2GroupRef() *V1alpha2GroupRef {
	this := V1alpha2GroupRef{}
	return &this
}

// NewV1alpha2GroupRefWithDefaults instantiates a new V1alpha2GroupRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha2GroupRefWithDefaults() *V1alpha2GroupRef {
	this := V1alpha2GroupRef{}
	return &this
}

// GetApiGroup returns the ApiGroup field value if set, zero value otherwise.
func (o *V1alpha2GroupRef) GetApiGroup() string {
	if o == nil || IsNil(o.ApiGroup) {
		var ret string
		return ret
	}
	return *o.ApiGroup
}

// GetApiGroupOk returns a tuple with the ApiGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2GroupRef) GetApiGroupOk() (*string, bool) {
	if o == nil || IsNil(o.ApiGroup) {
		return nil, false
	}
	return o.ApiGroup, true
}

// HasApiGroup returns a boolean if a field has been set.
func (o *V1alpha2GroupRef) HasApiGroup() bool {
	if o != nil && !IsNil(o.ApiGroup) {
		return true
	}

	return false
}

// SetApiGroup gets a reference to the given string and assigns it to the ApiGroup field.
func (o *V1alpha2GroupRef) SetApiGroup(v string) {
	o.ApiGroup = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V1alpha2GroupRef) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2GroupRef) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V1alpha2GroupRef) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V1alpha2GroupRef) SetKind(v string) {
	o.Kind = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1alpha2GroupRef) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2GroupRef) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1alpha2GroupRef) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1alpha2GroupRef) SetName(v string) {
	o.Name = &v
}

func (o V1alpha2GroupRef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha2GroupRef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiGroup) {
		toSerialize["apiGroup"] = o.ApiGroup
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableV1alpha2GroupRef struct {
	value *V1alpha2GroupRef
	isSet bool
}

func (v NullableV1alpha2GroupRef) Get() *V1alpha2GroupRef {
	return v.value
}

func (v *NullableV1alpha2GroupRef) Set(val *V1alpha2GroupRef) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha2GroupRef) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha2GroupRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha2GroupRef(val *V1alpha2GroupRef) *NullableV1alpha2GroupRef {
	return &NullableV1alpha2GroupRef{value: val, isSet: true}
}

func (v NullableV1alpha2GroupRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha2GroupRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


