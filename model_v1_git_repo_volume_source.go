/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1GitRepoVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1GitRepoVolumeSource{}

// V1GitRepoVolumeSource Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.  DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
type V1GitRepoVolumeSource struct {
	// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
	Directory *string `json:"directory,omitempty"`
	// Repository URL
	Repository string `json:"repository"`
	// Commit hash for the specified revision.
	Revision *string `json:"revision,omitempty"`
}

type _V1GitRepoVolumeSource V1GitRepoVolumeSource

// NewV1GitRepoVolumeSource instantiates a new V1GitRepoVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1GitRepoVolumeSource(repository string) *V1GitRepoVolumeSource {
	this := V1GitRepoVolumeSource{}
	this.Repository = repository
	return &this
}

// NewV1GitRepoVolumeSourceWithDefaults instantiates a new V1GitRepoVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1GitRepoVolumeSourceWithDefaults() *V1GitRepoVolumeSource {
	this := V1GitRepoVolumeSource{}
	return &this
}

// GetDirectory returns the Directory field value if set, zero value otherwise.
func (o *V1GitRepoVolumeSource) GetDirectory() string {
	if o == nil || IsNil(o.Directory) {
		var ret string
		return ret
	}
	return *o.Directory
}

// GetDirectoryOk returns a tuple with the Directory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GitRepoVolumeSource) GetDirectoryOk() (*string, bool) {
	if o == nil || IsNil(o.Directory) {
		return nil, false
	}
	return o.Directory, true
}

// HasDirectory returns a boolean if a field has been set.
func (o *V1GitRepoVolumeSource) HasDirectory() bool {
	if o != nil && !IsNil(o.Directory) {
		return true
	}

	return false
}

// SetDirectory gets a reference to the given string and assigns it to the Directory field.
func (o *V1GitRepoVolumeSource) SetDirectory(v string) {
	o.Directory = &v
}

// GetRepository returns the Repository field value
func (o *V1GitRepoVolumeSource) GetRepository() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *V1GitRepoVolumeSource) GetRepositoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *V1GitRepoVolumeSource) SetRepository(v string) {
	o.Repository = v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *V1GitRepoVolumeSource) GetRevision() string {
	if o == nil || IsNil(o.Revision) {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GitRepoVolumeSource) GetRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *V1GitRepoVolumeSource) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *V1GitRepoVolumeSource) SetRevision(v string) {
	o.Revision = &v
}

func (o V1GitRepoVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1GitRepoVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Directory) {
		toSerialize["directory"] = o.Directory
	}
	toSerialize["repository"] = o.Repository
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	return toSerialize, nil
}

func (o *V1GitRepoVolumeSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"repository",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1GitRepoVolumeSource := _V1GitRepoVolumeSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1GitRepoVolumeSource)

	if err != nil {
		return err
	}

	*o = V1GitRepoVolumeSource(varV1GitRepoVolumeSource)

	return err
}

type NullableV1GitRepoVolumeSource struct {
	value *V1GitRepoVolumeSource
	isSet bool
}

func (v NullableV1GitRepoVolumeSource) Get() *V1GitRepoVolumeSource {
	return v.value
}

func (v *NullableV1GitRepoVolumeSource) Set(val *V1GitRepoVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1GitRepoVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1GitRepoVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1GitRepoVolumeSource(val *V1GitRepoVolumeSource) *NullableV1GitRepoVolumeSource {
	return &NullableV1GitRepoVolumeSource{value: val, isSet: true}
}

func (v NullableV1GitRepoVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1GitRepoVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


