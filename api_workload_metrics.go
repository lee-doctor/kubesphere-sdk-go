/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// WorkloadMetricsAPIService WorkloadMetricsAPI service
type WorkloadMetricsAPIService service

type ApiHandleAllWorkloadMetricsQueryRequest struct {
	ctx context.Context
	ApiService *WorkloadMetricsAPIService
	namespace string
	kind string
	metricsFilter *string
	resourcesFilter *string
	start *string
	end *string
	step *string
	time *string
	sortMetric *string
	sortType *string
	page *int32
	limit *int32
}

// The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both workload CPU usage and memory usage: &#x60;workload_cpu_usage|workload_memory_usage&#x60;. View available metrics at [kubesphere.io](https://v2-0.docs.kubesphere.io/docs/api-reference/monitoring-metrics/).
func (r ApiHandleAllWorkloadMetricsQueryRequest) MetricsFilter(metricsFilter string) ApiHandleAllWorkloadMetricsQueryRequest {
	r.metricsFilter = &metricsFilter
	return r
}

// The workload filter consists of a regexp pattern. It specifies which workload data to return. For example, the following filter matches any workload whose name begins with prometheus: &#x60;prometheus.*&#x60;.
func (r ApiHandleAllWorkloadMetricsQueryRequest) ResourcesFilter(resourcesFilter string) ApiHandleAllWorkloadMetricsQueryRequest {
	r.resourcesFilter = &resourcesFilter
	return r
}

// Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. 
func (r ApiHandleAllWorkloadMetricsQueryRequest) Start(start string) ApiHandleAllWorkloadMetricsQueryRequest {
	r.start = &start
	return r
}

// End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. 
func (r ApiHandleAllWorkloadMetricsQueryRequest) End(end string) ApiHandleAllWorkloadMetricsQueryRequest {
	r.end = &end
	return r
}

// Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).
func (r ApiHandleAllWorkloadMetricsQueryRequest) Step(step string) ApiHandleAllWorkloadMetricsQueryRequest {
	r.step = &step
	return r
}

// A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.
func (r ApiHandleAllWorkloadMetricsQueryRequest) Time(time string) ApiHandleAllWorkloadMetricsQueryRequest {
	r.time = &time
	return r
}

// Sort workloads by the specified metric. Not applicable if **start** and **end** are provided.
func (r ApiHandleAllWorkloadMetricsQueryRequest) SortMetric(sortMetric string) ApiHandleAllWorkloadMetricsQueryRequest {
	r.sortMetric = &sortMetric
	return r
}

// Sort order. One of asc, desc.
func (r ApiHandleAllWorkloadMetricsQueryRequest) SortType(sortType string) ApiHandleAllWorkloadMetricsQueryRequest {
	r.sortType = &sortType
	return r
}

// The page number. This field paginates result data of each metric, then returns a specific page. For example, setting **page** to 2 returns the second page. It only applies to sorted metric data.
func (r ApiHandleAllWorkloadMetricsQueryRequest) Page(page int32) ApiHandleAllWorkloadMetricsQueryRequest {
	r.page = &page
	return r
}

// Page size, the maximum number of results in a single page. Defaults to 5.
func (r ApiHandleAllWorkloadMetricsQueryRequest) Limit(limit int32) ApiHandleAllWorkloadMetricsQueryRequest {
	r.limit = &limit
	return r
}

func (r ApiHandleAllWorkloadMetricsQueryRequest) Execute() (*MonitoringMetrics, *http.Response, error) {
	return r.ApiService.HandleAllWorkloadMetricsQueryExecute(r)
}

/*
HandleAllWorkloadMetricsQuery Get workload-level metric data of all workloads which belongs to a specific kind.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace The name of the namespace.
 @param kind Workload kind. One of deployment, daemonset, statefulset.
 @return ApiHandleAllWorkloadMetricsQueryRequest
*/
func (a *WorkloadMetricsAPIService) HandleAllWorkloadMetricsQuery(ctx context.Context, namespace string, kind string) ApiHandleAllWorkloadMetricsQueryRequest {
	return ApiHandleAllWorkloadMetricsQueryRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
		kind: kind,
	}
}

// Execute executes the request
//  @return MonitoringMetrics
func (a *WorkloadMetricsAPIService) HandleAllWorkloadMetricsQueryExecute(r ApiHandleAllWorkloadMetricsQueryRequest) (*MonitoringMetrics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MonitoringMetrics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkloadMetricsAPIService.HandleAllWorkloadMetricsQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/monitoring.kubesphere.io/v1alpha3/namespaces/{namespace}/workloads/{kind}"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kind"+"}", url.PathEscape(parameterValueToString(r.kind, "kind")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.metricsFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metrics_filter", r.metricsFilter, "form", "")
	}
	if r.resourcesFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resources_filter", r.resourcesFilter, "form", "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "form", "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "form", "")
	}
	if r.step != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "step", r.step, "form", "")
	} else {
		var defaultValue string = "10m"
		r.step = &defaultValue
	}
	if r.time != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "time", r.time, "form", "")
	}
	if r.sortMetric != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_metric", r.sortMetric, "form", "")
	}
	if r.sortType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_type", r.sortType, "form", "")
	} else {
		var defaultValue string = "desc."
		r.sortType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 5
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleWorkloadMetricsQueryRequest struct {
	ctx context.Context
	ApiService *WorkloadMetricsAPIService
	namespace string
	metricsFilter *string
	resourcesFilter *string
	start *string
	end *string
	step *string
	time *string
	sortMetric *string
	sortType *string
	page *int32
	limit *int32
}

// The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both workload CPU usage and memory usage: &#x60;workload_cpu_usage|workload_memory_usage&#x60;. View available metrics at [kubesphere.io](https://v2-0.docs.kubesphere.io/docs/api-reference/monitoring-metrics/).
func (r ApiHandleWorkloadMetricsQueryRequest) MetricsFilter(metricsFilter string) ApiHandleWorkloadMetricsQueryRequest {
	r.metricsFilter = &metricsFilter
	return r
}

// The workload filter consists of a regexp pattern. It specifies which workload data to return. For example, the following filter matches any workload whose name begins with prometheus: &#x60;prometheus.*&#x60;.
func (r ApiHandleWorkloadMetricsQueryRequest) ResourcesFilter(resourcesFilter string) ApiHandleWorkloadMetricsQueryRequest {
	r.resourcesFilter = &resourcesFilter
	return r
}

// Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. 
func (r ApiHandleWorkloadMetricsQueryRequest) Start(start string) ApiHandleWorkloadMetricsQueryRequest {
	r.start = &start
	return r
}

// End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. 
func (r ApiHandleWorkloadMetricsQueryRequest) End(end string) ApiHandleWorkloadMetricsQueryRequest {
	r.end = &end
	return r
}

// Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).
func (r ApiHandleWorkloadMetricsQueryRequest) Step(step string) ApiHandleWorkloadMetricsQueryRequest {
	r.step = &step
	return r
}

// A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.
func (r ApiHandleWorkloadMetricsQueryRequest) Time(time string) ApiHandleWorkloadMetricsQueryRequest {
	r.time = &time
	return r
}

// Sort workloads by the specified metric. Not applicable if **start** and **end** are provided.
func (r ApiHandleWorkloadMetricsQueryRequest) SortMetric(sortMetric string) ApiHandleWorkloadMetricsQueryRequest {
	r.sortMetric = &sortMetric
	return r
}

// Sort order. One of asc, desc.
func (r ApiHandleWorkloadMetricsQueryRequest) SortType(sortType string) ApiHandleWorkloadMetricsQueryRequest {
	r.sortType = &sortType
	return r
}

// The page number. This field paginates result data of each metric, then returns a specific page. For example, setting **page** to 2 returns the second page. It only applies to sorted metric data.
func (r ApiHandleWorkloadMetricsQueryRequest) Page(page int32) ApiHandleWorkloadMetricsQueryRequest {
	r.page = &page
	return r
}

// Page size, the maximum number of results in a single page. Defaults to 5.
func (r ApiHandleWorkloadMetricsQueryRequest) Limit(limit int32) ApiHandleWorkloadMetricsQueryRequest {
	r.limit = &limit
	return r
}

func (r ApiHandleWorkloadMetricsQueryRequest) Execute() (*MonitoringMetrics, *http.Response, error) {
	return r.ApiService.HandleWorkloadMetricsQueryExecute(r)
}

/*
HandleWorkloadMetricsQuery Get workload-level metric data of a specific namespace's workloads.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace The name of the namespace.
 @return ApiHandleWorkloadMetricsQueryRequest
*/
func (a *WorkloadMetricsAPIService) HandleWorkloadMetricsQuery(ctx context.Context, namespace string) ApiHandleWorkloadMetricsQueryRequest {
	return ApiHandleWorkloadMetricsQueryRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return MonitoringMetrics
func (a *WorkloadMetricsAPIService) HandleWorkloadMetricsQueryExecute(r ApiHandleWorkloadMetricsQueryRequest) (*MonitoringMetrics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MonitoringMetrics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkloadMetricsAPIService.HandleWorkloadMetricsQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/monitoring.kubesphere.io/v1alpha3/namespaces/{namespace}/workloads"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.metricsFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metrics_filter", r.metricsFilter, "form", "")
	}
	if r.resourcesFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resources_filter", r.resourcesFilter, "form", "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "form", "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "form", "")
	}
	if r.step != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "step", r.step, "form", "")
	} else {
		var defaultValue string = "10m"
		r.step = &defaultValue
	}
	if r.time != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "time", r.time, "form", "")
	}
	if r.sortMetric != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_metric", r.sortMetric, "form", "")
	}
	if r.sortType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_type", r.sortType, "form", "")
	} else {
		var defaultValue string = "desc."
		r.sortType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 5
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
