/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResourceQuantity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceQuantity{}

// ResourceQuantity struct for ResourceQuantity
type ResourceQuantity struct {
	Format string `json:"Format"`
	D ResourceInfDecAmount `json:"d"`
	I ResourceInt64Amount `json:"i"`
	S string `json:"s"`
}

type _ResourceQuantity ResourceQuantity

// NewResourceQuantity instantiates a new ResourceQuantity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceQuantity(format string, d ResourceInfDecAmount, i ResourceInt64Amount, s string) *ResourceQuantity {
	this := ResourceQuantity{}
	this.Format = format
	this.D = d
	this.I = i
	this.S = s
	return &this
}

// NewResourceQuantityWithDefaults instantiates a new ResourceQuantity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceQuantityWithDefaults() *ResourceQuantity {
	this := ResourceQuantity{}
	return &this
}

// GetFormat returns the Format field value
func (o *ResourceQuantity) GetFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *ResourceQuantity) GetFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *ResourceQuantity) SetFormat(v string) {
	o.Format = v
}

// GetD returns the D field value
func (o *ResourceQuantity) GetD() ResourceInfDecAmount {
	if o == nil {
		var ret ResourceInfDecAmount
		return ret
	}

	return o.D
}

// GetDOk returns a tuple with the D field value
// and a boolean to check if the value has been set.
func (o *ResourceQuantity) GetDOk() (*ResourceInfDecAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.D, true
}

// SetD sets field value
func (o *ResourceQuantity) SetD(v ResourceInfDecAmount) {
	o.D = v
}

// GetI returns the I field value
func (o *ResourceQuantity) GetI() ResourceInt64Amount {
	if o == nil {
		var ret ResourceInt64Amount
		return ret
	}

	return o.I
}

// GetIOk returns a tuple with the I field value
// and a boolean to check if the value has been set.
func (o *ResourceQuantity) GetIOk() (*ResourceInt64Amount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.I, true
}

// SetI sets field value
func (o *ResourceQuantity) SetI(v ResourceInt64Amount) {
	o.I = v
}

// GetS returns the S field value
func (o *ResourceQuantity) GetS() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.S
}

// GetSOk returns a tuple with the S field value
// and a boolean to check if the value has been set.
func (o *ResourceQuantity) GetSOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.S, true
}

// SetS sets field value
func (o *ResourceQuantity) SetS(v string) {
	o.S = v
}

func (o ResourceQuantity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceQuantity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Format"] = o.Format
	toSerialize["d"] = o.D
	toSerialize["i"] = o.I
	toSerialize["s"] = o.S
	return toSerialize, nil
}

func (o *ResourceQuantity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Format",
		"d",
		"i",
		"s",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceQuantity := _ResourceQuantity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceQuantity)

	if err != nil {
		return err
	}

	*o = ResourceQuantity(varResourceQuantity)

	return err
}

type NullableResourceQuantity struct {
	value *ResourceQuantity
	isSet bool
}

func (v NullableResourceQuantity) Get() *ResourceQuantity {
	return v.value
}

func (v *NullableResourceQuantity) Set(val *ResourceQuantity) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceQuantity) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceQuantity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceQuantity(val *ResourceQuantity) *NullableResourceQuantity {
	return &NullableResourceQuantity{value: val, isSet: true}
}

func (v NullableResourceQuantity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceQuantity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


