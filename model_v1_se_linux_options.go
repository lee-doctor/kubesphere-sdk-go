/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1SELinuxOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1SELinuxOptions{}

// V1SELinuxOptions SELinuxOptions are the labels to be applied to the container
type V1SELinuxOptions struct {
	// Level is SELinux level label that applies to the container.
	Level *string `json:"level,omitempty"`
	// Role is a SELinux role label that applies to the container.
	Role *string `json:"role,omitempty"`
	// Type is a SELinux type label that applies to the container.
	Type *string `json:"type,omitempty"`
	// User is a SELinux user label that applies to the container.
	User *string `json:"user,omitempty"`
}

// NewV1SELinuxOptions instantiates a new V1SELinuxOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1SELinuxOptions() *V1SELinuxOptions {
	this := V1SELinuxOptions{}
	return &this
}

// NewV1SELinuxOptionsWithDefaults instantiates a new V1SELinuxOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1SELinuxOptionsWithDefaults() *V1SELinuxOptions {
	this := V1SELinuxOptions{}
	return &this
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *V1SELinuxOptions) GetLevel() string {
	if o == nil || IsNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SELinuxOptions) GetLevelOk() (*string, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *V1SELinuxOptions) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *V1SELinuxOptions) SetLevel(v string) {
	o.Level = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *V1SELinuxOptions) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SELinuxOptions) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *V1SELinuxOptions) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *V1SELinuxOptions) SetRole(v string) {
	o.Role = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V1SELinuxOptions) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SELinuxOptions) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V1SELinuxOptions) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *V1SELinuxOptions) SetType(v string) {
	o.Type = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *V1SELinuxOptions) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SELinuxOptions) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *V1SELinuxOptions) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *V1SELinuxOptions) SetUser(v string) {
	o.User = &v
}

func (o V1SELinuxOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1SELinuxOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableV1SELinuxOptions struct {
	value *V1SELinuxOptions
	isSet bool
}

func (v NullableV1SELinuxOptions) Get() *V1SELinuxOptions {
	return v.value
}

func (v *NullableV1SELinuxOptions) Set(val *V1SELinuxOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableV1SELinuxOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableV1SELinuxOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1SELinuxOptions(val *V1SELinuxOptions) *NullableV1SELinuxOptions {
	return &NullableV1SELinuxOptions{value: val, isSet: true}
}

func (v NullableV1SELinuxOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1SELinuxOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


