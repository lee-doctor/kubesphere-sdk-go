/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1PodAffinityTerm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1PodAffinityTerm{}

// V1PodAffinityTerm Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
type V1PodAffinityTerm struct {
	LabelSelector *V1LabelSelector `json:"labelSelector,omitempty"`
	// MatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key in (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. Also, MatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
	MatchLabelKeys []string `json:"matchLabelKeys,omitempty"`
	// MismatchLabelKeys is a set of pod label keys to select which pods will be taken into consideration. The keys are used to lookup values from the incoming pod labels, those key-value labels are merged with `LabelSelector` as `key notin (value)` to select the group of existing pods which pods will be taken into consideration for the incoming pod's pod (anti) affinity. Keys that don't exist in the incoming pod labels will be ignored. The default value is empty. The same key is forbidden to exist in both MismatchLabelKeys and LabelSelector. Also, MismatchLabelKeys cannot be set when LabelSelector isn't set. This is an alpha field and requires enabling MatchLabelKeysInPodAffinity feature gate.
	MismatchLabelKeys []string `json:"mismatchLabelKeys,omitempty"`
	NamespaceSelector *V1LabelSelector `json:"namespaceSelector,omitempty"`
	// namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".
	Namespaces []string `json:"namespaces,omitempty"`
	// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
	TopologyKey string `json:"topologyKey"`
}

type _V1PodAffinityTerm V1PodAffinityTerm

// NewV1PodAffinityTerm instantiates a new V1PodAffinityTerm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1PodAffinityTerm(topologyKey string) *V1PodAffinityTerm {
	this := V1PodAffinityTerm{}
	this.TopologyKey = topologyKey
	return &this
}

// NewV1PodAffinityTermWithDefaults instantiates a new V1PodAffinityTerm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1PodAffinityTermWithDefaults() *V1PodAffinityTerm {
	this := V1PodAffinityTerm{}
	return &this
}

// GetLabelSelector returns the LabelSelector field value if set, zero value otherwise.
func (o *V1PodAffinityTerm) GetLabelSelector() V1LabelSelector {
	if o == nil || IsNil(o.LabelSelector) {
		var ret V1LabelSelector
		return ret
	}
	return *o.LabelSelector
}

// GetLabelSelectorOk returns a tuple with the LabelSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodAffinityTerm) GetLabelSelectorOk() (*V1LabelSelector, bool) {
	if o == nil || IsNil(o.LabelSelector) {
		return nil, false
	}
	return o.LabelSelector, true
}

// HasLabelSelector returns a boolean if a field has been set.
func (o *V1PodAffinityTerm) HasLabelSelector() bool {
	if o != nil && !IsNil(o.LabelSelector) {
		return true
	}

	return false
}

// SetLabelSelector gets a reference to the given V1LabelSelector and assigns it to the LabelSelector field.
func (o *V1PodAffinityTerm) SetLabelSelector(v V1LabelSelector) {
	o.LabelSelector = &v
}

// GetMatchLabelKeys returns the MatchLabelKeys field value if set, zero value otherwise.
func (o *V1PodAffinityTerm) GetMatchLabelKeys() []string {
	if o == nil || IsNil(o.MatchLabelKeys) {
		var ret []string
		return ret
	}
	return o.MatchLabelKeys
}

// GetMatchLabelKeysOk returns a tuple with the MatchLabelKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodAffinityTerm) GetMatchLabelKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.MatchLabelKeys) {
		return nil, false
	}
	return o.MatchLabelKeys, true
}

// HasMatchLabelKeys returns a boolean if a field has been set.
func (o *V1PodAffinityTerm) HasMatchLabelKeys() bool {
	if o != nil && !IsNil(o.MatchLabelKeys) {
		return true
	}

	return false
}

// SetMatchLabelKeys gets a reference to the given []string and assigns it to the MatchLabelKeys field.
func (o *V1PodAffinityTerm) SetMatchLabelKeys(v []string) {
	o.MatchLabelKeys = v
}

// GetMismatchLabelKeys returns the MismatchLabelKeys field value if set, zero value otherwise.
func (o *V1PodAffinityTerm) GetMismatchLabelKeys() []string {
	if o == nil || IsNil(o.MismatchLabelKeys) {
		var ret []string
		return ret
	}
	return o.MismatchLabelKeys
}

// GetMismatchLabelKeysOk returns a tuple with the MismatchLabelKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodAffinityTerm) GetMismatchLabelKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.MismatchLabelKeys) {
		return nil, false
	}
	return o.MismatchLabelKeys, true
}

// HasMismatchLabelKeys returns a boolean if a field has been set.
func (o *V1PodAffinityTerm) HasMismatchLabelKeys() bool {
	if o != nil && !IsNil(o.MismatchLabelKeys) {
		return true
	}

	return false
}

// SetMismatchLabelKeys gets a reference to the given []string and assigns it to the MismatchLabelKeys field.
func (o *V1PodAffinityTerm) SetMismatchLabelKeys(v []string) {
	o.MismatchLabelKeys = v
}

// GetNamespaceSelector returns the NamespaceSelector field value if set, zero value otherwise.
func (o *V1PodAffinityTerm) GetNamespaceSelector() V1LabelSelector {
	if o == nil || IsNil(o.NamespaceSelector) {
		var ret V1LabelSelector
		return ret
	}
	return *o.NamespaceSelector
}

// GetNamespaceSelectorOk returns a tuple with the NamespaceSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodAffinityTerm) GetNamespaceSelectorOk() (*V1LabelSelector, bool) {
	if o == nil || IsNil(o.NamespaceSelector) {
		return nil, false
	}
	return o.NamespaceSelector, true
}

// HasNamespaceSelector returns a boolean if a field has been set.
func (o *V1PodAffinityTerm) HasNamespaceSelector() bool {
	if o != nil && !IsNil(o.NamespaceSelector) {
		return true
	}

	return false
}

// SetNamespaceSelector gets a reference to the given V1LabelSelector and assigns it to the NamespaceSelector field.
func (o *V1PodAffinityTerm) SetNamespaceSelector(v V1LabelSelector) {
	o.NamespaceSelector = &v
}

// GetNamespaces returns the Namespaces field value if set, zero value otherwise.
func (o *V1PodAffinityTerm) GetNamespaces() []string {
	if o == nil || IsNil(o.Namespaces) {
		var ret []string
		return ret
	}
	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodAffinityTerm) GetNamespacesOk() ([]string, bool) {
	if o == nil || IsNil(o.Namespaces) {
		return nil, false
	}
	return o.Namespaces, true
}

// HasNamespaces returns a boolean if a field has been set.
func (o *V1PodAffinityTerm) HasNamespaces() bool {
	if o != nil && !IsNil(o.Namespaces) {
		return true
	}

	return false
}

// SetNamespaces gets a reference to the given []string and assigns it to the Namespaces field.
func (o *V1PodAffinityTerm) SetNamespaces(v []string) {
	o.Namespaces = v
}

// GetTopologyKey returns the TopologyKey field value
func (o *V1PodAffinityTerm) GetTopologyKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TopologyKey
}

// GetTopologyKeyOk returns a tuple with the TopologyKey field value
// and a boolean to check if the value has been set.
func (o *V1PodAffinityTerm) GetTopologyKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopologyKey, true
}

// SetTopologyKey sets field value
func (o *V1PodAffinityTerm) SetTopologyKey(v string) {
	o.TopologyKey = v
}

func (o V1PodAffinityTerm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1PodAffinityTerm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LabelSelector) {
		toSerialize["labelSelector"] = o.LabelSelector
	}
	if !IsNil(o.MatchLabelKeys) {
		toSerialize["matchLabelKeys"] = o.MatchLabelKeys
	}
	if !IsNil(o.MismatchLabelKeys) {
		toSerialize["mismatchLabelKeys"] = o.MismatchLabelKeys
	}
	if !IsNil(o.NamespaceSelector) {
		toSerialize["namespaceSelector"] = o.NamespaceSelector
	}
	if !IsNil(o.Namespaces) {
		toSerialize["namespaces"] = o.Namespaces
	}
	toSerialize["topologyKey"] = o.TopologyKey
	return toSerialize, nil
}

func (o *V1PodAffinityTerm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"topologyKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1PodAffinityTerm := _V1PodAffinityTerm{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1PodAffinityTerm)

	if err != nil {
		return err
	}

	*o = V1PodAffinityTerm(varV1PodAffinityTerm)

	return err
}

type NullableV1PodAffinityTerm struct {
	value *V1PodAffinityTerm
	isSet bool
}

func (v NullableV1PodAffinityTerm) Get() *V1PodAffinityTerm {
	return v.value
}

func (v *NullableV1PodAffinityTerm) Set(val *V1PodAffinityTerm) {
	v.value = val
	v.isSet = true
}

func (v NullableV1PodAffinityTerm) IsSet() bool {
	return v.isSet
}

func (v *NullableV1PodAffinityTerm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1PodAffinityTerm(val *V1PodAffinityTerm) *NullableV1PodAffinityTerm {
	return &NullableV1PodAffinityTerm{value: val, isSet: true}
}

func (v NullableV1PodAffinityTerm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1PodAffinityTerm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


