/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1LifecycleHandler type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1LifecycleHandler{}

// V1LifecycleHandler LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
type V1LifecycleHandler struct {
	Exec *V1ExecAction `json:"exec,omitempty"`
	HttpGet *V1HTTPGetAction `json:"httpGet,omitempty"`
	Sleep *V1SleepAction `json:"sleep,omitempty"`
	TcpSocket *V1TCPSocketAction `json:"tcpSocket,omitempty"`
}

// NewV1LifecycleHandler instantiates a new V1LifecycleHandler object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1LifecycleHandler() *V1LifecycleHandler {
	this := V1LifecycleHandler{}
	return &this
}

// NewV1LifecycleHandlerWithDefaults instantiates a new V1LifecycleHandler object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1LifecycleHandlerWithDefaults() *V1LifecycleHandler {
	this := V1LifecycleHandler{}
	return &this
}

// GetExec returns the Exec field value if set, zero value otherwise.
func (o *V1LifecycleHandler) GetExec() V1ExecAction {
	if o == nil || IsNil(o.Exec) {
		var ret V1ExecAction
		return ret
	}
	return *o.Exec
}

// GetExecOk returns a tuple with the Exec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1LifecycleHandler) GetExecOk() (*V1ExecAction, bool) {
	if o == nil || IsNil(o.Exec) {
		return nil, false
	}
	return o.Exec, true
}

// HasExec returns a boolean if a field has been set.
func (o *V1LifecycleHandler) HasExec() bool {
	if o != nil && !IsNil(o.Exec) {
		return true
	}

	return false
}

// SetExec gets a reference to the given V1ExecAction and assigns it to the Exec field.
func (o *V1LifecycleHandler) SetExec(v V1ExecAction) {
	o.Exec = &v
}

// GetHttpGet returns the HttpGet field value if set, zero value otherwise.
func (o *V1LifecycleHandler) GetHttpGet() V1HTTPGetAction {
	if o == nil || IsNil(o.HttpGet) {
		var ret V1HTTPGetAction
		return ret
	}
	return *o.HttpGet
}

// GetHttpGetOk returns a tuple with the HttpGet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1LifecycleHandler) GetHttpGetOk() (*V1HTTPGetAction, bool) {
	if o == nil || IsNil(o.HttpGet) {
		return nil, false
	}
	return o.HttpGet, true
}

// HasHttpGet returns a boolean if a field has been set.
func (o *V1LifecycleHandler) HasHttpGet() bool {
	if o != nil && !IsNil(o.HttpGet) {
		return true
	}

	return false
}

// SetHttpGet gets a reference to the given V1HTTPGetAction and assigns it to the HttpGet field.
func (o *V1LifecycleHandler) SetHttpGet(v V1HTTPGetAction) {
	o.HttpGet = &v
}

// GetSleep returns the Sleep field value if set, zero value otherwise.
func (o *V1LifecycleHandler) GetSleep() V1SleepAction {
	if o == nil || IsNil(o.Sleep) {
		var ret V1SleepAction
		return ret
	}
	return *o.Sleep
}

// GetSleepOk returns a tuple with the Sleep field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1LifecycleHandler) GetSleepOk() (*V1SleepAction, bool) {
	if o == nil || IsNil(o.Sleep) {
		return nil, false
	}
	return o.Sleep, true
}

// HasSleep returns a boolean if a field has been set.
func (o *V1LifecycleHandler) HasSleep() bool {
	if o != nil && !IsNil(o.Sleep) {
		return true
	}

	return false
}

// SetSleep gets a reference to the given V1SleepAction and assigns it to the Sleep field.
func (o *V1LifecycleHandler) SetSleep(v V1SleepAction) {
	o.Sleep = &v
}

// GetTcpSocket returns the TcpSocket field value if set, zero value otherwise.
func (o *V1LifecycleHandler) GetTcpSocket() V1TCPSocketAction {
	if o == nil || IsNil(o.TcpSocket) {
		var ret V1TCPSocketAction
		return ret
	}
	return *o.TcpSocket
}

// GetTcpSocketOk returns a tuple with the TcpSocket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1LifecycleHandler) GetTcpSocketOk() (*V1TCPSocketAction, bool) {
	if o == nil || IsNil(o.TcpSocket) {
		return nil, false
	}
	return o.TcpSocket, true
}

// HasTcpSocket returns a boolean if a field has been set.
func (o *V1LifecycleHandler) HasTcpSocket() bool {
	if o != nil && !IsNil(o.TcpSocket) {
		return true
	}

	return false
}

// SetTcpSocket gets a reference to the given V1TCPSocketAction and assigns it to the TcpSocket field.
func (o *V1LifecycleHandler) SetTcpSocket(v V1TCPSocketAction) {
	o.TcpSocket = &v
}

func (o V1LifecycleHandler) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1LifecycleHandler) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Exec) {
		toSerialize["exec"] = o.Exec
	}
	if !IsNil(o.HttpGet) {
		toSerialize["httpGet"] = o.HttpGet
	}
	if !IsNil(o.Sleep) {
		toSerialize["sleep"] = o.Sleep
	}
	if !IsNil(o.TcpSocket) {
		toSerialize["tcpSocket"] = o.TcpSocket
	}
	return toSerialize, nil
}

type NullableV1LifecycleHandler struct {
	value *V1LifecycleHandler
	isSet bool
}

func (v NullableV1LifecycleHandler) Get() *V1LifecycleHandler {
	return v.value
}

func (v *NullableV1LifecycleHandler) Set(val *V1LifecycleHandler) {
	v.value = val
	v.isSet = true
}

func (v NullableV1LifecycleHandler) IsSet() bool {
	return v.isSet
}

func (v *NullableV1LifecycleHandler) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1LifecycleHandler(val *V1LifecycleHandler) *NullableV1LifecycleHandler {
	return &NullableV1LifecycleHandler{value: val, isSet: true}
}

func (v NullableV1LifecycleHandler) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1LifecycleHandler) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


