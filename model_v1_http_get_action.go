/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1HTTPGetAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1HTTPGetAction{}

// V1HTTPGetAction HTTPGetAction describes an action based on HTTP Get requests.
type V1HTTPGetAction struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.
	Host *string `json:"host,omitempty"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []V1HTTPHeader `json:"httpHeaders,omitempty"`
	// Path to access on the HTTP server.
	Path *string `json:"path,omitempty"`
	// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
	Port string `json:"port"`
	// Scheme to use for connecting to the host. Defaults to HTTP.
	Scheme *string `json:"scheme,omitempty"`
}

type _V1HTTPGetAction V1HTTPGetAction

// NewV1HTTPGetAction instantiates a new V1HTTPGetAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1HTTPGetAction(port string) *V1HTTPGetAction {
	this := V1HTTPGetAction{}
	this.Port = port
	return &this
}

// NewV1HTTPGetActionWithDefaults instantiates a new V1HTTPGetAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1HTTPGetActionWithDefaults() *V1HTTPGetAction {
	this := V1HTTPGetAction{}
	return &this
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *V1HTTPGetAction) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1HTTPGetAction) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *V1HTTPGetAction) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *V1HTTPGetAction) SetHost(v string) {
	o.Host = &v
}

// GetHttpHeaders returns the HttpHeaders field value if set, zero value otherwise.
func (o *V1HTTPGetAction) GetHttpHeaders() []V1HTTPHeader {
	if o == nil || IsNil(o.HttpHeaders) {
		var ret []V1HTTPHeader
		return ret
	}
	return o.HttpHeaders
}

// GetHttpHeadersOk returns a tuple with the HttpHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1HTTPGetAction) GetHttpHeadersOk() ([]V1HTTPHeader, bool) {
	if o == nil || IsNil(o.HttpHeaders) {
		return nil, false
	}
	return o.HttpHeaders, true
}

// HasHttpHeaders returns a boolean if a field has been set.
func (o *V1HTTPGetAction) HasHttpHeaders() bool {
	if o != nil && !IsNil(o.HttpHeaders) {
		return true
	}

	return false
}

// SetHttpHeaders gets a reference to the given []V1HTTPHeader and assigns it to the HttpHeaders field.
func (o *V1HTTPGetAction) SetHttpHeaders(v []V1HTTPHeader) {
	o.HttpHeaders = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *V1HTTPGetAction) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1HTTPGetAction) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *V1HTTPGetAction) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *V1HTTPGetAction) SetPath(v string) {
	o.Path = &v
}

// GetPort returns the Port field value
func (o *V1HTTPGetAction) GetPort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *V1HTTPGetAction) GetPortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *V1HTTPGetAction) SetPort(v string) {
	o.Port = v
}

// GetScheme returns the Scheme field value if set, zero value otherwise.
func (o *V1HTTPGetAction) GetScheme() string {
	if o == nil || IsNil(o.Scheme) {
		var ret string
		return ret
	}
	return *o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1HTTPGetAction) GetSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.Scheme) {
		return nil, false
	}
	return o.Scheme, true
}

// HasScheme returns a boolean if a field has been set.
func (o *V1HTTPGetAction) HasScheme() bool {
	if o != nil && !IsNil(o.Scheme) {
		return true
	}

	return false
}

// SetScheme gets a reference to the given string and assigns it to the Scheme field.
func (o *V1HTTPGetAction) SetScheme(v string) {
	o.Scheme = &v
}

func (o V1HTTPGetAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1HTTPGetAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.HttpHeaders) {
		toSerialize["httpHeaders"] = o.HttpHeaders
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	toSerialize["port"] = o.Port
	if !IsNil(o.Scheme) {
		toSerialize["scheme"] = o.Scheme
	}
	return toSerialize, nil
}

func (o *V1HTTPGetAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1HTTPGetAction := _V1HTTPGetAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1HTTPGetAction)

	if err != nil {
		return err
	}

	*o = V1HTTPGetAction(varV1HTTPGetAction)

	return err
}

type NullableV1HTTPGetAction struct {
	value *V1HTTPGetAction
	isSet bool
}

func (v NullableV1HTTPGetAction) Get() *V1HTTPGetAction {
	return v.value
}

func (v *NullableV1HTTPGetAction) Set(val *V1HTTPGetAction) {
	v.value = val
	v.isSet = true
}

func (v NullableV1HTTPGetAction) IsSet() bool {
	return v.isSet
}

func (v *NullableV1HTTPGetAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1HTTPGetAction(val *V1HTTPGetAction) *NullableV1HTTPGetAction {
	return &NullableV1HTTPGetAction{value: val, isSet: true}
}

func (v NullableV1HTTPGetAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1HTTPGetAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


