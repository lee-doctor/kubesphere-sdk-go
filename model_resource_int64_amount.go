/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResourceInt64Amount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceInt64Amount{}

// ResourceInt64Amount struct for ResourceInt64Amount
type ResourceInt64Amount struct {
	Scale int32 `json:"scale"`
	Value int64 `json:"value"`
}

type _ResourceInt64Amount ResourceInt64Amount

// NewResourceInt64Amount instantiates a new ResourceInt64Amount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceInt64Amount(scale int32, value int64) *ResourceInt64Amount {
	this := ResourceInt64Amount{}
	this.Scale = scale
	this.Value = value
	return &this
}

// NewResourceInt64AmountWithDefaults instantiates a new ResourceInt64Amount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceInt64AmountWithDefaults() *ResourceInt64Amount {
	this := ResourceInt64Amount{}
	return &this
}

// GetScale returns the Scale field value
func (o *ResourceInt64Amount) GetScale() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Scale
}

// GetScaleOk returns a tuple with the Scale field value
// and a boolean to check if the value has been set.
func (o *ResourceInt64Amount) GetScaleOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scale, true
}

// SetScale sets field value
func (o *ResourceInt64Amount) SetScale(v int32) {
	o.Scale = v
}

// GetValue returns the Value field value
func (o *ResourceInt64Amount) GetValue() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ResourceInt64Amount) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ResourceInt64Amount) SetValue(v int64) {
	o.Value = v
}

func (o ResourceInt64Amount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceInt64Amount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["scale"] = o.Scale
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *ResourceInt64Amount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"scale",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceInt64Amount := _ResourceInt64Amount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceInt64Amount)

	if err != nil {
		return err
	}

	*o = ResourceInt64Amount(varResourceInt64Amount)

	return err
}

type NullableResourceInt64Amount struct {
	value *ResourceInt64Amount
	isSet bool
}

func (v NullableResourceInt64Amount) Get() *ResourceInt64Amount {
	return v.value
}

func (v *NullableResourceInt64Amount) Set(val *ResourceInt64Amount) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceInt64Amount) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceInt64Amount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceInt64Amount(val *ResourceInt64Amount) *NullableResourceInt64Amount {
	return &NullableResourceInt64Amount{value: val, isSet: true}
}

func (v NullableResourceInt64Amount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceInt64Amount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


