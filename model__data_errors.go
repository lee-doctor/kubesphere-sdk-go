/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DataErrors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataErrors{}

// DataErrors struct for DataErrors
type DataErrors struct {
	// error message
	Error *string `json:"error,omitempty"`
	// err location
	Location []string `json:"location,omitempty"`
}

// NewDataErrors instantiates a new DataErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataErrors() *DataErrors {
	this := DataErrors{}
	return &this
}

// NewDataErrorsWithDefaults instantiates a new DataErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataErrorsWithDefaults() *DataErrors {
	this := DataErrors{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *DataErrors) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataErrors) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *DataErrors) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *DataErrors) SetError(v string) {
	o.Error = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *DataErrors) GetLocation() []string {
	if o == nil || IsNil(o.Location) {
		var ret []string
		return ret
	}
	return o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataErrors) GetLocationOk() ([]string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *DataErrors) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given []string and assigns it to the Location field.
func (o *DataErrors) SetLocation(v []string) {
	o.Location = v
}

func (o DataErrors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataErrors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	return toSerialize, nil
}

type NullableDataErrors struct {
	value *DataErrors
	isSet bool
}

func (v NullableDataErrors) Get() *DataErrors {
	return v.value
}

func (v *NullableDataErrors) Set(val *DataErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableDataErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableDataErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataErrors(val *DataErrors) *NullableDataErrors {
	return &NullableDataErrors{value: val, isSet: true}
}

func (v NullableDataErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


