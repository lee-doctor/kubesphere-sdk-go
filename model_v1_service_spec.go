/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1ServiceSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ServiceSpec{}

// V1ServiceSpec ServiceSpec describes the attributes that a user creates on a service.
type V1ServiceSpec struct {
	// clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are \"None\", empty string (\"\"), or a valid IP address. \"None\" can be specified for headless services when proxying is not required. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	ClusterIP *string `json:"clusterIP,omitempty"`
	// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
	ExternalIPs []string `json:"externalIPs,omitempty"`
	// externalName is the external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be ExternalName.
	ExternalName *string `json:"externalName,omitempty"`
	// externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
	ExternalTrafficPolicy *string `json:"externalTrafficPolicy,omitempty"`
	// healthCheckNodePort specifies the healthcheck nodePort for the service. If not specified, HealthCheckNodePort is created by the service api backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when Type is set to LoadBalancer and ExternalTrafficPolicy is set to Local.
	HealthCheckNodePort *int32 `json:"healthCheckNodePort,omitempty"`
	// ipFamily specifies whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6).  If a specific IP family is requested, the clusterIP field will be allocated from that family, if it is available in the cluster.  If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (loadBalancerIP, loadBalancerSourceRanges, externalIPs) and controllers which allocate external load-balancers should use the same IP family.  Endpoints for this Service will be of this family.  This field is immutable after creation. Assigning a ServiceIPFamily not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during clusterIP assignment.
	IpFamily *string `json:"ipFamily,omitempty"`
	// Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
	LoadBalancerIP *string `json:"loadBalancerIP,omitempty"`
	// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
	LoadBalancerSourceRanges []string `json:"loadBalancerSourceRanges,omitempty"`
	// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	Ports []V1ServicePort `json:"ports,omitempty"`
	// publishNotReadyAddresses, when set to true, indicates that DNS implementations must publish the notReadyAddresses of subsets for the Endpoints associated with the Service. The default value is false. The primary use case for setting this field is to use a StatefulSet's Headless Service to propagate SRV records for its Pods without respect to their readiness for purpose of peer discovery.
	PublishNotReadyAddresses *bool `json:"publishNotReadyAddresses,omitempty"`
	// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
	Selector *map[string]string `json:"selector,omitempty"`
	// Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
	SessionAffinity *string `json:"sessionAffinity,omitempty"`
	SessionAffinityConfig *V1SessionAffinityConfig `json:"sessionAffinityConfig,omitempty"`
	// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value \"*\" may be used to mean \"any topology\". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.
	TopologyKeys []string `json:"topologyKeys,omitempty"`
	// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ExternalName\" maps to the specified externalName. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the clusterIP. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
	Type *string `json:"type,omitempty"`
}

// NewV1ServiceSpec instantiates a new V1ServiceSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ServiceSpec() *V1ServiceSpec {
	this := V1ServiceSpec{}
	return &this
}

// NewV1ServiceSpecWithDefaults instantiates a new V1ServiceSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ServiceSpecWithDefaults() *V1ServiceSpec {
	this := V1ServiceSpec{}
	return &this
}

// GetClusterIP returns the ClusterIP field value if set, zero value otherwise.
func (o *V1ServiceSpec) GetClusterIP() string {
	if o == nil || IsNil(o.ClusterIP) {
		var ret string
		return ret
	}
	return *o.ClusterIP
}

// GetClusterIPOk returns a tuple with the ClusterIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServiceSpec) GetClusterIPOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterIP) {
		return nil, false
	}
	return o.ClusterIP, true
}

// HasClusterIP returns a boolean if a field has been set.
func (o *V1ServiceSpec) HasClusterIP() bool {
	if o != nil && !IsNil(o.ClusterIP) {
		return true
	}

	return false
}

// SetClusterIP gets a reference to the given string and assigns it to the ClusterIP field.
func (o *V1ServiceSpec) SetClusterIP(v string) {
	o.ClusterIP = &v
}

// GetExternalIPs returns the ExternalIPs field value if set, zero value otherwise.
func (o *V1ServiceSpec) GetExternalIPs() []string {
	if o == nil || IsNil(o.ExternalIPs) {
		var ret []string
		return ret
	}
	return o.ExternalIPs
}

// GetExternalIPsOk returns a tuple with the ExternalIPs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServiceSpec) GetExternalIPsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExternalIPs) {
		return nil, false
	}
	return o.ExternalIPs, true
}

// HasExternalIPs returns a boolean if a field has been set.
func (o *V1ServiceSpec) HasExternalIPs() bool {
	if o != nil && !IsNil(o.ExternalIPs) {
		return true
	}

	return false
}

// SetExternalIPs gets a reference to the given []string and assigns it to the ExternalIPs field.
func (o *V1ServiceSpec) SetExternalIPs(v []string) {
	o.ExternalIPs = v
}

// GetExternalName returns the ExternalName field value if set, zero value otherwise.
func (o *V1ServiceSpec) GetExternalName() string {
	if o == nil || IsNil(o.ExternalName) {
		var ret string
		return ret
	}
	return *o.ExternalName
}

// GetExternalNameOk returns a tuple with the ExternalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServiceSpec) GetExternalNameOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalName) {
		return nil, false
	}
	return o.ExternalName, true
}

// HasExternalName returns a boolean if a field has been set.
func (o *V1ServiceSpec) HasExternalName() bool {
	if o != nil && !IsNil(o.ExternalName) {
		return true
	}

	return false
}

// SetExternalName gets a reference to the given string and assigns it to the ExternalName field.
func (o *V1ServiceSpec) SetExternalName(v string) {
	o.ExternalName = &v
}

// GetExternalTrafficPolicy returns the ExternalTrafficPolicy field value if set, zero value otherwise.
func (o *V1ServiceSpec) GetExternalTrafficPolicy() string {
	if o == nil || IsNil(o.ExternalTrafficPolicy) {
		var ret string
		return ret
	}
	return *o.ExternalTrafficPolicy
}

// GetExternalTrafficPolicyOk returns a tuple with the ExternalTrafficPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServiceSpec) GetExternalTrafficPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalTrafficPolicy) {
		return nil, false
	}
	return o.ExternalTrafficPolicy, true
}

// HasExternalTrafficPolicy returns a boolean if a field has been set.
func (o *V1ServiceSpec) HasExternalTrafficPolicy() bool {
	if o != nil && !IsNil(o.ExternalTrafficPolicy) {
		return true
	}

	return false
}

// SetExternalTrafficPolicy gets a reference to the given string and assigns it to the ExternalTrafficPolicy field.
func (o *V1ServiceSpec) SetExternalTrafficPolicy(v string) {
	o.ExternalTrafficPolicy = &v
}

// GetHealthCheckNodePort returns the HealthCheckNodePort field value if set, zero value otherwise.
func (o *V1ServiceSpec) GetHealthCheckNodePort() int32 {
	if o == nil || IsNil(o.HealthCheckNodePort) {
		var ret int32
		return ret
	}
	return *o.HealthCheckNodePort
}

// GetHealthCheckNodePortOk returns a tuple with the HealthCheckNodePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServiceSpec) GetHealthCheckNodePortOk() (*int32, bool) {
	if o == nil || IsNil(o.HealthCheckNodePort) {
		return nil, false
	}
	return o.HealthCheckNodePort, true
}

// HasHealthCheckNodePort returns a boolean if a field has been set.
func (o *V1ServiceSpec) HasHealthCheckNodePort() bool {
	if o != nil && !IsNil(o.HealthCheckNodePort) {
		return true
	}

	return false
}

// SetHealthCheckNodePort gets a reference to the given int32 and assigns it to the HealthCheckNodePort field.
func (o *V1ServiceSpec) SetHealthCheckNodePort(v int32) {
	o.HealthCheckNodePort = &v
}

// GetIpFamily returns the IpFamily field value if set, zero value otherwise.
func (o *V1ServiceSpec) GetIpFamily() string {
	if o == nil || IsNil(o.IpFamily) {
		var ret string
		return ret
	}
	return *o.IpFamily
}

// GetIpFamilyOk returns a tuple with the IpFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServiceSpec) GetIpFamilyOk() (*string, bool) {
	if o == nil || IsNil(o.IpFamily) {
		return nil, false
	}
	return o.IpFamily, true
}

// HasIpFamily returns a boolean if a field has been set.
func (o *V1ServiceSpec) HasIpFamily() bool {
	if o != nil && !IsNil(o.IpFamily) {
		return true
	}

	return false
}

// SetIpFamily gets a reference to the given string and assigns it to the IpFamily field.
func (o *V1ServiceSpec) SetIpFamily(v string) {
	o.IpFamily = &v
}

// GetLoadBalancerIP returns the LoadBalancerIP field value if set, zero value otherwise.
func (o *V1ServiceSpec) GetLoadBalancerIP() string {
	if o == nil || IsNil(o.LoadBalancerIP) {
		var ret string
		return ret
	}
	return *o.LoadBalancerIP
}

// GetLoadBalancerIPOk returns a tuple with the LoadBalancerIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServiceSpec) GetLoadBalancerIPOk() (*string, bool) {
	if o == nil || IsNil(o.LoadBalancerIP) {
		return nil, false
	}
	return o.LoadBalancerIP, true
}

// HasLoadBalancerIP returns a boolean if a field has been set.
func (o *V1ServiceSpec) HasLoadBalancerIP() bool {
	if o != nil && !IsNil(o.LoadBalancerIP) {
		return true
	}

	return false
}

// SetLoadBalancerIP gets a reference to the given string and assigns it to the LoadBalancerIP field.
func (o *V1ServiceSpec) SetLoadBalancerIP(v string) {
	o.LoadBalancerIP = &v
}

// GetLoadBalancerSourceRanges returns the LoadBalancerSourceRanges field value if set, zero value otherwise.
func (o *V1ServiceSpec) GetLoadBalancerSourceRanges() []string {
	if o == nil || IsNil(o.LoadBalancerSourceRanges) {
		var ret []string
		return ret
	}
	return o.LoadBalancerSourceRanges
}

// GetLoadBalancerSourceRangesOk returns a tuple with the LoadBalancerSourceRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServiceSpec) GetLoadBalancerSourceRangesOk() ([]string, bool) {
	if o == nil || IsNil(o.LoadBalancerSourceRanges) {
		return nil, false
	}
	return o.LoadBalancerSourceRanges, true
}

// HasLoadBalancerSourceRanges returns a boolean if a field has been set.
func (o *V1ServiceSpec) HasLoadBalancerSourceRanges() bool {
	if o != nil && !IsNil(o.LoadBalancerSourceRanges) {
		return true
	}

	return false
}

// SetLoadBalancerSourceRanges gets a reference to the given []string and assigns it to the LoadBalancerSourceRanges field.
func (o *V1ServiceSpec) SetLoadBalancerSourceRanges(v []string) {
	o.LoadBalancerSourceRanges = v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *V1ServiceSpec) GetPorts() []V1ServicePort {
	if o == nil || IsNil(o.Ports) {
		var ret []V1ServicePort
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServiceSpec) GetPortsOk() ([]V1ServicePort, bool) {
	if o == nil || IsNil(o.Ports) {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *V1ServiceSpec) HasPorts() bool {
	if o != nil && !IsNil(o.Ports) {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []V1ServicePort and assigns it to the Ports field.
func (o *V1ServiceSpec) SetPorts(v []V1ServicePort) {
	o.Ports = v
}

// GetPublishNotReadyAddresses returns the PublishNotReadyAddresses field value if set, zero value otherwise.
func (o *V1ServiceSpec) GetPublishNotReadyAddresses() bool {
	if o == nil || IsNil(o.PublishNotReadyAddresses) {
		var ret bool
		return ret
	}
	return *o.PublishNotReadyAddresses
}

// GetPublishNotReadyAddressesOk returns a tuple with the PublishNotReadyAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServiceSpec) GetPublishNotReadyAddressesOk() (*bool, bool) {
	if o == nil || IsNil(o.PublishNotReadyAddresses) {
		return nil, false
	}
	return o.PublishNotReadyAddresses, true
}

// HasPublishNotReadyAddresses returns a boolean if a field has been set.
func (o *V1ServiceSpec) HasPublishNotReadyAddresses() bool {
	if o != nil && !IsNil(o.PublishNotReadyAddresses) {
		return true
	}

	return false
}

// SetPublishNotReadyAddresses gets a reference to the given bool and assigns it to the PublishNotReadyAddresses field.
func (o *V1ServiceSpec) SetPublishNotReadyAddresses(v bool) {
	o.PublishNotReadyAddresses = &v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *V1ServiceSpec) GetSelector() map[string]string {
	if o == nil || IsNil(o.Selector) {
		var ret map[string]string
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServiceSpec) GetSelectorOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *V1ServiceSpec) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given map[string]string and assigns it to the Selector field.
func (o *V1ServiceSpec) SetSelector(v map[string]string) {
	o.Selector = &v
}

// GetSessionAffinity returns the SessionAffinity field value if set, zero value otherwise.
func (o *V1ServiceSpec) GetSessionAffinity() string {
	if o == nil || IsNil(o.SessionAffinity) {
		var ret string
		return ret
	}
	return *o.SessionAffinity
}

// GetSessionAffinityOk returns a tuple with the SessionAffinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServiceSpec) GetSessionAffinityOk() (*string, bool) {
	if o == nil || IsNil(o.SessionAffinity) {
		return nil, false
	}
	return o.SessionAffinity, true
}

// HasSessionAffinity returns a boolean if a field has been set.
func (o *V1ServiceSpec) HasSessionAffinity() bool {
	if o != nil && !IsNil(o.SessionAffinity) {
		return true
	}

	return false
}

// SetSessionAffinity gets a reference to the given string and assigns it to the SessionAffinity field.
func (o *V1ServiceSpec) SetSessionAffinity(v string) {
	o.SessionAffinity = &v
}

// GetSessionAffinityConfig returns the SessionAffinityConfig field value if set, zero value otherwise.
func (o *V1ServiceSpec) GetSessionAffinityConfig() V1SessionAffinityConfig {
	if o == nil || IsNil(o.SessionAffinityConfig) {
		var ret V1SessionAffinityConfig
		return ret
	}
	return *o.SessionAffinityConfig
}

// GetSessionAffinityConfigOk returns a tuple with the SessionAffinityConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServiceSpec) GetSessionAffinityConfigOk() (*V1SessionAffinityConfig, bool) {
	if o == nil || IsNil(o.SessionAffinityConfig) {
		return nil, false
	}
	return o.SessionAffinityConfig, true
}

// HasSessionAffinityConfig returns a boolean if a field has been set.
func (o *V1ServiceSpec) HasSessionAffinityConfig() bool {
	if o != nil && !IsNil(o.SessionAffinityConfig) {
		return true
	}

	return false
}

// SetSessionAffinityConfig gets a reference to the given V1SessionAffinityConfig and assigns it to the SessionAffinityConfig field.
func (o *V1ServiceSpec) SetSessionAffinityConfig(v V1SessionAffinityConfig) {
	o.SessionAffinityConfig = &v
}

// GetTopologyKeys returns the TopologyKeys field value if set, zero value otherwise.
func (o *V1ServiceSpec) GetTopologyKeys() []string {
	if o == nil || IsNil(o.TopologyKeys) {
		var ret []string
		return ret
	}
	return o.TopologyKeys
}

// GetTopologyKeysOk returns a tuple with the TopologyKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServiceSpec) GetTopologyKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.TopologyKeys) {
		return nil, false
	}
	return o.TopologyKeys, true
}

// HasTopologyKeys returns a boolean if a field has been set.
func (o *V1ServiceSpec) HasTopologyKeys() bool {
	if o != nil && !IsNil(o.TopologyKeys) {
		return true
	}

	return false
}

// SetTopologyKeys gets a reference to the given []string and assigns it to the TopologyKeys field.
func (o *V1ServiceSpec) SetTopologyKeys(v []string) {
	o.TopologyKeys = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V1ServiceSpec) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ServiceSpec) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V1ServiceSpec) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *V1ServiceSpec) SetType(v string) {
	o.Type = &v
}

func (o V1ServiceSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ServiceSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClusterIP) {
		toSerialize["clusterIP"] = o.ClusterIP
	}
	if !IsNil(o.ExternalIPs) {
		toSerialize["externalIPs"] = o.ExternalIPs
	}
	if !IsNil(o.ExternalName) {
		toSerialize["externalName"] = o.ExternalName
	}
	if !IsNil(o.ExternalTrafficPolicy) {
		toSerialize["externalTrafficPolicy"] = o.ExternalTrafficPolicy
	}
	if !IsNil(o.HealthCheckNodePort) {
		toSerialize["healthCheckNodePort"] = o.HealthCheckNodePort
	}
	if !IsNil(o.IpFamily) {
		toSerialize["ipFamily"] = o.IpFamily
	}
	if !IsNil(o.LoadBalancerIP) {
		toSerialize["loadBalancerIP"] = o.LoadBalancerIP
	}
	if !IsNil(o.LoadBalancerSourceRanges) {
		toSerialize["loadBalancerSourceRanges"] = o.LoadBalancerSourceRanges
	}
	if !IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}
	if !IsNil(o.PublishNotReadyAddresses) {
		toSerialize["publishNotReadyAddresses"] = o.PublishNotReadyAddresses
	}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !IsNil(o.SessionAffinity) {
		toSerialize["sessionAffinity"] = o.SessionAffinity
	}
	if !IsNil(o.SessionAffinityConfig) {
		toSerialize["sessionAffinityConfig"] = o.SessionAffinityConfig
	}
	if !IsNil(o.TopologyKeys) {
		toSerialize["topologyKeys"] = o.TopologyKeys
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableV1ServiceSpec struct {
	value *V1ServiceSpec
	isSet bool
}

func (v NullableV1ServiceSpec) Get() *V1ServiceSpec {
	return v.value
}

func (v *NullableV1ServiceSpec) Set(val *V1ServiceSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ServiceSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ServiceSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ServiceSpec(val *V1ServiceSpec) *NullableV1ServiceSpec {
	return &NullableV1ServiceSpec{value: val, isSet: true}
}

func (v NullableV1ServiceSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ServiceSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


