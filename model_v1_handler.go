/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1Handler type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Handler{}

// V1Handler Handler defines a specific action that should be taken
type V1Handler struct {
	Exec *V1ExecAction `json:"exec,omitempty"`
	HttpGet *V1HTTPGetAction `json:"httpGet,omitempty"`
	TcpSocket *V1TCPSocketAction `json:"tcpSocket,omitempty"`
}

// NewV1Handler instantiates a new V1Handler object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Handler() *V1Handler {
	this := V1Handler{}
	return &this
}

// NewV1HandlerWithDefaults instantiates a new V1Handler object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1HandlerWithDefaults() *V1Handler {
	this := V1Handler{}
	return &this
}

// GetExec returns the Exec field value if set, zero value otherwise.
func (o *V1Handler) GetExec() V1ExecAction {
	if o == nil || IsNil(o.Exec) {
		var ret V1ExecAction
		return ret
	}
	return *o.Exec
}

// GetExecOk returns a tuple with the Exec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Handler) GetExecOk() (*V1ExecAction, bool) {
	if o == nil || IsNil(o.Exec) {
		return nil, false
	}
	return o.Exec, true
}

// HasExec returns a boolean if a field has been set.
func (o *V1Handler) HasExec() bool {
	if o != nil && !IsNil(o.Exec) {
		return true
	}

	return false
}

// SetExec gets a reference to the given V1ExecAction and assigns it to the Exec field.
func (o *V1Handler) SetExec(v V1ExecAction) {
	o.Exec = &v
}

// GetHttpGet returns the HttpGet field value if set, zero value otherwise.
func (o *V1Handler) GetHttpGet() V1HTTPGetAction {
	if o == nil || IsNil(o.HttpGet) {
		var ret V1HTTPGetAction
		return ret
	}
	return *o.HttpGet
}

// GetHttpGetOk returns a tuple with the HttpGet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Handler) GetHttpGetOk() (*V1HTTPGetAction, bool) {
	if o == nil || IsNil(o.HttpGet) {
		return nil, false
	}
	return o.HttpGet, true
}

// HasHttpGet returns a boolean if a field has been set.
func (o *V1Handler) HasHttpGet() bool {
	if o != nil && !IsNil(o.HttpGet) {
		return true
	}

	return false
}

// SetHttpGet gets a reference to the given V1HTTPGetAction and assigns it to the HttpGet field.
func (o *V1Handler) SetHttpGet(v V1HTTPGetAction) {
	o.HttpGet = &v
}

// GetTcpSocket returns the TcpSocket field value if set, zero value otherwise.
func (o *V1Handler) GetTcpSocket() V1TCPSocketAction {
	if o == nil || IsNil(o.TcpSocket) {
		var ret V1TCPSocketAction
		return ret
	}
	return *o.TcpSocket
}

// GetTcpSocketOk returns a tuple with the TcpSocket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Handler) GetTcpSocketOk() (*V1TCPSocketAction, bool) {
	if o == nil || IsNil(o.TcpSocket) {
		return nil, false
	}
	return o.TcpSocket, true
}

// HasTcpSocket returns a boolean if a field has been set.
func (o *V1Handler) HasTcpSocket() bool {
	if o != nil && !IsNil(o.TcpSocket) {
		return true
	}

	return false
}

// SetTcpSocket gets a reference to the given V1TCPSocketAction and assigns it to the TcpSocket field.
func (o *V1Handler) SetTcpSocket(v V1TCPSocketAction) {
	o.TcpSocket = &v
}

func (o V1Handler) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Handler) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Exec) {
		toSerialize["exec"] = o.Exec
	}
	if !IsNil(o.HttpGet) {
		toSerialize["httpGet"] = o.HttpGet
	}
	if !IsNil(o.TcpSocket) {
		toSerialize["tcpSocket"] = o.TcpSocket
	}
	return toSerialize, nil
}

type NullableV1Handler struct {
	value *V1Handler
	isSet bool
}

func (v NullableV1Handler) Get() *V1Handler {
	return v.value
}

func (v *NullableV1Handler) Set(val *V1Handler) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Handler) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Handler) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Handler(val *V1Handler) *NullableV1Handler {
	return &NullableV1Handler{value: val, isSet: true}
}

func (v NullableV1Handler) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Handler) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


