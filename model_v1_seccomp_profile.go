/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1SeccompProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1SeccompProfile{}

// V1SeccompProfile SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
type V1SeccompProfile struct {
	// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must be set if type is \"Localhost\". Must NOT be set for any other type.
	LocalhostProfile *string `json:"localhostProfile,omitempty"`
	// type indicates which kind of seccomp profile will be applied. Valid options are:  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
	Type string `json:"type"`
}

type _V1SeccompProfile V1SeccompProfile

// NewV1SeccompProfile instantiates a new V1SeccompProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1SeccompProfile(type_ string) *V1SeccompProfile {
	this := V1SeccompProfile{}
	this.Type = type_
	return &this
}

// NewV1SeccompProfileWithDefaults instantiates a new V1SeccompProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1SeccompProfileWithDefaults() *V1SeccompProfile {
	this := V1SeccompProfile{}
	return &this
}

// GetLocalhostProfile returns the LocalhostProfile field value if set, zero value otherwise.
func (o *V1SeccompProfile) GetLocalhostProfile() string {
	if o == nil || IsNil(o.LocalhostProfile) {
		var ret string
		return ret
	}
	return *o.LocalhostProfile
}

// GetLocalhostProfileOk returns a tuple with the LocalhostProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SeccompProfile) GetLocalhostProfileOk() (*string, bool) {
	if o == nil || IsNil(o.LocalhostProfile) {
		return nil, false
	}
	return o.LocalhostProfile, true
}

// HasLocalhostProfile returns a boolean if a field has been set.
func (o *V1SeccompProfile) HasLocalhostProfile() bool {
	if o != nil && !IsNil(o.LocalhostProfile) {
		return true
	}

	return false
}

// SetLocalhostProfile gets a reference to the given string and assigns it to the LocalhostProfile field.
func (o *V1SeccompProfile) SetLocalhostProfile(v string) {
	o.LocalhostProfile = &v
}

// GetType returns the Type field value
func (o *V1SeccompProfile) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *V1SeccompProfile) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *V1SeccompProfile) SetType(v string) {
	o.Type = v
}

func (o V1SeccompProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1SeccompProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LocalhostProfile) {
		toSerialize["localhostProfile"] = o.LocalhostProfile
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *V1SeccompProfile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1SeccompProfile := _V1SeccompProfile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1SeccompProfile)

	if err != nil {
		return err
	}

	*o = V1SeccompProfile(varV1SeccompProfile)

	return err
}

type NullableV1SeccompProfile struct {
	value *V1SeccompProfile
	isSet bool
}

func (v NullableV1SeccompProfile) Get() *V1SeccompProfile {
	return v.value
}

func (v *NullableV1SeccompProfile) Set(val *V1SeccompProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableV1SeccompProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableV1SeccompProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1SeccompProfile(val *V1SeccompProfile) *NullableV1SeccompProfile {
	return &NullableV1SeccompProfile{value: val, isSet: true}
}

func (v NullableV1SeccompProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1SeccompProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


