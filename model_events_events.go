/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EventsEvents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventsEvents{}

// EventsEvents struct for EventsEvents
type EventsEvents struct {
	// actual array of results
	Records []V1Event `json:"records"`
	// total number of matched results
	Total int64 `json:"total"`
}

type _EventsEvents EventsEvents

// NewEventsEvents instantiates a new EventsEvents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsEvents(records []V1Event, total int64) *EventsEvents {
	this := EventsEvents{}
	this.Records = records
	this.Total = total
	return &this
}

// NewEventsEventsWithDefaults instantiates a new EventsEvents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsEventsWithDefaults() *EventsEvents {
	this := EventsEvents{}
	return &this
}

// GetRecords returns the Records field value
func (o *EventsEvents) GetRecords() []V1Event {
	if o == nil {
		var ret []V1Event
		return ret
	}

	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value
// and a boolean to check if the value has been set.
func (o *EventsEvents) GetRecordsOk() ([]V1Event, bool) {
	if o == nil {
		return nil, false
	}
	return o.Records, true
}

// SetRecords sets field value
func (o *EventsEvents) SetRecords(v []V1Event) {
	o.Records = v
}

// GetTotal returns the Total field value
func (o *EventsEvents) GetTotal() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *EventsEvents) GetTotalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *EventsEvents) SetTotal(v int64) {
	o.Total = v
}

func (o EventsEvents) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventsEvents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["records"] = o.Records
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *EventsEvents) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"records",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEventsEvents := _EventsEvents{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEventsEvents)

	if err != nil {
		return err
	}

	*o = EventsEvents(varEventsEvents)

	return err
}

type NullableEventsEvents struct {
	value *EventsEvents
	isSet bool
}

func (v NullableEventsEvents) Get() *EventsEvents {
	return v.value
}

func (v *NullableEventsEvents) Set(val *EventsEvents) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsEvents) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsEvents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsEvents(val *EventsEvents) *NullableEventsEvents {
	return &NullableEventsEvents{value: val, isSet: true}
}

func (v NullableEventsEvents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsEvents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


