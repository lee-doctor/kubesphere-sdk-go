/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1alpha2Scope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha2Scope{}

// V1alpha2Scope struct for V1alpha2Scope
type V1alpha2Scope struct {
	NamespaceSelector *string `json:"namespaceSelector,omitempty"`
	Namespaces []string `json:"namespaces,omitempty"`
}

// NewV1alpha2Scope instantiates a new V1alpha2Scope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha2Scope() *V1alpha2Scope {
	this := V1alpha2Scope{}
	return &this
}

// NewV1alpha2ScopeWithDefaults instantiates a new V1alpha2Scope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha2ScopeWithDefaults() *V1alpha2Scope {
	this := V1alpha2Scope{}
	return &this
}

// GetNamespaceSelector returns the NamespaceSelector field value if set, zero value otherwise.
func (o *V1alpha2Scope) GetNamespaceSelector() string {
	if o == nil || IsNil(o.NamespaceSelector) {
		var ret string
		return ret
	}
	return *o.NamespaceSelector
}

// GetNamespaceSelectorOk returns a tuple with the NamespaceSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2Scope) GetNamespaceSelectorOk() (*string, bool) {
	if o == nil || IsNil(o.NamespaceSelector) {
		return nil, false
	}
	return o.NamespaceSelector, true
}

// HasNamespaceSelector returns a boolean if a field has been set.
func (o *V1alpha2Scope) HasNamespaceSelector() bool {
	if o != nil && !IsNil(o.NamespaceSelector) {
		return true
	}

	return false
}

// SetNamespaceSelector gets a reference to the given string and assigns it to the NamespaceSelector field.
func (o *V1alpha2Scope) SetNamespaceSelector(v string) {
	o.NamespaceSelector = &v
}

// GetNamespaces returns the Namespaces field value if set, zero value otherwise.
func (o *V1alpha2Scope) GetNamespaces() []string {
	if o == nil || IsNil(o.Namespaces) {
		var ret []string
		return ret
	}
	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2Scope) GetNamespacesOk() ([]string, bool) {
	if o == nil || IsNil(o.Namespaces) {
		return nil, false
	}
	return o.Namespaces, true
}

// HasNamespaces returns a boolean if a field has been set.
func (o *V1alpha2Scope) HasNamespaces() bool {
	if o != nil && !IsNil(o.Namespaces) {
		return true
	}

	return false
}

// SetNamespaces gets a reference to the given []string and assigns it to the Namespaces field.
func (o *V1alpha2Scope) SetNamespaces(v []string) {
	o.Namespaces = v
}

func (o V1alpha2Scope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha2Scope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NamespaceSelector) {
		toSerialize["namespaceSelector"] = o.NamespaceSelector
	}
	if !IsNil(o.Namespaces) {
		toSerialize["namespaces"] = o.Namespaces
	}
	return toSerialize, nil
}

type NullableV1alpha2Scope struct {
	value *V1alpha2Scope
	isSet bool
}

func (v NullableV1alpha2Scope) Get() *V1alpha2Scope {
	return v.value
}

func (v *NullableV1alpha2Scope) Set(val *V1alpha2Scope) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha2Scope) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha2Scope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha2Scope(val *V1alpha2Scope) *NullableV1alpha2Scope {
	return &NullableV1alpha2Scope{value: val, isSet: true}
}

func (v NullableV1alpha2Scope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha2Scope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


