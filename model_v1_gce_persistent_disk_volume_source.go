/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1GCEPersistentDiskVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1GCEPersistentDiskVolumeSource{}

// V1GCEPersistentDiskVolumeSource Represents a Persistent Disk resource in Google Compute Engine.  A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
type V1GCEPersistentDiskVolumeSource struct {
	// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	FsType *string `json:"fsType,omitempty"`
	// The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	Partition *int32 `json:"partition,omitempty"`
	// Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	PdName string `json:"pdName"`
	// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	ReadOnly *bool `json:"readOnly,omitempty"`
}

type _V1GCEPersistentDiskVolumeSource V1GCEPersistentDiskVolumeSource

// NewV1GCEPersistentDiskVolumeSource instantiates a new V1GCEPersistentDiskVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1GCEPersistentDiskVolumeSource(pdName string) *V1GCEPersistentDiskVolumeSource {
	this := V1GCEPersistentDiskVolumeSource{}
	this.PdName = pdName
	return &this
}

// NewV1GCEPersistentDiskVolumeSourceWithDefaults instantiates a new V1GCEPersistentDiskVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1GCEPersistentDiskVolumeSourceWithDefaults() *V1GCEPersistentDiskVolumeSource {
	this := V1GCEPersistentDiskVolumeSource{}
	return &this
}

// GetFsType returns the FsType field value if set, zero value otherwise.
func (o *V1GCEPersistentDiskVolumeSource) GetFsType() string {
	if o == nil || IsNil(o.FsType) {
		var ret string
		return ret
	}
	return *o.FsType
}

// GetFsTypeOk returns a tuple with the FsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GCEPersistentDiskVolumeSource) GetFsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FsType) {
		return nil, false
	}
	return o.FsType, true
}

// HasFsType returns a boolean if a field has been set.
func (o *V1GCEPersistentDiskVolumeSource) HasFsType() bool {
	if o != nil && !IsNil(o.FsType) {
		return true
	}

	return false
}

// SetFsType gets a reference to the given string and assigns it to the FsType field.
func (o *V1GCEPersistentDiskVolumeSource) SetFsType(v string) {
	o.FsType = &v
}

// GetPartition returns the Partition field value if set, zero value otherwise.
func (o *V1GCEPersistentDiskVolumeSource) GetPartition() int32 {
	if o == nil || IsNil(o.Partition) {
		var ret int32
		return ret
	}
	return *o.Partition
}

// GetPartitionOk returns a tuple with the Partition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GCEPersistentDiskVolumeSource) GetPartitionOk() (*int32, bool) {
	if o == nil || IsNil(o.Partition) {
		return nil, false
	}
	return o.Partition, true
}

// HasPartition returns a boolean if a field has been set.
func (o *V1GCEPersistentDiskVolumeSource) HasPartition() bool {
	if o != nil && !IsNil(o.Partition) {
		return true
	}

	return false
}

// SetPartition gets a reference to the given int32 and assigns it to the Partition field.
func (o *V1GCEPersistentDiskVolumeSource) SetPartition(v int32) {
	o.Partition = &v
}

// GetPdName returns the PdName field value
func (o *V1GCEPersistentDiskVolumeSource) GetPdName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PdName
}

// GetPdNameOk returns a tuple with the PdName field value
// and a boolean to check if the value has been set.
func (o *V1GCEPersistentDiskVolumeSource) GetPdNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PdName, true
}

// SetPdName sets field value
func (o *V1GCEPersistentDiskVolumeSource) SetPdName(v string) {
	o.PdName = v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *V1GCEPersistentDiskVolumeSource) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GCEPersistentDiskVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *V1GCEPersistentDiskVolumeSource) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *V1GCEPersistentDiskVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

func (o V1GCEPersistentDiskVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1GCEPersistentDiskVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FsType) {
		toSerialize["fsType"] = o.FsType
	}
	if !IsNil(o.Partition) {
		toSerialize["partition"] = o.Partition
	}
	toSerialize["pdName"] = o.PdName
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	return toSerialize, nil
}

func (o *V1GCEPersistentDiskVolumeSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pdName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1GCEPersistentDiskVolumeSource := _V1GCEPersistentDiskVolumeSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1GCEPersistentDiskVolumeSource)

	if err != nil {
		return err
	}

	*o = V1GCEPersistentDiskVolumeSource(varV1GCEPersistentDiskVolumeSource)

	return err
}

type NullableV1GCEPersistentDiskVolumeSource struct {
	value *V1GCEPersistentDiskVolumeSource
	isSet bool
}

func (v NullableV1GCEPersistentDiskVolumeSource) Get() *V1GCEPersistentDiskVolumeSource {
	return v.value
}

func (v *NullableV1GCEPersistentDiskVolumeSource) Set(val *V1GCEPersistentDiskVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1GCEPersistentDiskVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1GCEPersistentDiskVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1GCEPersistentDiskVolumeSource(val *V1GCEPersistentDiskVolumeSource) *NullableV1GCEPersistentDiskVolumeSource {
	return &NullableV1GCEPersistentDiskVolumeSource{value: val, isSet: true}
}

func (v NullableV1GCEPersistentDiskVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1GCEPersistentDiskVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


