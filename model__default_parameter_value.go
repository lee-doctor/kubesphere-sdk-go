/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DefaultParameterValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefaultParameterValue{}

// DefaultParameterValue struct for DefaultParameterValue
type DefaultParameterValue struct {
	// Itâ€™s a fully qualified name and is an identifier of the producer of this resource's capability.
	Class *string `json:"_class,omitempty"`
	// name
	Name *string `json:"name,omitempty"`
	Value map[string]interface{} `json:"value,omitempty"`
}

// NewDefaultParameterValue instantiates a new DefaultParameterValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaultParameterValue() *DefaultParameterValue {
	this := DefaultParameterValue{}
	return &this
}

// NewDefaultParameterValueWithDefaults instantiates a new DefaultParameterValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultParameterValueWithDefaults() *DefaultParameterValue {
	this := DefaultParameterValue{}
	return &this
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *DefaultParameterValue) GetClass() string {
	if o == nil || IsNil(o.Class) {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultParameterValue) GetClassOk() (*string, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *DefaultParameterValue) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *DefaultParameterValue) SetClass(v string) {
	o.Class = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DefaultParameterValue) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultParameterValue) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DefaultParameterValue) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DefaultParameterValue) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DefaultParameterValue) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultParameterValue) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DefaultParameterValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *DefaultParameterValue) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o DefaultParameterValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefaultParameterValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Class) {
		toSerialize["_class"] = o.Class
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableDefaultParameterValue struct {
	value *DefaultParameterValue
	isSet bool
}

func (v NullableDefaultParameterValue) Get() *DefaultParameterValue {
	return v.value
}

func (v *NullableDefaultParameterValue) Set(val *DefaultParameterValue) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultParameterValue) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultParameterValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultParameterValue(val *DefaultParameterValue) *NullableDefaultParameterValue {
	return &NullableDefaultParameterValue{value: val, isSet: true}
}

func (v NullableDefaultParameterValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultParameterValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


