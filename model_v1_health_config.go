/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1HealthConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1HealthConfig{}

// V1HealthConfig struct for V1HealthConfig
type V1HealthConfig struct {
	Interval *int64 `json:"Interval,omitempty"`
	Retries *int32 `json:"Retries,omitempty"`
	StartPeriod *int64 `json:"StartPeriod,omitempty"`
	Test []string `json:"Test,omitempty"`
	Timeout *int64 `json:"Timeout,omitempty"`
}

// NewV1HealthConfig instantiates a new V1HealthConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1HealthConfig() *V1HealthConfig {
	this := V1HealthConfig{}
	return &this
}

// NewV1HealthConfigWithDefaults instantiates a new V1HealthConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1HealthConfigWithDefaults() *V1HealthConfig {
	this := V1HealthConfig{}
	return &this
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *V1HealthConfig) GetInterval() int64 {
	if o == nil || IsNil(o.Interval) {
		var ret int64
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1HealthConfig) GetIntervalOk() (*int64, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *V1HealthConfig) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given int64 and assigns it to the Interval field.
func (o *V1HealthConfig) SetInterval(v int64) {
	o.Interval = &v
}

// GetRetries returns the Retries field value if set, zero value otherwise.
func (o *V1HealthConfig) GetRetries() int32 {
	if o == nil || IsNil(o.Retries) {
		var ret int32
		return ret
	}
	return *o.Retries
}

// GetRetriesOk returns a tuple with the Retries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1HealthConfig) GetRetriesOk() (*int32, bool) {
	if o == nil || IsNil(o.Retries) {
		return nil, false
	}
	return o.Retries, true
}

// HasRetries returns a boolean if a field has been set.
func (o *V1HealthConfig) HasRetries() bool {
	if o != nil && !IsNil(o.Retries) {
		return true
	}

	return false
}

// SetRetries gets a reference to the given int32 and assigns it to the Retries field.
func (o *V1HealthConfig) SetRetries(v int32) {
	o.Retries = &v
}

// GetStartPeriod returns the StartPeriod field value if set, zero value otherwise.
func (o *V1HealthConfig) GetStartPeriod() int64 {
	if o == nil || IsNil(o.StartPeriod) {
		var ret int64
		return ret
	}
	return *o.StartPeriod
}

// GetStartPeriodOk returns a tuple with the StartPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1HealthConfig) GetStartPeriodOk() (*int64, bool) {
	if o == nil || IsNil(o.StartPeriod) {
		return nil, false
	}
	return o.StartPeriod, true
}

// HasStartPeriod returns a boolean if a field has been set.
func (o *V1HealthConfig) HasStartPeriod() bool {
	if o != nil && !IsNil(o.StartPeriod) {
		return true
	}

	return false
}

// SetStartPeriod gets a reference to the given int64 and assigns it to the StartPeriod field.
func (o *V1HealthConfig) SetStartPeriod(v int64) {
	o.StartPeriod = &v
}

// GetTest returns the Test field value if set, zero value otherwise.
func (o *V1HealthConfig) GetTest() []string {
	if o == nil || IsNil(o.Test) {
		var ret []string
		return ret
	}
	return o.Test
}

// GetTestOk returns a tuple with the Test field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1HealthConfig) GetTestOk() ([]string, bool) {
	if o == nil || IsNil(o.Test) {
		return nil, false
	}
	return o.Test, true
}

// HasTest returns a boolean if a field has been set.
func (o *V1HealthConfig) HasTest() bool {
	if o != nil && !IsNil(o.Test) {
		return true
	}

	return false
}

// SetTest gets a reference to the given []string and assigns it to the Test field.
func (o *V1HealthConfig) SetTest(v []string) {
	o.Test = v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *V1HealthConfig) GetTimeout() int64 {
	if o == nil || IsNil(o.Timeout) {
		var ret int64
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1HealthConfig) GetTimeoutOk() (*int64, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *V1HealthConfig) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int64 and assigns it to the Timeout field.
func (o *V1HealthConfig) SetTimeout(v int64) {
	o.Timeout = &v
}

func (o V1HealthConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1HealthConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Interval) {
		toSerialize["Interval"] = o.Interval
	}
	if !IsNil(o.Retries) {
		toSerialize["Retries"] = o.Retries
	}
	if !IsNil(o.StartPeriod) {
		toSerialize["StartPeriod"] = o.StartPeriod
	}
	if !IsNil(o.Test) {
		toSerialize["Test"] = o.Test
	}
	if !IsNil(o.Timeout) {
		toSerialize["Timeout"] = o.Timeout
	}
	return toSerialize, nil
}

type NullableV1HealthConfig struct {
	value *V1HealthConfig
	isSet bool
}

func (v NullableV1HealthConfig) Get() *V1HealthConfig {
	return v.value
}

func (v *NullableV1HealthConfig) Set(val *V1HealthConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableV1HealthConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableV1HealthConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1HealthConfig(val *V1HealthConfig) *NullableV1HealthConfig {
	return &NullableV1HealthConfig{value: val, isSet: true}
}

func (v NullableV1HealthConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1HealthConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


