/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1beta1SubjectAccessReview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1beta1SubjectAccessReview{}

// V1beta1SubjectAccessReview TypeMeta describes an individual object in an API response or request with strings representing the type of the object and its API schema version. Structures that are versioned or persisted should inline TypeMeta.
type V1beta1SubjectAccessReview struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `json:"apiVersion,omitempty"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `json:"kind,omitempty"`
	Spec V1beta1SubjectAccessReviewSpec `json:"spec"`
	Status *V1beta1SubjectAccessReviewStatus `json:"status,omitempty"`
}

type _V1beta1SubjectAccessReview V1beta1SubjectAccessReview

// NewV1beta1SubjectAccessReview instantiates a new V1beta1SubjectAccessReview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1beta1SubjectAccessReview(spec V1beta1SubjectAccessReviewSpec) *V1beta1SubjectAccessReview {
	this := V1beta1SubjectAccessReview{}
	this.Spec = spec
	return &this
}

// NewV1beta1SubjectAccessReviewWithDefaults instantiates a new V1beta1SubjectAccessReview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1beta1SubjectAccessReviewWithDefaults() *V1beta1SubjectAccessReview {
	this := V1beta1SubjectAccessReview{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *V1beta1SubjectAccessReview) GetApiVersion() string {
	if o == nil || IsNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1SubjectAccessReview) GetApiVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *V1beta1SubjectAccessReview) HasApiVersion() bool {
	if o != nil && !IsNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *V1beta1SubjectAccessReview) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V1beta1SubjectAccessReview) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1SubjectAccessReview) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V1beta1SubjectAccessReview) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V1beta1SubjectAccessReview) SetKind(v string) {
	o.Kind = &v
}

// GetSpec returns the Spec field value
func (o *V1beta1SubjectAccessReview) GetSpec() V1beta1SubjectAccessReviewSpec {
	if o == nil {
		var ret V1beta1SubjectAccessReviewSpec
		return ret
	}

	return o.Spec
}

// GetSpecOk returns a tuple with the Spec field value
// and a boolean to check if the value has been set.
func (o *V1beta1SubjectAccessReview) GetSpecOk() (*V1beta1SubjectAccessReviewSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Spec, true
}

// SetSpec sets field value
func (o *V1beta1SubjectAccessReview) SetSpec(v V1beta1SubjectAccessReviewSpec) {
	o.Spec = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *V1beta1SubjectAccessReview) GetStatus() V1beta1SubjectAccessReviewStatus {
	if o == nil || IsNil(o.Status) {
		var ret V1beta1SubjectAccessReviewStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1SubjectAccessReview) GetStatusOk() (*V1beta1SubjectAccessReviewStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *V1beta1SubjectAccessReview) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given V1beta1SubjectAccessReviewStatus and assigns it to the Status field.
func (o *V1beta1SubjectAccessReview) SetStatus(v V1beta1SubjectAccessReviewStatus) {
	o.Status = &v
}

func (o V1beta1SubjectAccessReview) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1beta1SubjectAccessReview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	toSerialize["spec"] = o.Spec
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

func (o *V1beta1SubjectAccessReview) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"spec",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1beta1SubjectAccessReview := _V1beta1SubjectAccessReview{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1beta1SubjectAccessReview)

	if err != nil {
		return err
	}

	*o = V1beta1SubjectAccessReview(varV1beta1SubjectAccessReview)

	return err
}

type NullableV1beta1SubjectAccessReview struct {
	value *V1beta1SubjectAccessReview
	isSet bool
}

func (v NullableV1beta1SubjectAccessReview) Get() *V1beta1SubjectAccessReview {
	return v.value
}

func (v *NullableV1beta1SubjectAccessReview) Set(val *V1beta1SubjectAccessReview) {
	v.value = val
	v.isSet = true
}

func (v NullableV1beta1SubjectAccessReview) IsSet() bool {
	return v.isSet
}

func (v *NullableV1beta1SubjectAccessReview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1beta1SubjectAccessReview(val *V1beta1SubjectAccessReview) *NullableV1beta1SubjectAccessReview {
	return &NullableV1beta1SubjectAccessReview{value: val, isSet: true}
}

func (v NullableV1beta1SubjectAccessReview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1beta1SubjectAccessReview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


