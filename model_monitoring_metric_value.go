/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the MonitoringMetricValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonitoringMetricValue{}

// MonitoringMetricValue struct for MonitoringMetricValue
type MonitoringMetricValue struct {
	// time series labels
	Metric *map[string]string `json:"metric,omitempty"`
	// time series, values of vector type
	Value *string `json:"value,omitempty"`
	// time series, values of matrix type
	Values []map[string]interface{} `json:"values,omitempty"`
}

// NewMonitoringMetricValue instantiates a new MonitoringMetricValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitoringMetricValue() *MonitoringMetricValue {
	this := MonitoringMetricValue{}
	return &this
}

// NewMonitoringMetricValueWithDefaults instantiates a new MonitoringMetricValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitoringMetricValueWithDefaults() *MonitoringMetricValue {
	this := MonitoringMetricValue{}
	return &this
}

// GetMetric returns the Metric field value if set, zero value otherwise.
func (o *MonitoringMetricValue) GetMetric() map[string]string {
	if o == nil || IsNil(o.Metric) {
		var ret map[string]string
		return ret
	}
	return *o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMetricValue) GetMetricOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Metric) {
		return nil, false
	}
	return o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *MonitoringMetricValue) HasMetric() bool {
	if o != nil && !IsNil(o.Metric) {
		return true
	}

	return false
}

// SetMetric gets a reference to the given map[string]string and assigns it to the Metric field.
func (o *MonitoringMetricValue) SetMetric(v map[string]string) {
	o.Metric = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *MonitoringMetricValue) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMetricValue) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MonitoringMetricValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *MonitoringMetricValue) SetValue(v string) {
	o.Value = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *MonitoringMetricValue) GetValues() []map[string]interface{} {
	if o == nil || IsNil(o.Values) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonitoringMetricValue) GetValuesOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *MonitoringMetricValue) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []map[string]interface{} and assigns it to the Values field.
func (o *MonitoringMetricValue) SetValues(v []map[string]interface{}) {
	o.Values = v
}

func (o MonitoringMetricValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonitoringMetricValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metric) {
		toSerialize["metric"] = o.Metric
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableMonitoringMetricValue struct {
	value *MonitoringMetricValue
	isSet bool
}

func (v NullableMonitoringMetricValue) Get() *MonitoringMetricValue {
	return v.value
}

func (v *NullableMonitoringMetricValue) Set(val *MonitoringMetricValue) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitoringMetricValue) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitoringMetricValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitoringMetricValue(val *MonitoringMetricValue) *NullableMonitoringMetricValue {
	return &NullableMonitoringMetricValue{value: val, isSet: true}
}

func (v NullableMonitoringMetricValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitoringMetricValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


