/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DevOpsScmAPIService DevOpsScmAPI service
type DevOpsScmAPIService service

type ApiCreateSCMServersRequest struct {
	ctx context.Context
	ApiService *DevOpsScmAPIService
	scm string
	body *DevopsCreateScmServerReq
}

func (r ApiCreateSCMServersRequest) Body(body DevopsCreateScmServerReq) ApiCreateSCMServersRequest {
	r.body = &body
	return r
}

func (r ApiCreateSCMServersRequest) Execute() (*DevopsSCMServer, *http.Response, error) {
	return r.ApiService.CreateSCMServersExecute(r)
}

/*
CreateSCMServers Create scm server in the jenkins.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param scm The ID of the source configuration management (SCM).
 @return ApiCreateSCMServersRequest
*/
func (a *DevOpsScmAPIService) CreateSCMServers(ctx context.Context, scm string) ApiCreateSCMServersRequest {
	return ApiCreateSCMServersRequest{
		ApiService: a,
		ctx: ctx,
		scm: scm,
	}
}

// Execute executes the request
//  @return DevopsSCMServer
func (a *DevOpsScmAPIService) CreateSCMServersExecute(r ApiCreateSCMServersRequest) (*DevopsSCMServer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DevopsSCMServer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevOpsScmAPIService.CreateSCMServers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/devops.kubesphere.io/v1alpha2/scms/{scm}/servers"
	localVarPath = strings.Replace(localVarPath, "{"+"scm"+"}", url.PathEscape(parameterValueToString(r.scm, "scm")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOrgRepoRequest struct {
	ctx context.Context
	ApiService *DevOpsScmAPIService
	scm string
	organization string
	credentialId *string
	pageNumber *string
	pageSize *string
}

// credential ID for SCM.
func (r ApiGetOrgRepoRequest) CredentialId(credentialId string) ApiGetOrgRepoRequest {
	r.credentialId = &credentialId
	return r
}

// page number.
func (r ApiGetOrgRepoRequest) PageNumber(pageNumber string) ApiGetOrgRepoRequest {
	r.pageNumber = &pageNumber
	return r
}

// the item count of one page.
func (r ApiGetOrgRepoRequest) PageSize(pageSize string) ApiGetOrgRepoRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetOrgRepoRequest) Execute() (*DevopsOrgRepo, *http.Response, error) {
	return r.ApiService.GetOrgRepoExecute(r)
}

/*
GetOrgRepo List all repositories in the specified organization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param scm The ID of the source configuration management (SCM).
 @param organization organization ID, such as github username.
 @return ApiGetOrgRepoRequest
*/
func (a *DevOpsScmAPIService) GetOrgRepo(ctx context.Context, scm string, organization string) ApiGetOrgRepoRequest {
	return ApiGetOrgRepoRequest{
		ApiService: a,
		ctx: ctx,
		scm: scm,
		organization: organization,
	}
}

// Execute executes the request
//  @return DevopsOrgRepo
func (a *DevOpsScmAPIService) GetOrgRepoExecute(r ApiGetOrgRepoRequest) (*DevopsOrgRepo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DevopsOrgRepo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevOpsScmAPIService.GetOrgRepo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/devops.kubesphere.io/v1alpha2/scms/{scm}/organizations/{organization}/repositories"
	localVarPath = strings.Replace(localVarPath, "{"+"scm"+"}", url.PathEscape(parameterValueToString(r.scm, "scm")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"organization"+"}", url.PathEscape(parameterValueToString(r.organization, "organization")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.credentialId == nil {
		return localVarReturnValue, nil, reportError("credentialId is required and must be specified")
	}
	if r.pageNumber == nil {
		return localVarReturnValue, nil, reportError("pageNumber is required and must be specified")
	}
	if r.pageSize == nil {
		return localVarReturnValue, nil, reportError("pageSize is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "credentialId", r.credentialId, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "pageNumber", r.pageNumber, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSCMOrgRequest struct {
	ctx context.Context
	ApiService *DevOpsScmAPIService
	scm string
	credentialId *string
}

// credential ID for source configuration management (SCM).
func (r ApiGetSCMOrgRequest) CredentialId(credentialId string) ApiGetSCMOrgRequest {
	r.credentialId = &credentialId
	return r
}

func (r ApiGetSCMOrgRequest) Execute() ([]DevopsSCMOrg, *http.Response, error) {
	return r.ApiService.GetSCMOrgExecute(r)
}

/*
GetSCMOrg List all organizations of the specified source configuration management (SCM) such as Github.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param scm the ID of the source configuration management (SCM).
 @return ApiGetSCMOrgRequest
*/
func (a *DevOpsScmAPIService) GetSCMOrg(ctx context.Context, scm string) ApiGetSCMOrgRequest {
	return ApiGetSCMOrgRequest{
		ApiService: a,
		ctx: ctx,
		scm: scm,
	}
}

// Execute executes the request
//  @return []DevopsSCMOrg
func (a *DevOpsScmAPIService) GetSCMOrgExecute(r ApiGetSCMOrgRequest) ([]DevopsSCMOrg, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []DevopsSCMOrg
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevOpsScmAPIService.GetSCMOrg")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/devops.kubesphere.io/v1alpha2/scms/{scm}/organizations"
	localVarPath = strings.Replace(localVarPath, "{"+"scm"+"}", url.PathEscape(parameterValueToString(r.scm, "scm")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.credentialId == nil {
		return localVarReturnValue, nil, reportError("credentialId is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "credentialId", r.credentialId, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSCMServersRequest struct {
	ctx context.Context
	ApiService *DevOpsScmAPIService
	scm string
}

func (r ApiGetSCMServersRequest) Execute() ([]DevopsSCMServer, *http.Response, error) {
	return r.ApiService.GetSCMServersExecute(r)
}

/*
GetSCMServers List all servers in the jenkins.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param scm The ID of the source configuration management (SCM).
 @return ApiGetSCMServersRequest
*/
func (a *DevOpsScmAPIService) GetSCMServers(ctx context.Context, scm string) ApiGetSCMServersRequest {
	return ApiGetSCMServersRequest{
		ApiService: a,
		ctx: ctx,
		scm: scm,
	}
}

// Execute executes the request
//  @return []DevopsSCMServer
func (a *DevOpsScmAPIService) GetSCMServersExecute(r ApiGetSCMServersRequest) ([]DevopsSCMServer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []DevopsSCMServer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevOpsScmAPIService.GetSCMServers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/devops.kubesphere.io/v1alpha2/scms/{scm}/servers"
	localVarPath = strings.Replace(localVarPath, "{"+"scm"+"}", url.PathEscape(parameterValueToString(r.scm, "scm")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiValidateRequest struct {
	ctx context.Context
	ApiService *DevOpsScmAPIService
	scm string
}

func (r ApiValidateRequest) Execute() (*DevopsValidates, *http.Response, error) {
	return r.ApiService.ValidateExecute(r)
}

/*
Validate Validate the access token of the specified source configuration management (SCM) such as Github

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param scm the ID of the source configuration management (SCM).
 @return ApiValidateRequest
*/
func (a *DevOpsScmAPIService) Validate(ctx context.Context, scm string) ApiValidateRequest {
	return ApiValidateRequest{
		ApiService: a,
		ctx: ctx,
		scm: scm,
	}
}

// Execute executes the request
//  @return DevopsValidates
func (a *DevOpsScmAPIService) ValidateExecute(r ApiValidateRequest) (*DevopsValidates, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DevopsValidates
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevOpsScmAPIService.Validate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/devops.kubesphere.io/v1alpha2/scms/{scm}/verify"
	localVarPath = strings.Replace(localVarPath, "{"+"scm"+"}", url.PathEscape(parameterValueToString(r.scm, "scm")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
