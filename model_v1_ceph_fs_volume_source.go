/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1CephFSVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1CephFSVolumeSource{}

// V1CephFSVolumeSource Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
type V1CephFSVolumeSource struct {
	// Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors []string `json:"monitors"`
	// Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path *string `json:"path,omitempty"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly *bool `json:"readOnly,omitempty"`
	// Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile *string `json:"secretFile,omitempty"`
	SecretRef *V1LocalObjectReference `json:"secretRef,omitempty"`
	// Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User *string `json:"user,omitempty"`
}

type _V1CephFSVolumeSource V1CephFSVolumeSource

// NewV1CephFSVolumeSource instantiates a new V1CephFSVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1CephFSVolumeSource(monitors []string) *V1CephFSVolumeSource {
	this := V1CephFSVolumeSource{}
	this.Monitors = monitors
	return &this
}

// NewV1CephFSVolumeSourceWithDefaults instantiates a new V1CephFSVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1CephFSVolumeSourceWithDefaults() *V1CephFSVolumeSource {
	this := V1CephFSVolumeSource{}
	return &this
}

// GetMonitors returns the Monitors field value
func (o *V1CephFSVolumeSource) GetMonitors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Monitors
}

// GetMonitorsOk returns a tuple with the Monitors field value
// and a boolean to check if the value has been set.
func (o *V1CephFSVolumeSource) GetMonitorsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Monitors, true
}

// SetMonitors sets field value
func (o *V1CephFSVolumeSource) SetMonitors(v []string) {
	o.Monitors = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *V1CephFSVolumeSource) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CephFSVolumeSource) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *V1CephFSVolumeSource) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *V1CephFSVolumeSource) SetPath(v string) {
	o.Path = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *V1CephFSVolumeSource) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CephFSVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *V1CephFSVolumeSource) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *V1CephFSVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetSecretFile returns the SecretFile field value if set, zero value otherwise.
func (o *V1CephFSVolumeSource) GetSecretFile() string {
	if o == nil || IsNil(o.SecretFile) {
		var ret string
		return ret
	}
	return *o.SecretFile
}

// GetSecretFileOk returns a tuple with the SecretFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CephFSVolumeSource) GetSecretFileOk() (*string, bool) {
	if o == nil || IsNil(o.SecretFile) {
		return nil, false
	}
	return o.SecretFile, true
}

// HasSecretFile returns a boolean if a field has been set.
func (o *V1CephFSVolumeSource) HasSecretFile() bool {
	if o != nil && !IsNil(o.SecretFile) {
		return true
	}

	return false
}

// SetSecretFile gets a reference to the given string and assigns it to the SecretFile field.
func (o *V1CephFSVolumeSource) SetSecretFile(v string) {
	o.SecretFile = &v
}

// GetSecretRef returns the SecretRef field value if set, zero value otherwise.
func (o *V1CephFSVolumeSource) GetSecretRef() V1LocalObjectReference {
	if o == nil || IsNil(o.SecretRef) {
		var ret V1LocalObjectReference
		return ret
	}
	return *o.SecretRef
}

// GetSecretRefOk returns a tuple with the SecretRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CephFSVolumeSource) GetSecretRefOk() (*V1LocalObjectReference, bool) {
	if o == nil || IsNil(o.SecretRef) {
		return nil, false
	}
	return o.SecretRef, true
}

// HasSecretRef returns a boolean if a field has been set.
func (o *V1CephFSVolumeSource) HasSecretRef() bool {
	if o != nil && !IsNil(o.SecretRef) {
		return true
	}

	return false
}

// SetSecretRef gets a reference to the given V1LocalObjectReference and assigns it to the SecretRef field.
func (o *V1CephFSVolumeSource) SetSecretRef(v V1LocalObjectReference) {
	o.SecretRef = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *V1CephFSVolumeSource) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CephFSVolumeSource) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *V1CephFSVolumeSource) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *V1CephFSVolumeSource) SetUser(v string) {
	o.User = &v
}

func (o V1CephFSVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1CephFSVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["monitors"] = o.Monitors
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if !IsNil(o.SecretFile) {
		toSerialize["secretFile"] = o.SecretFile
	}
	if !IsNil(o.SecretRef) {
		toSerialize["secretRef"] = o.SecretRef
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

func (o *V1CephFSVolumeSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"monitors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1CephFSVolumeSource := _V1CephFSVolumeSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1CephFSVolumeSource)

	if err != nil {
		return err
	}

	*o = V1CephFSVolumeSource(varV1CephFSVolumeSource)

	return err
}

type NullableV1CephFSVolumeSource struct {
	value *V1CephFSVolumeSource
	isSet bool
}

func (v NullableV1CephFSVolumeSource) Get() *V1CephFSVolumeSource {
	return v.value
}

func (v *NullableV1CephFSVolumeSource) Set(val *V1CephFSVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1CephFSVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1CephFSVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1CephFSVolumeSource(val *V1CephFSVolumeSource) *NullableV1CephFSVolumeSource {
	return &NullableV1CephFSVolumeSource{value: val, isSet: true}
}

func (v NullableV1CephFSVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1CephFSVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


