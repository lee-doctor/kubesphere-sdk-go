/*
KubeSphere

Testing GroupAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_GroupAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GroupAPIService CreateGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.GroupAPI.CreateGroup(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService CreateGroupBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.GroupAPI.CreateGroupBinding(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService CreateWorkspaceRoleBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.GroupAPI.CreateWorkspaceRoleBinding(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService DeleteGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var group string

		resp, httpRes, err := apiClient.GroupAPI.DeleteGroup(context.Background(), workspace, group).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService DeleteGroupBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var groupbinding string

		resp, httpRes, err := apiClient.GroupAPI.DeleteGroupBinding(context.Background(), workspace, groupbinding).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService DeleteRoleBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var namespace string
		var rolebinding string

		resp, httpRes, err := apiClient.GroupAPI.DeleteRoleBinding(context.Background(), workspace, namespace, rolebinding).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService DeleteWorkspaceRoleBinding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var rolebinding string

		resp, httpRes, err := apiClient.GroupAPI.DeleteWorkspaceRoleBinding(context.Background(), workspace, rolebinding).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService DescribeGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var group string

		resp, httpRes, err := apiClient.GroupAPI.DescribeGroup(context.Background(), workspace, group).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService ListGroupBindings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var group string

		resp, httpRes, err := apiClient.GroupAPI.ListGroupBindings(context.Background(), workspace, group).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService ListGroupDevOpsRoleBindings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var group string

		resp, httpRes, err := apiClient.GroupAPI.ListGroupDevOpsRoleBindings(context.Background(), workspace, group).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService ListGroupRoleBindings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var group string

		resp, httpRes, err := apiClient.GroupAPI.ListGroupRoleBindings(context.Background(), workspace, group).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService ListGroupWorkspaceRoleBindings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var group string

		resp, httpRes, err := apiClient.GroupAPI.ListGroupWorkspaceRoleBindings(context.Background(), workspace, group).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService ListWorkspaceGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.GroupAPI.ListWorkspaceGroups(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GroupAPIService UpdateGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var group string

		resp, httpRes, err := apiClient.GroupAPI.UpdateGroup(context.Background(), workspace, group).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
