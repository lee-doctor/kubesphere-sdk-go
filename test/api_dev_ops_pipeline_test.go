/*
KubeSphere

Testing DevOpsPipelineAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/lee-doctor/kubesphere-sdk-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_DevOpsPipelineAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DevOpsPipelineAPIService CheckCron", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.CheckCron(context.Background(), devops).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService CheckScriptCompile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.CheckScriptCompile(context.Background(), devops, pipeline).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService DeleteCredential", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var credential string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.DeleteCredential(context.Background(), devops, credential).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService DeletePipeline", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.DeletePipeline(context.Background(), devops, pipeline).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService GetArtifacts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var run string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.GetArtifacts(context.Background(), devops, pipeline, run).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService GetBranchArtifacts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var branch string
		var run string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.GetBranchArtifacts(context.Background(), devops, pipeline, branch, run).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService GetBranchNodeSteps", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var branch string
		var run string
		var node string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.GetBranchNodeSteps(context.Background(), devops, pipeline, branch, run, node).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService GetBranchNodesDetail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var branch string
		var run string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.GetBranchNodesDetail(context.Background(), devops, pipeline, branch, run).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService GetBranchPipeline", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var branch string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.GetBranchPipeline(context.Background(), devops, pipeline, branch).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService GetBranchPipelineRun", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var branch string
		var run string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.GetBranchPipelineRun(context.Background(), devops, pipeline, branch, run).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService GetBranchPipelineRunNodes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var branch string
		var run string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.GetBranchPipelineRunNodes(context.Background(), devops, pipeline, branch, run).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService GetBranchRunLog", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var branch string
		var run string

		httpRes, err := apiClient.DevOpsPipelineAPI.GetBranchRunLog(context.Background(), devops, pipeline, branch, run).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService GetBranchStepLog", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var branch string
		var run string
		var node string
		var step string

		httpRes, err := apiClient.DevOpsPipelineAPI.GetBranchStepLog(context.Background(), devops, pipeline, branch, run, node, step).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService GetConsoleLog", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string

		httpRes, err := apiClient.DevOpsPipelineAPI.GetConsoleLog(context.Background(), devops, pipeline).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService GetCrumb", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.GetCrumb(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService GetNodeSteps", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var run string
		var node string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.GetNodeSteps(context.Background(), devops, pipeline, run, node).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService GetNodesDetail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var run string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.GetNodesDetail(context.Background(), devops, pipeline, run).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService GetPipeline", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.GetPipeline(context.Background(), devops, pipeline).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService GetPipelineBranch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.GetPipelineBranch(context.Background(), devops, pipeline).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService GetPipelineRun", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var run string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.GetPipelineRun(context.Background(), devops, pipeline, run).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService GetPipelineRunNodes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var run string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.GetPipelineRunNodes(context.Background(), devops, pipeline, run).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService GetRunLog", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var run string

		httpRes, err := apiClient.DevOpsPipelineAPI.GetRunLog(context.Background(), devops, pipeline, run).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService GetStepLog", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var run string
		var node string
		var step string

		httpRes, err := apiClient.DevOpsPipelineAPI.GetStepLog(context.Background(), devops, pipeline, run, node, step).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService ListPipelineRuns", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var pipeline string
		var devops string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.ListPipelineRuns(context.Background(), pipeline, devops).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService ListPipelines", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.ListPipelines(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService ReplayBranchPipeline", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var branch string
		var run string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.ReplayBranchPipeline(context.Background(), devops, pipeline, branch, run).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService ReplayPipeline", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var run string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.ReplayPipeline(context.Background(), devops, pipeline, run).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService RunBranchPipeline", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var branch string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.RunBranchPipeline(context.Background(), devops, pipeline, branch).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService RunPipeline", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.RunPipeline(context.Background(), devops, pipeline).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService ScanBranch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string

		httpRes, err := apiClient.DevOpsPipelineAPI.ScanBranch(context.Background(), devops, pipeline).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService StopBranchPipeline", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var branch string
		var run string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.StopBranchPipeline(context.Background(), devops, pipeline, branch, run).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService StopPipeline", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var run string

		resp, httpRes, err := apiClient.DevOpsPipelineAPI.StopPipeline(context.Background(), devops, pipeline, run).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService SubmitBranchInputStep", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var branch string
		var run string
		var node string
		var step string

		httpRes, err := apiClient.DevOpsPipelineAPI.SubmitBranchInputStep(context.Background(), devops, pipeline, branch, run, node, step).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsPipelineAPIService SubmitInputStep", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var devops string
		var pipeline string
		var run string
		var node string
		var step string

		httpRes, err := apiClient.DevOpsPipelineAPI.SubmitInputStep(context.Background(), devops, pipeline, run, node, step).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
