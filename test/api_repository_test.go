/*
KubeSphere

Testing RepositoryAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/lee-doctor/kubesphere-sdk-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_RepositoryAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RepositoryAPIService CreateRepo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RepositoryAPI.CreateRepo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService CreateWorkspaceRepo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.RepositoryAPI.CreateWorkspaceRepo(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService DeleteRepo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repo string

		resp, httpRes, err := apiClient.RepositoryAPI.DeleteRepo(context.Background(), repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService DeleteWorkspaceRepo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var repo string

		resp, httpRes, err := apiClient.RepositoryAPI.DeleteWorkspaceRepo(context.Background(), workspace, repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService DescribeRepo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repo string

		resp, httpRes, err := apiClient.RepositoryAPI.DescribeRepo(context.Background(), repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService DescribeWorkspaceRepo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var repo string

		resp, httpRes, err := apiClient.RepositoryAPI.DescribeWorkspaceRepo(context.Background(), workspace, repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService ListRepoEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repo string

		resp, httpRes, err := apiClient.RepositoryAPI.ListRepoEvents(context.Background(), repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService ListRepos", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RepositoryAPI.ListRepos(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService ListWorkspaceRepoEvents", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var repo string

		resp, httpRes, err := apiClient.RepositoryAPI.ListWorkspaceRepoEvents(context.Background(), workspace, repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService ListWorkspaceRepos", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.RepositoryAPI.ListWorkspaceRepos(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService ModifyRepo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repo string

		resp, httpRes, err := apiClient.RepositoryAPI.ModifyRepo(context.Background(), repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryAPIService ModifyWorkspaceRepo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var repo string

		resp, httpRes, err := apiClient.RepositoryAPI.ModifyWorkspaceRepo(context.Background(), workspace, repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
