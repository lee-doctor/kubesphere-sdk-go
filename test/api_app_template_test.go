/*
KubeSphere

Testing AppTemplateAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_AppTemplateAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AppTemplateAPIService CreateApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.CreateApp(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService CreateAppVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.CreateAppVersion(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService CreateWorkspaceApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.CreateWorkspaceApp(context.Background(), workspace, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService CreateWorkspaceAppVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.CreateWorkspaceAppVersion(context.Background(), workspace, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService DeleteApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.DeleteApp(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService DeleteAppVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var version string
		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.DeleteAppVersion(context.Background(), version, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService DeleteWorkspaceApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.DeleteWorkspaceApp(context.Background(), workspace, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService DeleteWorkspaceAppVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var version string
		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.DeleteWorkspaceAppVersion(context.Background(), workspace, version, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService DescribeApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.DescribeApp(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService DescribeAppVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var version string
		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.DescribeAppVersion(context.Background(), version, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService DescribeWorkspaceApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.DescribeWorkspaceApp(context.Background(), workspace, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService DescribeWorkspaceAppVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var version string
		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.DescribeWorkspaceAppVersion(context.Background(), workspace, version, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService GetAppVersionFiles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var version string
		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.GetAppVersionFiles(context.Background(), version, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService GetAppVersionPackage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var version string
		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.GetAppVersionPackage(context.Background(), version, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService ListAppVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.ListAppVersions(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService ListApps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AppTemplateAPI.ListApps(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService ListWorkspaceAppVersions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.ListWorkspaceAppVersions(context.Background(), workspace, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService ListWorkspaceApps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.AppTemplateAPI.ListWorkspaceApps(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService ModifyApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.ModifyApp(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService ModifyAppVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var version string
		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.ModifyAppVersion(context.Background(), version, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService ModifyWorkspaceApp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.ModifyWorkspaceApp(context.Background(), workspace, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppTemplateAPIService ModifyWorkspaceAppVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var version string
		var app string

		resp, httpRes, err := apiClient.AppTemplateAPI.ModifyWorkspaceAppVersion(context.Background(), workspace, version, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
