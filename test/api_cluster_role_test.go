/*
KubeSphere

Testing ClusterRoleAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ClusterRoleAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ClusterRoleAPIService CreateClusterRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ClusterRoleAPI.CreateClusterRole(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterRoleAPIService DeleteClusterRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterrole string

		resp, httpRes, err := apiClient.ClusterRoleAPI.DeleteClusterRole(context.Background(), clusterrole).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterRoleAPIService DescribeClusterRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterrole string

		resp, httpRes, err := apiClient.ClusterRoleAPI.DescribeClusterRole(context.Background(), clusterrole).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterRoleAPIService ListClusterRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ClusterRoleAPI.ListClusterRoles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterRoleAPIService PatchClusterRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterrole string

		resp, httpRes, err := apiClient.ClusterRoleAPI.PatchClusterRole(context.Background(), clusterrole).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterRoleAPIService RetrieveClusterMemberRoleTemplates", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clustermember string

		resp, httpRes, err := apiClient.ClusterRoleAPI.RetrieveClusterMemberRoleTemplates(context.Background(), clustermember).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ClusterRoleAPIService UpdateClusterRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterrole string

		resp, httpRes, err := apiClient.ClusterRoleAPI.UpdateClusterRole(context.Background(), clusterrole).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
