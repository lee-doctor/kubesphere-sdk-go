/*
KubeSphere

Testing WorkspaceRoleAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/lee-doctor/kubesphere-sdk-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_WorkspaceRoleAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WorkspaceRoleAPIService CreateWorkspaceRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.WorkspaceRoleAPI.CreateWorkspaceRole(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkspaceRoleAPIService DeleteWorkspaceRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var workspacerole string

		resp, httpRes, err := apiClient.WorkspaceRoleAPI.DeleteWorkspaceRole(context.Background(), workspace, workspacerole).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkspaceRoleAPIService DescribeWorkspaceRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var workspacerole string

		resp, httpRes, err := apiClient.WorkspaceRoleAPI.DescribeWorkspaceRole(context.Background(), workspace, workspacerole).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkspaceRoleAPIService ListWorkspaceRoles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.WorkspaceRoleAPI.ListWorkspaceRoles(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkspaceRoleAPIService PatchWorkspaceRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var workspacerole string

		resp, httpRes, err := apiClient.WorkspaceRoleAPI.PatchWorkspaceRole(context.Background(), workspace, workspacerole).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkspaceRoleAPIService RetrieveWorkspaceMemberRoleTemplates", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var workspacemember string

		resp, httpRes, err := apiClient.WorkspaceRoleAPI.RetrieveWorkspaceMemberRoleTemplates(context.Background(), workspace, workspacemember).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkspaceRoleAPIService UpdateWorkspaceRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var workspacerole string

		resp, httpRes, err := apiClient.WorkspaceRoleAPI.UpdateWorkspaceRole(context.Background(), workspace, workspacerole).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
