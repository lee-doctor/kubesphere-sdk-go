/*
KS API

Testing AccessManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/lee-doctor/kubesphere-sdk-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_AccessManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AccessManagementAPIService CreateClusterMembers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AccessManagementAPI.CreateClusterMembers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessManagementAPIService CreateNamespaceMembers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.AccessManagementAPI.CreateNamespaceMembers(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessManagementAPIService CreateSubjectAccessReview", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AccessManagementAPI.CreateSubjectAccessReview(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessManagementAPIService CreateWorkspaceMembers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.AccessManagementAPI.CreateWorkspaceMembers(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessManagementAPIService DescribeWorkspaceMember", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var workspacemember string

		resp, httpRes, err := apiClient.AccessManagementAPI.DescribeWorkspaceMember(context.Background(), workspace, workspacemember).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessManagementAPIService ListClusterMembers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AccessManagementAPI.ListClusterMembers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessManagementAPIService ListNamespaceMembers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.AccessManagementAPI.ListNamespaceMembers(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessManagementAPIService ListRoleTemplateOfUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var username string

		resp, httpRes, err := apiClient.AccessManagementAPI.ListRoleTemplateOfUser(context.Background(), username).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessManagementAPIService ListWorkspaceMembers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.AccessManagementAPI.ListWorkspaceMembers(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessManagementAPIService RemoveClusterMember", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clustermember string

		resp, httpRes, err := apiClient.AccessManagementAPI.RemoveClusterMember(context.Background(), clustermember).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessManagementAPIService RemoveNamespaceMember", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var member string

		resp, httpRes, err := apiClient.AccessManagementAPI.RemoveNamespaceMember(context.Background(), namespace, member).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessManagementAPIService RemoveWorkspaceMember", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var workspacemember string

		resp, httpRes, err := apiClient.AccessManagementAPI.RemoveWorkspaceMember(context.Background(), workspace, workspacemember).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessManagementAPIService UpdateClusterMember", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clustermember string

		resp, httpRes, err := apiClient.AccessManagementAPI.UpdateClusterMember(context.Background(), clustermember).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessManagementAPIService UpdateNamespaceMember", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var namespacemember string

		resp, httpRes, err := apiClient.AccessManagementAPI.UpdateNamespaceMember(context.Background(), namespace, namespacemember).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccessManagementAPIService UpdateWorkspaceMember", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var workspacemember string

		resp, httpRes, err := apiClient.AccessManagementAPI.UpdateWorkspaceMember(context.Background(), workspace, workspacemember).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
