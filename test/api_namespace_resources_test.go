/*
KubeSphere

Testing NamespaceResourcesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_NamespaceResourcesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NamespaceResourcesAPIService HandleCreateRouter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.NamespaceResourcesAPI.HandleCreateRouter(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceResourcesAPIService HandleDeleteRouter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.NamespaceResourcesAPI.HandleDeleteRouter(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceResourcesAPIService HandleGetDaemonSetRevision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var daemonset string
		var namespace string
		var revision string

		resp, httpRes, err := apiClient.NamespaceResourcesAPI.HandleGetDaemonSetRevision(context.Background(), daemonset, namespace, revision).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceResourcesAPIService HandleGetDeploymentRevision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var deployment string
		var namespace string
		var revision string

		resp, httpRes, err := apiClient.NamespaceResourcesAPI.HandleGetDeploymentRevision(context.Background(), deployment, namespace, revision).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceResourcesAPIService HandleGetNamespaceQuotas", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.NamespaceResourcesAPI.HandleGetNamespaceQuotas(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceResourcesAPIService HandleGetNamespacedAbnormalWorkloads", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.NamespaceResourcesAPI.HandleGetNamespacedAbnormalWorkloads(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceResourcesAPIService HandleGetRouter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.NamespaceResourcesAPI.HandleGetRouter(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceResourcesAPIService HandleGetStatefulSetRevision", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var statefulset string
		var namespace string
		var revision string

		resp, httpRes, err := apiClient.NamespaceResourcesAPI.HandleGetStatefulSetRevision(context.Background(), statefulset, namespace, revision).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceResourcesAPIService HandleListNamespaceResources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string
		var resources string

		resp, httpRes, err := apiClient.NamespaceResourcesAPI.HandleListNamespaceResources(context.Background(), namespace, resources).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NamespaceResourcesAPIService HandleUpdateRouter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.NamespaceResourcesAPI.HandleUpdateRouter(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
