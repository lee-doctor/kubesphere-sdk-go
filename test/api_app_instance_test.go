/*
KubeSphere

Testing AppInstanceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/lee-doctor/kubesphere-sdk-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_AppInstanceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AppInstanceAPIService CreateWorkspaceApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var cluster string
		var namespace string

		resp, httpRes, err := apiClient.AppInstanceAPI.CreateWorkspaceApplication(context.Background(), workspace, cluster, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppInstanceAPIService DeleteApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var cluster string
		var namespace string
		var application string

		resp, httpRes, err := apiClient.AppInstanceAPI.DeleteApplication(context.Background(), workspace, cluster, namespace, application).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppInstanceAPIService DescribeApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var cluster string
		var namespace string
		var application string

		resp, httpRes, err := apiClient.AppInstanceAPI.DescribeApplication(context.Background(), workspace, cluster, namespace, application).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppInstanceAPIService DescribeWorkspaceApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var namespace string
		var application string

		resp, httpRes, err := apiClient.AppInstanceAPI.DescribeWorkspaceApplication(context.Background(), workspace, namespace, application).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppInstanceAPIService ListApplications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AppInstanceAPI.ListApplications(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppInstanceAPIService ListClusterApplications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var cluster string

		resp, httpRes, err := apiClient.AppInstanceAPI.ListClusterApplications(context.Background(), workspace, cluster).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppInstanceAPIService ListClusterWorkspaceApplications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var cluster string
		var namespace string

		resp, httpRes, err := apiClient.AppInstanceAPI.ListClusterWorkspaceApplications(context.Background(), workspace, cluster, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppInstanceAPIService ListWorkspaceApplications", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var namespace string

		resp, httpRes, err := apiClient.AppInstanceAPI.ListWorkspaceApplications(context.Background(), workspace, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppInstanceAPIService ModifyApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var cluster string
		var namespace string
		var application string

		resp, httpRes, err := apiClient.AppInstanceAPI.ModifyApplication(context.Background(), workspace, cluster, namespace, application).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppInstanceAPIService UpgradeApplication", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var cluster string
		var namespace string
		var application string

		resp, httpRes, err := apiClient.AppInstanceAPI.UpgradeApplication(context.Background(), workspace, cluster, namespace, application).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
