/*
KubeSphere

Testing ServiceMeshAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/lee-doctor/kubesphere-sdk-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_ServiceMeshAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ServiceMeshAPIService GetAppHealth", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var app string

		resp, httpRes, err := apiClient.ServiceMeshAPI.GetAppHealth(context.Background(), namespace, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceMeshAPIService GetAppMetrics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var app string

		resp, httpRes, err := apiClient.ServiceMeshAPI.GetAppMetrics(context.Background(), namespace, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceMeshAPIService GetNamespaceGraph", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.ServiceMeshAPI.GetNamespaceGraph(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceMeshAPIService GetNamespaceHealth", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.ServiceMeshAPI.GetNamespaceHealth(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceMeshAPIService GetNamespaceMetrics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.ServiceMeshAPI.GetNamespaceMetrics(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceMeshAPIService GetServiceHealth", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var service string

		resp, httpRes, err := apiClient.ServiceMeshAPI.GetServiceHealth(context.Background(), namespace, service).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceMeshAPIService GetServiceMetrics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var service string

		resp, httpRes, err := apiClient.ServiceMeshAPI.GetServiceMetrics(context.Background(), namespace, service).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceMeshAPIService GetServiceTracing", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var service string

		httpRes, err := apiClient.ServiceMeshAPI.GetServiceTracing(context.Background(), namespace, service).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceMeshAPIService GetWorkloadHealth", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var workload string

		resp, httpRes, err := apiClient.ServiceMeshAPI.GetWorkloadHealth(context.Background(), namespace, workload).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ServiceMeshAPIService GetWorkloadMetrics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var namespace string
		var workload string

		resp, httpRes, err := apiClient.ServiceMeshAPI.GetWorkloadMetrics(context.Background(), namespace, workload).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
