/*
KubeSphere

Testing AppManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/lee-doctor/kubesphere-sdk-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_AppManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AppManagementAPIService DoAppAction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var version string
		var app string

		resp, httpRes, err := apiClient.AppManagementAPI.DoAppAction(context.Background(), version, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppManagementAPIService DoAppVersionAction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var version string
		var app string

		resp, httpRes, err := apiClient.AppManagementAPI.DoAppVersionAction(context.Background(), version, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppManagementAPIService DoRepoAction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var repo string

		resp, httpRes, err := apiClient.AppManagementAPI.DoRepoAction(context.Background(), repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppManagementAPIService DoWorkspaceAppVersionAction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var version string
		var app string

		resp, httpRes, err := apiClient.AppManagementAPI.DoWorkspaceAppVersionAction(context.Background(), workspace, version, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppManagementAPIService DoWorkspaceRepoAction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var repo string

		resp, httpRes, err := apiClient.AppManagementAPI.DoWorkspaceRepoAction(context.Background(), workspace, repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppManagementAPIService DoWorkspacesAppAction", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var version string
		var workspace string
		var app string

		resp, httpRes, err := apiClient.AppManagementAPI.DoWorkspacesAppAction(context.Background(), version, workspace, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppManagementAPIService ListAppVersionAudits", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var app string

		resp, httpRes, err := apiClient.AppManagementAPI.ListAppVersionAudits(context.Background(), app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppManagementAPIService ListReviews", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AppManagementAPI.ListReviews(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppManagementAPIService ListVersionSpecificAppVersionAudits", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var version string
		var app string

		resp, httpRes, err := apiClient.AppManagementAPI.ListVersionSpecificAppVersionAudits(context.Background(), version, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AppManagementAPIService ListWorkspaceAppVersionAudits", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var version string
		var app string

		resp, httpRes, err := apiClient.AppManagementAPI.ListWorkspaceAppVersionAudits(context.Background(), workspace, version, app).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
