/*
KS API

Testing UserRelatedResourcesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/lee-doctor/kubesphere-sdk-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_UserRelatedResourcesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UserRelatedResourcesAPIService CreateNamespace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.CreateNamespace(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService CreateWorkspace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.CreateWorkspace(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService CreateWorkspaceResourceQuota", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.CreateWorkspaceResourceQuota(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService CreateWorkspaceTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.CreateWorkspaceTemplate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService DeleteNamespace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var namespace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.DeleteNamespace(context.Background(), workspace, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService DeleteWorkspace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.DeleteWorkspace(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService DeleteWorkspaceResourceQuota", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var resourcequota string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.DeleteWorkspaceResourceQuota(context.Background(), workspace, resourcequota).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService DeleteWorkspaceTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.DeleteWorkspaceTemplate(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService DescribeNamespace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var namespace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.DescribeNamespace(context.Background(), workspace, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService DescribeNamespaceV3", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var namespace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.DescribeNamespaceV3(context.Background(), workspace, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService DescribeWorkspaceResourceQuota", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var resourcequota string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.DescribeWorkspaceResourceQuota(context.Background(), workspace, resourcequota).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService DescribeWorkspaceTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.DescribeWorkspaceTemplate(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService GetKubeconfig", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var user string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.GetKubeconfig(context.Background(), user).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService GetPlatformMetrics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.GetPlatformMetrics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService GetWorkspace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.GetWorkspace(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService GetWorkspaceMetrics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.GetWorkspaceMetrics(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService GetWorkspaceTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.GetWorkspaceTemplate(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService GetWorkspace_1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.GetWorkspace_0(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService ListClusters", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.ListClusters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService ListNamespaces", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.ListNamespaces(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService ListNamespacesWorkspace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.ListNamespacesWorkspace(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService ListNamespacesWorkspaceMember", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var workspacemember string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.ListNamespacesWorkspaceMember(context.Background(), workspace, workspacemember).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService ListNamespaces_2", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.ListNamespaces_0(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService ListWorkspaceClusters", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.ListWorkspaceClusters(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService ListWorkspaceClustersV3", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.ListWorkspaceClustersV3(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService ListWorkspaceNamespaces", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.ListWorkspaceNamespaces(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService ListWorkspaceTemplates", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.ListWorkspaceTemplates(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService ListWorkspaceTemplates_3", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.ListWorkspaceTemplates_0(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService ListWorkspaces", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.ListWorkspaces(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService ListWorkspaces_4", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.ListWorkspaces_0(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService PatchNamespace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var namespace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.PatchNamespace(context.Background(), workspace, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService PatchWorkspace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.PatchWorkspace(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService PatchWorkspaceTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.PatchWorkspaceTemplate(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService PatchWorkspaceTemplateClustersVisibility", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cluster string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.PatchWorkspaceTemplateClustersVisibility(context.Background(), cluster).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService UpdateNamespace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var namespace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.UpdateNamespace(context.Background(), workspace, namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService UpdateWorkspace", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.UpdateWorkspace(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService UpdateWorkspaceResourceQuota", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string
		var resourcequota string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.UpdateWorkspaceResourceQuota(context.Background(), workspace, resourcequota).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService UpdateWorkspaceTemplate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.UpdateWorkspaceTemplate(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserRelatedResourcesAPIService UserRelatedClusters", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.UserRelatedResourcesAPI.UserRelatedClusters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
