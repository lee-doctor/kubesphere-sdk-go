/*
KS API

Testing IdentityManagementAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/lee-doctor/kubesphere-sdk-go"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_IdentityManagementAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IdentityManagementAPIService CreateUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.IdentityManagementAPI.CreateUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityManagementAPIService DeleteUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var user string

		resp, httpRes, err := apiClient.IdentityManagementAPI.DeleteUser(context.Background(), user).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityManagementAPIService DescribeUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var user string

		resp, httpRes, err := apiClient.IdentityManagementAPI.DescribeUser(context.Background(), user).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityManagementAPIService ListUserLoginRecords", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var user string

		resp, httpRes, err := apiClient.IdentityManagementAPI.ListUserLoginRecords(context.Background(), user).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityManagementAPIService ListUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.IdentityManagementAPI.ListUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityManagementAPIService ModifyPassword", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var user string

		resp, httpRes, err := apiClient.IdentityManagementAPI.ModifyPassword(context.Background(), user).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IdentityManagementAPIService UpdateUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var user string

		resp, httpRes, err := apiClient.IdentityManagementAPI.UpdateUser(context.Background(), user).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
