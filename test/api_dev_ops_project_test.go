/*
KubeSphere

Testing DevOpsProjectAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_DevOpsProjectAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DevOpsProjectAPIService CreateCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var devops string

		resp, httpRes, err := apiClient.DevOpsProjectAPI.CreateCredential(context.Background(), devops).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsProjectAPIService CreateDevOpsProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.DevOpsProjectAPI.CreateDevOpsProject(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsProjectAPIService CreatePipeline", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var devops string

		resp, httpRes, err := apiClient.DevOpsProjectAPI.CreatePipeline(context.Background(), devops).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsProjectAPIService DeleteDevOpsProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var devops string

		resp, httpRes, err := apiClient.DevOpsProjectAPI.DeleteDevOpsProject(context.Background(), workspace, devops).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsProjectAPIService GetCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var devops string
		var credential string

		resp, httpRes, err := apiClient.DevOpsProjectAPI.GetCredential(context.Background(), devops, credential).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsProjectAPIService GetDevOpsProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var devops string

		resp, httpRes, err := apiClient.DevOpsProjectAPI.GetDevOpsProject(context.Background(), workspace, devops).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsProjectAPIService GetPipelineByName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var devops string
		var pipeline string

		resp, httpRes, err := apiClient.DevOpsProjectAPI.GetPipelineByName(context.Background(), devops, pipeline).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsProjectAPIService ListCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var devops string

		resp, httpRes, err := apiClient.DevOpsProjectAPI.ListCredential(context.Background(), devops).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsProjectAPIService ListDevOpsProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.DevOpsProjectAPI.ListDevOpsProject(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsProjectAPIService ListDevOpsProjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var workspacemember string

		resp, httpRes, err := apiClient.DevOpsProjectAPI.ListDevOpsProjects(context.Background(), workspace, workspacemember).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsProjectAPIService ListPipeline", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var devops string

		resp, httpRes, err := apiClient.DevOpsProjectAPI.ListPipeline(context.Background(), devops).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsProjectAPIService ListUserDevOpsProjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string

		resp, httpRes, err := apiClient.DevOpsProjectAPI.ListUserDevOpsProjects(context.Background(), workspace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsProjectAPIService UpdateCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var devops string
		var credential string

		resp, httpRes, err := apiClient.DevOpsProjectAPI.UpdateCredential(context.Background(), devops, credential).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsProjectAPIService UpdateDevOpsProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var workspace string
		var devops string

		resp, httpRes, err := apiClient.DevOpsProjectAPI.UpdateDevOpsProject(context.Background(), workspace, devops).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DevOpsProjectAPIService UpdatePipeline", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var devops string
		var pipeline string

		resp, httpRes, err := apiClient.DevOpsProjectAPI.UpdatePipeline(context.Background(), devops, pipeline).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
