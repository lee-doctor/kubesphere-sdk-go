/*
KubeSphere

Testing PVCMetricsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_PVCMetricsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PVCMetricsAPIService HandleNamespacePVCMetricsQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string

		resp, httpRes, err := apiClient.PVCMetricsAPI.HandleNamespacePVCMetricsQuery(context.Background(), namespace).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PVCMetricsAPIService HandlePVCMetricsQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var storageclass string

		resp, httpRes, err := apiClient.PVCMetricsAPI.HandlePVCMetricsQuery(context.Background(), storageclass).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PVCMetricsAPIService HandleSpecificPVCMetricsQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var namespace string
		var pvc string

		resp, httpRes, err := apiClient.PVCMetricsAPI.HandleSpecificPVCMetricsQuery(context.Background(), namespace, pvc).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
