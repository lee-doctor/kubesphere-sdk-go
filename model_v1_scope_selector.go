/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1ScopeSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ScopeSelector{}

// V1ScopeSelector A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
type V1ScopeSelector struct {
	// A list of scope selector requirements by scope of the resources.
	MatchExpressions []V1ScopedResourceSelectorRequirement `json:"matchExpressions,omitempty"`
}

// NewV1ScopeSelector instantiates a new V1ScopeSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ScopeSelector() *V1ScopeSelector {
	this := V1ScopeSelector{}
	return &this
}

// NewV1ScopeSelectorWithDefaults instantiates a new V1ScopeSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ScopeSelectorWithDefaults() *V1ScopeSelector {
	this := V1ScopeSelector{}
	return &this
}

// GetMatchExpressions returns the MatchExpressions field value if set, zero value otherwise.
func (o *V1ScopeSelector) GetMatchExpressions() []V1ScopedResourceSelectorRequirement {
	if o == nil || IsNil(o.MatchExpressions) {
		var ret []V1ScopedResourceSelectorRequirement
		return ret
	}
	return o.MatchExpressions
}

// GetMatchExpressionsOk returns a tuple with the MatchExpressions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ScopeSelector) GetMatchExpressionsOk() ([]V1ScopedResourceSelectorRequirement, bool) {
	if o == nil || IsNil(o.MatchExpressions) {
		return nil, false
	}
	return o.MatchExpressions, true
}

// HasMatchExpressions returns a boolean if a field has been set.
func (o *V1ScopeSelector) HasMatchExpressions() bool {
	if o != nil && !IsNil(o.MatchExpressions) {
		return true
	}

	return false
}

// SetMatchExpressions gets a reference to the given []V1ScopedResourceSelectorRequirement and assigns it to the MatchExpressions field.
func (o *V1ScopeSelector) SetMatchExpressions(v []V1ScopedResourceSelectorRequirement) {
	o.MatchExpressions = v
}

func (o V1ScopeSelector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ScopeSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatchExpressions) {
		toSerialize["matchExpressions"] = o.MatchExpressions
	}
	return toSerialize, nil
}

type NullableV1ScopeSelector struct {
	value *V1ScopeSelector
	isSet bool
}

func (v NullableV1ScopeSelector) Get() *V1ScopeSelector {
	return v.value
}

func (v *NullableV1ScopeSelector) Set(val *V1ScopeSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ScopeSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ScopeSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ScopeSelector(val *V1ScopeSelector) *NullableV1ScopeSelector {
	return &NullableV1ScopeSelector{value: val, isSet: true}
}

func (v NullableV1ScopeSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ScopeSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


