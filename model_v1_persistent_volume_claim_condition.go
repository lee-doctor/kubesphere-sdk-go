/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1PersistentVolumeClaimCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1PersistentVolumeClaimCondition{}

// V1PersistentVolumeClaimCondition PersistentVolumeClaimCondition contains details about state of pvc
type V1PersistentVolumeClaimCondition struct {
	// lastProbeTime is the time we probed the condition.
	LastProbeTime *string `json:"lastProbeTime,omitempty"`
	// lastTransitionTime is the time the condition transitioned from one status to another.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`
	// message is the human-readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`
	// reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized.
	Reason *string `json:"reason,omitempty"`
	Status string `json:"status"`
	Type string `json:"type"`
}

type _V1PersistentVolumeClaimCondition V1PersistentVolumeClaimCondition

// NewV1PersistentVolumeClaimCondition instantiates a new V1PersistentVolumeClaimCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1PersistentVolumeClaimCondition(status string, type_ string) *V1PersistentVolumeClaimCondition {
	this := V1PersistentVolumeClaimCondition{}
	this.Status = status
	this.Type = type_
	return &this
}

// NewV1PersistentVolumeClaimConditionWithDefaults instantiates a new V1PersistentVolumeClaimCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1PersistentVolumeClaimConditionWithDefaults() *V1PersistentVolumeClaimCondition {
	this := V1PersistentVolumeClaimCondition{}
	return &this
}

// GetLastProbeTime returns the LastProbeTime field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimCondition) GetLastProbeTime() string {
	if o == nil || IsNil(o.LastProbeTime) {
		var ret string
		return ret
	}
	return *o.LastProbeTime
}

// GetLastProbeTimeOk returns a tuple with the LastProbeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimCondition) GetLastProbeTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastProbeTime) {
		return nil, false
	}
	return o.LastProbeTime, true
}

// HasLastProbeTime returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimCondition) HasLastProbeTime() bool {
	if o != nil && !IsNil(o.LastProbeTime) {
		return true
	}

	return false
}

// SetLastProbeTime gets a reference to the given string and assigns it to the LastProbeTime field.
func (o *V1PersistentVolumeClaimCondition) SetLastProbeTime(v string) {
	o.LastProbeTime = &v
}

// GetLastTransitionTime returns the LastTransitionTime field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimCondition) GetLastTransitionTime() string {
	if o == nil || IsNil(o.LastTransitionTime) {
		var ret string
		return ret
	}
	return *o.LastTransitionTime
}

// GetLastTransitionTimeOk returns a tuple with the LastTransitionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimCondition) GetLastTransitionTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastTransitionTime) {
		return nil, false
	}
	return o.LastTransitionTime, true
}

// HasLastTransitionTime returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimCondition) HasLastTransitionTime() bool {
	if o != nil && !IsNil(o.LastTransitionTime) {
		return true
	}

	return false
}

// SetLastTransitionTime gets a reference to the given string and assigns it to the LastTransitionTime field.
func (o *V1PersistentVolumeClaimCondition) SetLastTransitionTime(v string) {
	o.LastTransitionTime = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimCondition) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimCondition) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimCondition) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *V1PersistentVolumeClaimCondition) SetMessage(v string) {
	o.Message = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimCondition) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimCondition) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimCondition) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *V1PersistentVolumeClaimCondition) SetReason(v string) {
	o.Reason = &v
}

// GetStatus returns the Status field value
func (o *V1PersistentVolumeClaimCondition) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimCondition) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *V1PersistentVolumeClaimCondition) SetStatus(v string) {
	o.Status = v
}

// GetType returns the Type field value
func (o *V1PersistentVolumeClaimCondition) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimCondition) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *V1PersistentVolumeClaimCondition) SetType(v string) {
	o.Type = v
}

func (o V1PersistentVolumeClaimCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1PersistentVolumeClaimCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LastProbeTime) {
		toSerialize["lastProbeTime"] = o.LastProbeTime
	}
	if !IsNil(o.LastTransitionTime) {
		toSerialize["lastTransitionTime"] = o.LastTransitionTime
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	toSerialize["status"] = o.Status
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *V1PersistentVolumeClaimCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1PersistentVolumeClaimCondition := _V1PersistentVolumeClaimCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1PersistentVolumeClaimCondition)

	if err != nil {
		return err
	}

	*o = V1PersistentVolumeClaimCondition(varV1PersistentVolumeClaimCondition)

	return err
}

type NullableV1PersistentVolumeClaimCondition struct {
	value *V1PersistentVolumeClaimCondition
	isSet bool
}

func (v NullableV1PersistentVolumeClaimCondition) Get() *V1PersistentVolumeClaimCondition {
	return v.value
}

func (v *NullableV1PersistentVolumeClaimCondition) Set(val *V1PersistentVolumeClaimCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableV1PersistentVolumeClaimCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableV1PersistentVolumeClaimCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1PersistentVolumeClaimCondition(val *V1PersistentVolumeClaimCondition) *NullableV1PersistentVolumeClaimCondition {
	return &NullableV1PersistentVolumeClaimCondition{value: val, isSet: true}
}

func (v NullableV1PersistentVolumeClaimCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1PersistentVolumeClaimCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


