/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1Volume type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Volume{}

// V1Volume Volume represents a named volume in a pod that may be accessed by any container in the pod.
type V1Volume struct {
	AwsElasticBlockStore *V1AWSElasticBlockStoreVolumeSource `json:"awsElasticBlockStore,omitempty"`
	AzureDisk *V1AzureDiskVolumeSource `json:"azureDisk,omitempty"`
	AzureFile *V1AzureFileVolumeSource `json:"azureFile,omitempty"`
	Cephfs *V1CephFSVolumeSource `json:"cephfs,omitempty"`
	Cinder *V1CinderVolumeSource `json:"cinder,omitempty"`
	ConfigMap *V1ConfigMapVolumeSource `json:"configMap,omitempty"`
	Csi *V1CSIVolumeSource `json:"csi,omitempty"`
	DownwardAPI *V1DownwardAPIVolumeSource `json:"downwardAPI,omitempty"`
	EmptyDir *V1EmptyDirVolumeSource `json:"emptyDir,omitempty"`
	Fc *V1FCVolumeSource `json:"fc,omitempty"`
	FlexVolume *V1FlexVolumeSource `json:"flexVolume,omitempty"`
	Flocker *V1FlockerVolumeSource `json:"flocker,omitempty"`
	GcePersistentDisk *V1GCEPersistentDiskVolumeSource `json:"gcePersistentDisk,omitempty"`
	GitRepo *V1GitRepoVolumeSource `json:"gitRepo,omitempty"`
	Glusterfs *V1GlusterfsVolumeSource `json:"glusterfs,omitempty"`
	HostPath *V1HostPathVolumeSource `json:"hostPath,omitempty"`
	Iscsi *V1ISCSIVolumeSource `json:"iscsi,omitempty"`
	// Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `json:"name"`
	Nfs *V1NFSVolumeSource `json:"nfs,omitempty"`
	PersistentVolumeClaim *V1PersistentVolumeClaimVolumeSource `json:"persistentVolumeClaim,omitempty"`
	PhotonPersistentDisk *V1PhotonPersistentDiskVolumeSource `json:"photonPersistentDisk,omitempty"`
	PortworxVolume *V1PortworxVolumeSource `json:"portworxVolume,omitempty"`
	Projected *V1ProjectedVolumeSource `json:"projected,omitempty"`
	Quobyte *V1QuobyteVolumeSource `json:"quobyte,omitempty"`
	Rbd *V1RBDVolumeSource `json:"rbd,omitempty"`
	ScaleIO *V1ScaleIOVolumeSource `json:"scaleIO,omitempty"`
	Secret *V1SecretVolumeSource `json:"secret,omitempty"`
	Storageos *V1StorageOSVolumeSource `json:"storageos,omitempty"`
	VsphereVolume *V1VsphereVirtualDiskVolumeSource `json:"vsphereVolume,omitempty"`
}

type _V1Volume V1Volume

// NewV1Volume instantiates a new V1Volume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Volume(name string) *V1Volume {
	this := V1Volume{}
	this.Name = name
	return &this
}

// NewV1VolumeWithDefaults instantiates a new V1Volume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1VolumeWithDefaults() *V1Volume {
	this := V1Volume{}
	return &this
}

// GetAwsElasticBlockStore returns the AwsElasticBlockStore field value if set, zero value otherwise.
func (o *V1Volume) GetAwsElasticBlockStore() V1AWSElasticBlockStoreVolumeSource {
	if o == nil || IsNil(o.AwsElasticBlockStore) {
		var ret V1AWSElasticBlockStoreVolumeSource
		return ret
	}
	return *o.AwsElasticBlockStore
}

// GetAwsElasticBlockStoreOk returns a tuple with the AwsElasticBlockStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetAwsElasticBlockStoreOk() (*V1AWSElasticBlockStoreVolumeSource, bool) {
	if o == nil || IsNil(o.AwsElasticBlockStore) {
		return nil, false
	}
	return o.AwsElasticBlockStore, true
}

// HasAwsElasticBlockStore returns a boolean if a field has been set.
func (o *V1Volume) HasAwsElasticBlockStore() bool {
	if o != nil && !IsNil(o.AwsElasticBlockStore) {
		return true
	}

	return false
}

// SetAwsElasticBlockStore gets a reference to the given V1AWSElasticBlockStoreVolumeSource and assigns it to the AwsElasticBlockStore field.
func (o *V1Volume) SetAwsElasticBlockStore(v V1AWSElasticBlockStoreVolumeSource) {
	o.AwsElasticBlockStore = &v
}

// GetAzureDisk returns the AzureDisk field value if set, zero value otherwise.
func (o *V1Volume) GetAzureDisk() V1AzureDiskVolumeSource {
	if o == nil || IsNil(o.AzureDisk) {
		var ret V1AzureDiskVolumeSource
		return ret
	}
	return *o.AzureDisk
}

// GetAzureDiskOk returns a tuple with the AzureDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetAzureDiskOk() (*V1AzureDiskVolumeSource, bool) {
	if o == nil || IsNil(o.AzureDisk) {
		return nil, false
	}
	return o.AzureDisk, true
}

// HasAzureDisk returns a boolean if a field has been set.
func (o *V1Volume) HasAzureDisk() bool {
	if o != nil && !IsNil(o.AzureDisk) {
		return true
	}

	return false
}

// SetAzureDisk gets a reference to the given V1AzureDiskVolumeSource and assigns it to the AzureDisk field.
func (o *V1Volume) SetAzureDisk(v V1AzureDiskVolumeSource) {
	o.AzureDisk = &v
}

// GetAzureFile returns the AzureFile field value if set, zero value otherwise.
func (o *V1Volume) GetAzureFile() V1AzureFileVolumeSource {
	if o == nil || IsNil(o.AzureFile) {
		var ret V1AzureFileVolumeSource
		return ret
	}
	return *o.AzureFile
}

// GetAzureFileOk returns a tuple with the AzureFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetAzureFileOk() (*V1AzureFileVolumeSource, bool) {
	if o == nil || IsNil(o.AzureFile) {
		return nil, false
	}
	return o.AzureFile, true
}

// HasAzureFile returns a boolean if a field has been set.
func (o *V1Volume) HasAzureFile() bool {
	if o != nil && !IsNil(o.AzureFile) {
		return true
	}

	return false
}

// SetAzureFile gets a reference to the given V1AzureFileVolumeSource and assigns it to the AzureFile field.
func (o *V1Volume) SetAzureFile(v V1AzureFileVolumeSource) {
	o.AzureFile = &v
}

// GetCephfs returns the Cephfs field value if set, zero value otherwise.
func (o *V1Volume) GetCephfs() V1CephFSVolumeSource {
	if o == nil || IsNil(o.Cephfs) {
		var ret V1CephFSVolumeSource
		return ret
	}
	return *o.Cephfs
}

// GetCephfsOk returns a tuple with the Cephfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetCephfsOk() (*V1CephFSVolumeSource, bool) {
	if o == nil || IsNil(o.Cephfs) {
		return nil, false
	}
	return o.Cephfs, true
}

// HasCephfs returns a boolean if a field has been set.
func (o *V1Volume) HasCephfs() bool {
	if o != nil && !IsNil(o.Cephfs) {
		return true
	}

	return false
}

// SetCephfs gets a reference to the given V1CephFSVolumeSource and assigns it to the Cephfs field.
func (o *V1Volume) SetCephfs(v V1CephFSVolumeSource) {
	o.Cephfs = &v
}

// GetCinder returns the Cinder field value if set, zero value otherwise.
func (o *V1Volume) GetCinder() V1CinderVolumeSource {
	if o == nil || IsNil(o.Cinder) {
		var ret V1CinderVolumeSource
		return ret
	}
	return *o.Cinder
}

// GetCinderOk returns a tuple with the Cinder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetCinderOk() (*V1CinderVolumeSource, bool) {
	if o == nil || IsNil(o.Cinder) {
		return nil, false
	}
	return o.Cinder, true
}

// HasCinder returns a boolean if a field has been set.
func (o *V1Volume) HasCinder() bool {
	if o != nil && !IsNil(o.Cinder) {
		return true
	}

	return false
}

// SetCinder gets a reference to the given V1CinderVolumeSource and assigns it to the Cinder field.
func (o *V1Volume) SetCinder(v V1CinderVolumeSource) {
	o.Cinder = &v
}

// GetConfigMap returns the ConfigMap field value if set, zero value otherwise.
func (o *V1Volume) GetConfigMap() V1ConfigMapVolumeSource {
	if o == nil || IsNil(o.ConfigMap) {
		var ret V1ConfigMapVolumeSource
		return ret
	}
	return *o.ConfigMap
}

// GetConfigMapOk returns a tuple with the ConfigMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetConfigMapOk() (*V1ConfigMapVolumeSource, bool) {
	if o == nil || IsNil(o.ConfigMap) {
		return nil, false
	}
	return o.ConfigMap, true
}

// HasConfigMap returns a boolean if a field has been set.
func (o *V1Volume) HasConfigMap() bool {
	if o != nil && !IsNil(o.ConfigMap) {
		return true
	}

	return false
}

// SetConfigMap gets a reference to the given V1ConfigMapVolumeSource and assigns it to the ConfigMap field.
func (o *V1Volume) SetConfigMap(v V1ConfigMapVolumeSource) {
	o.ConfigMap = &v
}

// GetCsi returns the Csi field value if set, zero value otherwise.
func (o *V1Volume) GetCsi() V1CSIVolumeSource {
	if o == nil || IsNil(o.Csi) {
		var ret V1CSIVolumeSource
		return ret
	}
	return *o.Csi
}

// GetCsiOk returns a tuple with the Csi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetCsiOk() (*V1CSIVolumeSource, bool) {
	if o == nil || IsNil(o.Csi) {
		return nil, false
	}
	return o.Csi, true
}

// HasCsi returns a boolean if a field has been set.
func (o *V1Volume) HasCsi() bool {
	if o != nil && !IsNil(o.Csi) {
		return true
	}

	return false
}

// SetCsi gets a reference to the given V1CSIVolumeSource and assigns it to the Csi field.
func (o *V1Volume) SetCsi(v V1CSIVolumeSource) {
	o.Csi = &v
}

// GetDownwardAPI returns the DownwardAPI field value if set, zero value otherwise.
func (o *V1Volume) GetDownwardAPI() V1DownwardAPIVolumeSource {
	if o == nil || IsNil(o.DownwardAPI) {
		var ret V1DownwardAPIVolumeSource
		return ret
	}
	return *o.DownwardAPI
}

// GetDownwardAPIOk returns a tuple with the DownwardAPI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetDownwardAPIOk() (*V1DownwardAPIVolumeSource, bool) {
	if o == nil || IsNil(o.DownwardAPI) {
		return nil, false
	}
	return o.DownwardAPI, true
}

// HasDownwardAPI returns a boolean if a field has been set.
func (o *V1Volume) HasDownwardAPI() bool {
	if o != nil && !IsNil(o.DownwardAPI) {
		return true
	}

	return false
}

// SetDownwardAPI gets a reference to the given V1DownwardAPIVolumeSource and assigns it to the DownwardAPI field.
func (o *V1Volume) SetDownwardAPI(v V1DownwardAPIVolumeSource) {
	o.DownwardAPI = &v
}

// GetEmptyDir returns the EmptyDir field value if set, zero value otherwise.
func (o *V1Volume) GetEmptyDir() V1EmptyDirVolumeSource {
	if o == nil || IsNil(o.EmptyDir) {
		var ret V1EmptyDirVolumeSource
		return ret
	}
	return *o.EmptyDir
}

// GetEmptyDirOk returns a tuple with the EmptyDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetEmptyDirOk() (*V1EmptyDirVolumeSource, bool) {
	if o == nil || IsNil(o.EmptyDir) {
		return nil, false
	}
	return o.EmptyDir, true
}

// HasEmptyDir returns a boolean if a field has been set.
func (o *V1Volume) HasEmptyDir() bool {
	if o != nil && !IsNil(o.EmptyDir) {
		return true
	}

	return false
}

// SetEmptyDir gets a reference to the given V1EmptyDirVolumeSource and assigns it to the EmptyDir field.
func (o *V1Volume) SetEmptyDir(v V1EmptyDirVolumeSource) {
	o.EmptyDir = &v
}

// GetFc returns the Fc field value if set, zero value otherwise.
func (o *V1Volume) GetFc() V1FCVolumeSource {
	if o == nil || IsNil(o.Fc) {
		var ret V1FCVolumeSource
		return ret
	}
	return *o.Fc
}

// GetFcOk returns a tuple with the Fc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetFcOk() (*V1FCVolumeSource, bool) {
	if o == nil || IsNil(o.Fc) {
		return nil, false
	}
	return o.Fc, true
}

// HasFc returns a boolean if a field has been set.
func (o *V1Volume) HasFc() bool {
	if o != nil && !IsNil(o.Fc) {
		return true
	}

	return false
}

// SetFc gets a reference to the given V1FCVolumeSource and assigns it to the Fc field.
func (o *V1Volume) SetFc(v V1FCVolumeSource) {
	o.Fc = &v
}

// GetFlexVolume returns the FlexVolume field value if set, zero value otherwise.
func (o *V1Volume) GetFlexVolume() V1FlexVolumeSource {
	if o == nil || IsNil(o.FlexVolume) {
		var ret V1FlexVolumeSource
		return ret
	}
	return *o.FlexVolume
}

// GetFlexVolumeOk returns a tuple with the FlexVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetFlexVolumeOk() (*V1FlexVolumeSource, bool) {
	if o == nil || IsNil(o.FlexVolume) {
		return nil, false
	}
	return o.FlexVolume, true
}

// HasFlexVolume returns a boolean if a field has been set.
func (o *V1Volume) HasFlexVolume() bool {
	if o != nil && !IsNil(o.FlexVolume) {
		return true
	}

	return false
}

// SetFlexVolume gets a reference to the given V1FlexVolumeSource and assigns it to the FlexVolume field.
func (o *V1Volume) SetFlexVolume(v V1FlexVolumeSource) {
	o.FlexVolume = &v
}

// GetFlocker returns the Flocker field value if set, zero value otherwise.
func (o *V1Volume) GetFlocker() V1FlockerVolumeSource {
	if o == nil || IsNil(o.Flocker) {
		var ret V1FlockerVolumeSource
		return ret
	}
	return *o.Flocker
}

// GetFlockerOk returns a tuple with the Flocker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetFlockerOk() (*V1FlockerVolumeSource, bool) {
	if o == nil || IsNil(o.Flocker) {
		return nil, false
	}
	return o.Flocker, true
}

// HasFlocker returns a boolean if a field has been set.
func (o *V1Volume) HasFlocker() bool {
	if o != nil && !IsNil(o.Flocker) {
		return true
	}

	return false
}

// SetFlocker gets a reference to the given V1FlockerVolumeSource and assigns it to the Flocker field.
func (o *V1Volume) SetFlocker(v V1FlockerVolumeSource) {
	o.Flocker = &v
}

// GetGcePersistentDisk returns the GcePersistentDisk field value if set, zero value otherwise.
func (o *V1Volume) GetGcePersistentDisk() V1GCEPersistentDiskVolumeSource {
	if o == nil || IsNil(o.GcePersistentDisk) {
		var ret V1GCEPersistentDiskVolumeSource
		return ret
	}
	return *o.GcePersistentDisk
}

// GetGcePersistentDiskOk returns a tuple with the GcePersistentDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetGcePersistentDiskOk() (*V1GCEPersistentDiskVolumeSource, bool) {
	if o == nil || IsNil(o.GcePersistentDisk) {
		return nil, false
	}
	return o.GcePersistentDisk, true
}

// HasGcePersistentDisk returns a boolean if a field has been set.
func (o *V1Volume) HasGcePersistentDisk() bool {
	if o != nil && !IsNil(o.GcePersistentDisk) {
		return true
	}

	return false
}

// SetGcePersistentDisk gets a reference to the given V1GCEPersistentDiskVolumeSource and assigns it to the GcePersistentDisk field.
func (o *V1Volume) SetGcePersistentDisk(v V1GCEPersistentDiskVolumeSource) {
	o.GcePersistentDisk = &v
}

// GetGitRepo returns the GitRepo field value if set, zero value otherwise.
func (o *V1Volume) GetGitRepo() V1GitRepoVolumeSource {
	if o == nil || IsNil(o.GitRepo) {
		var ret V1GitRepoVolumeSource
		return ret
	}
	return *o.GitRepo
}

// GetGitRepoOk returns a tuple with the GitRepo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetGitRepoOk() (*V1GitRepoVolumeSource, bool) {
	if o == nil || IsNil(o.GitRepo) {
		return nil, false
	}
	return o.GitRepo, true
}

// HasGitRepo returns a boolean if a field has been set.
func (o *V1Volume) HasGitRepo() bool {
	if o != nil && !IsNil(o.GitRepo) {
		return true
	}

	return false
}

// SetGitRepo gets a reference to the given V1GitRepoVolumeSource and assigns it to the GitRepo field.
func (o *V1Volume) SetGitRepo(v V1GitRepoVolumeSource) {
	o.GitRepo = &v
}

// GetGlusterfs returns the Glusterfs field value if set, zero value otherwise.
func (o *V1Volume) GetGlusterfs() V1GlusterfsVolumeSource {
	if o == nil || IsNil(o.Glusterfs) {
		var ret V1GlusterfsVolumeSource
		return ret
	}
	return *o.Glusterfs
}

// GetGlusterfsOk returns a tuple with the Glusterfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetGlusterfsOk() (*V1GlusterfsVolumeSource, bool) {
	if o == nil || IsNil(o.Glusterfs) {
		return nil, false
	}
	return o.Glusterfs, true
}

// HasGlusterfs returns a boolean if a field has been set.
func (o *V1Volume) HasGlusterfs() bool {
	if o != nil && !IsNil(o.Glusterfs) {
		return true
	}

	return false
}

// SetGlusterfs gets a reference to the given V1GlusterfsVolumeSource and assigns it to the Glusterfs field.
func (o *V1Volume) SetGlusterfs(v V1GlusterfsVolumeSource) {
	o.Glusterfs = &v
}

// GetHostPath returns the HostPath field value if set, zero value otherwise.
func (o *V1Volume) GetHostPath() V1HostPathVolumeSource {
	if o == nil || IsNil(o.HostPath) {
		var ret V1HostPathVolumeSource
		return ret
	}
	return *o.HostPath
}

// GetHostPathOk returns a tuple with the HostPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetHostPathOk() (*V1HostPathVolumeSource, bool) {
	if o == nil || IsNil(o.HostPath) {
		return nil, false
	}
	return o.HostPath, true
}

// HasHostPath returns a boolean if a field has been set.
func (o *V1Volume) HasHostPath() bool {
	if o != nil && !IsNil(o.HostPath) {
		return true
	}

	return false
}

// SetHostPath gets a reference to the given V1HostPathVolumeSource and assigns it to the HostPath field.
func (o *V1Volume) SetHostPath(v V1HostPathVolumeSource) {
	o.HostPath = &v
}

// GetIscsi returns the Iscsi field value if set, zero value otherwise.
func (o *V1Volume) GetIscsi() V1ISCSIVolumeSource {
	if o == nil || IsNil(o.Iscsi) {
		var ret V1ISCSIVolumeSource
		return ret
	}
	return *o.Iscsi
}

// GetIscsiOk returns a tuple with the Iscsi field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetIscsiOk() (*V1ISCSIVolumeSource, bool) {
	if o == nil || IsNil(o.Iscsi) {
		return nil, false
	}
	return o.Iscsi, true
}

// HasIscsi returns a boolean if a field has been set.
func (o *V1Volume) HasIscsi() bool {
	if o != nil && !IsNil(o.Iscsi) {
		return true
	}

	return false
}

// SetIscsi gets a reference to the given V1ISCSIVolumeSource and assigns it to the Iscsi field.
func (o *V1Volume) SetIscsi(v V1ISCSIVolumeSource) {
	o.Iscsi = &v
}

// GetName returns the Name field value
func (o *V1Volume) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *V1Volume) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *V1Volume) SetName(v string) {
	o.Name = v
}

// GetNfs returns the Nfs field value if set, zero value otherwise.
func (o *V1Volume) GetNfs() V1NFSVolumeSource {
	if o == nil || IsNil(o.Nfs) {
		var ret V1NFSVolumeSource
		return ret
	}
	return *o.Nfs
}

// GetNfsOk returns a tuple with the Nfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetNfsOk() (*V1NFSVolumeSource, bool) {
	if o == nil || IsNil(o.Nfs) {
		return nil, false
	}
	return o.Nfs, true
}

// HasNfs returns a boolean if a field has been set.
func (o *V1Volume) HasNfs() bool {
	if o != nil && !IsNil(o.Nfs) {
		return true
	}

	return false
}

// SetNfs gets a reference to the given V1NFSVolumeSource and assigns it to the Nfs field.
func (o *V1Volume) SetNfs(v V1NFSVolumeSource) {
	o.Nfs = &v
}

// GetPersistentVolumeClaim returns the PersistentVolumeClaim field value if set, zero value otherwise.
func (o *V1Volume) GetPersistentVolumeClaim() V1PersistentVolumeClaimVolumeSource {
	if o == nil || IsNil(o.PersistentVolumeClaim) {
		var ret V1PersistentVolumeClaimVolumeSource
		return ret
	}
	return *o.PersistentVolumeClaim
}

// GetPersistentVolumeClaimOk returns a tuple with the PersistentVolumeClaim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetPersistentVolumeClaimOk() (*V1PersistentVolumeClaimVolumeSource, bool) {
	if o == nil || IsNil(o.PersistentVolumeClaim) {
		return nil, false
	}
	return o.PersistentVolumeClaim, true
}

// HasPersistentVolumeClaim returns a boolean if a field has been set.
func (o *V1Volume) HasPersistentVolumeClaim() bool {
	if o != nil && !IsNil(o.PersistentVolumeClaim) {
		return true
	}

	return false
}

// SetPersistentVolumeClaim gets a reference to the given V1PersistentVolumeClaimVolumeSource and assigns it to the PersistentVolumeClaim field.
func (o *V1Volume) SetPersistentVolumeClaim(v V1PersistentVolumeClaimVolumeSource) {
	o.PersistentVolumeClaim = &v
}

// GetPhotonPersistentDisk returns the PhotonPersistentDisk field value if set, zero value otherwise.
func (o *V1Volume) GetPhotonPersistentDisk() V1PhotonPersistentDiskVolumeSource {
	if o == nil || IsNil(o.PhotonPersistentDisk) {
		var ret V1PhotonPersistentDiskVolumeSource
		return ret
	}
	return *o.PhotonPersistentDisk
}

// GetPhotonPersistentDiskOk returns a tuple with the PhotonPersistentDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetPhotonPersistentDiskOk() (*V1PhotonPersistentDiskVolumeSource, bool) {
	if o == nil || IsNil(o.PhotonPersistentDisk) {
		return nil, false
	}
	return o.PhotonPersistentDisk, true
}

// HasPhotonPersistentDisk returns a boolean if a field has been set.
func (o *V1Volume) HasPhotonPersistentDisk() bool {
	if o != nil && !IsNil(o.PhotonPersistentDisk) {
		return true
	}

	return false
}

// SetPhotonPersistentDisk gets a reference to the given V1PhotonPersistentDiskVolumeSource and assigns it to the PhotonPersistentDisk field.
func (o *V1Volume) SetPhotonPersistentDisk(v V1PhotonPersistentDiskVolumeSource) {
	o.PhotonPersistentDisk = &v
}

// GetPortworxVolume returns the PortworxVolume field value if set, zero value otherwise.
func (o *V1Volume) GetPortworxVolume() V1PortworxVolumeSource {
	if o == nil || IsNil(o.PortworxVolume) {
		var ret V1PortworxVolumeSource
		return ret
	}
	return *o.PortworxVolume
}

// GetPortworxVolumeOk returns a tuple with the PortworxVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetPortworxVolumeOk() (*V1PortworxVolumeSource, bool) {
	if o == nil || IsNil(o.PortworxVolume) {
		return nil, false
	}
	return o.PortworxVolume, true
}

// HasPortworxVolume returns a boolean if a field has been set.
func (o *V1Volume) HasPortworxVolume() bool {
	if o != nil && !IsNil(o.PortworxVolume) {
		return true
	}

	return false
}

// SetPortworxVolume gets a reference to the given V1PortworxVolumeSource and assigns it to the PortworxVolume field.
func (o *V1Volume) SetPortworxVolume(v V1PortworxVolumeSource) {
	o.PortworxVolume = &v
}

// GetProjected returns the Projected field value if set, zero value otherwise.
func (o *V1Volume) GetProjected() V1ProjectedVolumeSource {
	if o == nil || IsNil(o.Projected) {
		var ret V1ProjectedVolumeSource
		return ret
	}
	return *o.Projected
}

// GetProjectedOk returns a tuple with the Projected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetProjectedOk() (*V1ProjectedVolumeSource, bool) {
	if o == nil || IsNil(o.Projected) {
		return nil, false
	}
	return o.Projected, true
}

// HasProjected returns a boolean if a field has been set.
func (o *V1Volume) HasProjected() bool {
	if o != nil && !IsNil(o.Projected) {
		return true
	}

	return false
}

// SetProjected gets a reference to the given V1ProjectedVolumeSource and assigns it to the Projected field.
func (o *V1Volume) SetProjected(v V1ProjectedVolumeSource) {
	o.Projected = &v
}

// GetQuobyte returns the Quobyte field value if set, zero value otherwise.
func (o *V1Volume) GetQuobyte() V1QuobyteVolumeSource {
	if o == nil || IsNil(o.Quobyte) {
		var ret V1QuobyteVolumeSource
		return ret
	}
	return *o.Quobyte
}

// GetQuobyteOk returns a tuple with the Quobyte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetQuobyteOk() (*V1QuobyteVolumeSource, bool) {
	if o == nil || IsNil(o.Quobyte) {
		return nil, false
	}
	return o.Quobyte, true
}

// HasQuobyte returns a boolean if a field has been set.
func (o *V1Volume) HasQuobyte() bool {
	if o != nil && !IsNil(o.Quobyte) {
		return true
	}

	return false
}

// SetQuobyte gets a reference to the given V1QuobyteVolumeSource and assigns it to the Quobyte field.
func (o *V1Volume) SetQuobyte(v V1QuobyteVolumeSource) {
	o.Quobyte = &v
}

// GetRbd returns the Rbd field value if set, zero value otherwise.
func (o *V1Volume) GetRbd() V1RBDVolumeSource {
	if o == nil || IsNil(o.Rbd) {
		var ret V1RBDVolumeSource
		return ret
	}
	return *o.Rbd
}

// GetRbdOk returns a tuple with the Rbd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetRbdOk() (*V1RBDVolumeSource, bool) {
	if o == nil || IsNil(o.Rbd) {
		return nil, false
	}
	return o.Rbd, true
}

// HasRbd returns a boolean if a field has been set.
func (o *V1Volume) HasRbd() bool {
	if o != nil && !IsNil(o.Rbd) {
		return true
	}

	return false
}

// SetRbd gets a reference to the given V1RBDVolumeSource and assigns it to the Rbd field.
func (o *V1Volume) SetRbd(v V1RBDVolumeSource) {
	o.Rbd = &v
}

// GetScaleIO returns the ScaleIO field value if set, zero value otherwise.
func (o *V1Volume) GetScaleIO() V1ScaleIOVolumeSource {
	if o == nil || IsNil(o.ScaleIO) {
		var ret V1ScaleIOVolumeSource
		return ret
	}
	return *o.ScaleIO
}

// GetScaleIOOk returns a tuple with the ScaleIO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetScaleIOOk() (*V1ScaleIOVolumeSource, bool) {
	if o == nil || IsNil(o.ScaleIO) {
		return nil, false
	}
	return o.ScaleIO, true
}

// HasScaleIO returns a boolean if a field has been set.
func (o *V1Volume) HasScaleIO() bool {
	if o != nil && !IsNil(o.ScaleIO) {
		return true
	}

	return false
}

// SetScaleIO gets a reference to the given V1ScaleIOVolumeSource and assigns it to the ScaleIO field.
func (o *V1Volume) SetScaleIO(v V1ScaleIOVolumeSource) {
	o.ScaleIO = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *V1Volume) GetSecret() V1SecretVolumeSource {
	if o == nil || IsNil(o.Secret) {
		var ret V1SecretVolumeSource
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetSecretOk() (*V1SecretVolumeSource, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *V1Volume) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given V1SecretVolumeSource and assigns it to the Secret field.
func (o *V1Volume) SetSecret(v V1SecretVolumeSource) {
	o.Secret = &v
}

// GetStorageos returns the Storageos field value if set, zero value otherwise.
func (o *V1Volume) GetStorageos() V1StorageOSVolumeSource {
	if o == nil || IsNil(o.Storageos) {
		var ret V1StorageOSVolumeSource
		return ret
	}
	return *o.Storageos
}

// GetStorageosOk returns a tuple with the Storageos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetStorageosOk() (*V1StorageOSVolumeSource, bool) {
	if o == nil || IsNil(o.Storageos) {
		return nil, false
	}
	return o.Storageos, true
}

// HasStorageos returns a boolean if a field has been set.
func (o *V1Volume) HasStorageos() bool {
	if o != nil && !IsNil(o.Storageos) {
		return true
	}

	return false
}

// SetStorageos gets a reference to the given V1StorageOSVolumeSource and assigns it to the Storageos field.
func (o *V1Volume) SetStorageos(v V1StorageOSVolumeSource) {
	o.Storageos = &v
}

// GetVsphereVolume returns the VsphereVolume field value if set, zero value otherwise.
func (o *V1Volume) GetVsphereVolume() V1VsphereVirtualDiskVolumeSource {
	if o == nil || IsNil(o.VsphereVolume) {
		var ret V1VsphereVirtualDiskVolumeSource
		return ret
	}
	return *o.VsphereVolume
}

// GetVsphereVolumeOk returns a tuple with the VsphereVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Volume) GetVsphereVolumeOk() (*V1VsphereVirtualDiskVolumeSource, bool) {
	if o == nil || IsNil(o.VsphereVolume) {
		return nil, false
	}
	return o.VsphereVolume, true
}

// HasVsphereVolume returns a boolean if a field has been set.
func (o *V1Volume) HasVsphereVolume() bool {
	if o != nil && !IsNil(o.VsphereVolume) {
		return true
	}

	return false
}

// SetVsphereVolume gets a reference to the given V1VsphereVirtualDiskVolumeSource and assigns it to the VsphereVolume field.
func (o *V1Volume) SetVsphereVolume(v V1VsphereVirtualDiskVolumeSource) {
	o.VsphereVolume = &v
}

func (o V1Volume) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Volume) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwsElasticBlockStore) {
		toSerialize["awsElasticBlockStore"] = o.AwsElasticBlockStore
	}
	if !IsNil(o.AzureDisk) {
		toSerialize["azureDisk"] = o.AzureDisk
	}
	if !IsNil(o.AzureFile) {
		toSerialize["azureFile"] = o.AzureFile
	}
	if !IsNil(o.Cephfs) {
		toSerialize["cephfs"] = o.Cephfs
	}
	if !IsNil(o.Cinder) {
		toSerialize["cinder"] = o.Cinder
	}
	if !IsNil(o.ConfigMap) {
		toSerialize["configMap"] = o.ConfigMap
	}
	if !IsNil(o.Csi) {
		toSerialize["csi"] = o.Csi
	}
	if !IsNil(o.DownwardAPI) {
		toSerialize["downwardAPI"] = o.DownwardAPI
	}
	if !IsNil(o.EmptyDir) {
		toSerialize["emptyDir"] = o.EmptyDir
	}
	if !IsNil(o.Fc) {
		toSerialize["fc"] = o.Fc
	}
	if !IsNil(o.FlexVolume) {
		toSerialize["flexVolume"] = o.FlexVolume
	}
	if !IsNil(o.Flocker) {
		toSerialize["flocker"] = o.Flocker
	}
	if !IsNil(o.GcePersistentDisk) {
		toSerialize["gcePersistentDisk"] = o.GcePersistentDisk
	}
	if !IsNil(o.GitRepo) {
		toSerialize["gitRepo"] = o.GitRepo
	}
	if !IsNil(o.Glusterfs) {
		toSerialize["glusterfs"] = o.Glusterfs
	}
	if !IsNil(o.HostPath) {
		toSerialize["hostPath"] = o.HostPath
	}
	if !IsNil(o.Iscsi) {
		toSerialize["iscsi"] = o.Iscsi
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Nfs) {
		toSerialize["nfs"] = o.Nfs
	}
	if !IsNil(o.PersistentVolumeClaim) {
		toSerialize["persistentVolumeClaim"] = o.PersistentVolumeClaim
	}
	if !IsNil(o.PhotonPersistentDisk) {
		toSerialize["photonPersistentDisk"] = o.PhotonPersistentDisk
	}
	if !IsNil(o.PortworxVolume) {
		toSerialize["portworxVolume"] = o.PortworxVolume
	}
	if !IsNil(o.Projected) {
		toSerialize["projected"] = o.Projected
	}
	if !IsNil(o.Quobyte) {
		toSerialize["quobyte"] = o.Quobyte
	}
	if !IsNil(o.Rbd) {
		toSerialize["rbd"] = o.Rbd
	}
	if !IsNil(o.ScaleIO) {
		toSerialize["scaleIO"] = o.ScaleIO
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	if !IsNil(o.Storageos) {
		toSerialize["storageos"] = o.Storageos
	}
	if !IsNil(o.VsphereVolume) {
		toSerialize["vsphereVolume"] = o.VsphereVolume
	}
	return toSerialize, nil
}

func (o *V1Volume) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1Volume := _V1Volume{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1Volume)

	if err != nil {
		return err
	}

	*o = V1Volume(varV1Volume)

	return err
}

type NullableV1Volume struct {
	value *V1Volume
	isSet bool
}

func (v NullableV1Volume) Get() *V1Volume {
	return v.value
}

func (v *NullableV1Volume) Set(val *V1Volume) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Volume) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Volume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Volume(val *V1Volume) *NullableV1Volume {
	return &NullableV1Volume{value: val, isSet: true}
}

func (v NullableV1Volume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Volume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


