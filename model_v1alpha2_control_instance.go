/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1alpha2ControlInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha2ControlInstance{}

// V1alpha2ControlInstance struct for V1alpha2ControlInstance
type V1alpha2ControlInstance struct {
	Control V1alpha2Control `json:"Control"`
	NodeID string `json:"NodeID"`
	ProbeID string `json:"ProbeID"`
}

type _V1alpha2ControlInstance V1alpha2ControlInstance

// NewV1alpha2ControlInstance instantiates a new V1alpha2ControlInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha2ControlInstance(control V1alpha2Control, nodeID string, probeID string) *V1alpha2ControlInstance {
	this := V1alpha2ControlInstance{}
	this.Control = control
	this.NodeID = nodeID
	this.ProbeID = probeID
	return &this
}

// NewV1alpha2ControlInstanceWithDefaults instantiates a new V1alpha2ControlInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha2ControlInstanceWithDefaults() *V1alpha2ControlInstance {
	this := V1alpha2ControlInstance{}
	return &this
}

// GetControl returns the Control field value
func (o *V1alpha2ControlInstance) GetControl() V1alpha2Control {
	if o == nil {
		var ret V1alpha2Control
		return ret
	}

	return o.Control
}

// GetControlOk returns a tuple with the Control field value
// and a boolean to check if the value has been set.
func (o *V1alpha2ControlInstance) GetControlOk() (*V1alpha2Control, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Control, true
}

// SetControl sets field value
func (o *V1alpha2ControlInstance) SetControl(v V1alpha2Control) {
	o.Control = v
}

// GetNodeID returns the NodeID field value
func (o *V1alpha2ControlInstance) GetNodeID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeID
}

// GetNodeIDOk returns a tuple with the NodeID field value
// and a boolean to check if the value has been set.
func (o *V1alpha2ControlInstance) GetNodeIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeID, true
}

// SetNodeID sets field value
func (o *V1alpha2ControlInstance) SetNodeID(v string) {
	o.NodeID = v
}

// GetProbeID returns the ProbeID field value
func (o *V1alpha2ControlInstance) GetProbeID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProbeID
}

// GetProbeIDOk returns a tuple with the ProbeID field value
// and a boolean to check if the value has been set.
func (o *V1alpha2ControlInstance) GetProbeIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProbeID, true
}

// SetProbeID sets field value
func (o *V1alpha2ControlInstance) SetProbeID(v string) {
	o.ProbeID = v
}

func (o V1alpha2ControlInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha2ControlInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Control"] = o.Control
	toSerialize["NodeID"] = o.NodeID
	toSerialize["ProbeID"] = o.ProbeID
	return toSerialize, nil
}

func (o *V1alpha2ControlInstance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Control",
		"NodeID",
		"ProbeID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1alpha2ControlInstance := _V1alpha2ControlInstance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1alpha2ControlInstance)

	if err != nil {
		return err
	}

	*o = V1alpha2ControlInstance(varV1alpha2ControlInstance)

	return err
}

type NullableV1alpha2ControlInstance struct {
	value *V1alpha2ControlInstance
	isSet bool
}

func (v NullableV1alpha2ControlInstance) Get() *V1alpha2ControlInstance {
	return v.value
}

func (v *NullableV1alpha2ControlInstance) Set(val *V1alpha2ControlInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha2ControlInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha2ControlInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha2ControlInstance(val *V1alpha2ControlInstance) *NullableV1alpha2ControlInstance {
	return &NullableV1alpha2ControlInstance{value: val, isSet: true}
}

func (v NullableV1alpha2ControlInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha2ControlInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


