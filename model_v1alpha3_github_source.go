/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1alpha3GithubSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha3GithubSource{}

// V1alpha3GithubSource struct for V1alpha3GithubSource
type V1alpha3GithubSource struct {
	// The api url can specify the location of the github apiserver.For private cloud configuration
	ApiUri *string `json:"api_uri,omitempty"`
	// credential id to access github source
	CredentialId *string `json:"credential_id,omitempty"`
	// Discover branch configuration
	DiscoverBranches *int32 `json:"discover_branches,omitempty"`
	DiscoverPrFromForks *V1alpha3DiscoverPRFromForks `json:"discover_pr_from_forks,omitempty"`
	// Discover origin PR configuration
	DiscoverPrFromOrigin *int32 `json:"discover_pr_from_origin,omitempty"`
	// Discover tag configuration
	DiscoverTags *bool `json:"discover_tags,omitempty"`
	GitCloneOption *V1alpha3GitCloneOption `json:"git_clone_option,omitempty"`
	// owner of github repo
	Owner *string `json:"owner,omitempty"`
	// Regex used to match the name of the branch that needs to be run
	RegexFilter *string `json:"regex_filter,omitempty"`
	// repo name of github repo
	Repo *string `json:"repo,omitempty"`
	// uid of scm
	ScmId *string `json:"scm_id,omitempty"`
}

// NewV1alpha3GithubSource instantiates a new V1alpha3GithubSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha3GithubSource() *V1alpha3GithubSource {
	this := V1alpha3GithubSource{}
	return &this
}

// NewV1alpha3GithubSourceWithDefaults instantiates a new V1alpha3GithubSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha3GithubSourceWithDefaults() *V1alpha3GithubSource {
	this := V1alpha3GithubSource{}
	return &this
}

// GetApiUri returns the ApiUri field value if set, zero value otherwise.
func (o *V1alpha3GithubSource) GetApiUri() string {
	if o == nil || IsNil(o.ApiUri) {
		var ret string
		return ret
	}
	return *o.ApiUri
}

// GetApiUriOk returns a tuple with the ApiUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3GithubSource) GetApiUriOk() (*string, bool) {
	if o == nil || IsNil(o.ApiUri) {
		return nil, false
	}
	return o.ApiUri, true
}

// HasApiUri returns a boolean if a field has been set.
func (o *V1alpha3GithubSource) HasApiUri() bool {
	if o != nil && !IsNil(o.ApiUri) {
		return true
	}

	return false
}

// SetApiUri gets a reference to the given string and assigns it to the ApiUri field.
func (o *V1alpha3GithubSource) SetApiUri(v string) {
	o.ApiUri = &v
}

// GetCredentialId returns the CredentialId field value if set, zero value otherwise.
func (o *V1alpha3GithubSource) GetCredentialId() string {
	if o == nil || IsNil(o.CredentialId) {
		var ret string
		return ret
	}
	return *o.CredentialId
}

// GetCredentialIdOk returns a tuple with the CredentialId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3GithubSource) GetCredentialIdOk() (*string, bool) {
	if o == nil || IsNil(o.CredentialId) {
		return nil, false
	}
	return o.CredentialId, true
}

// HasCredentialId returns a boolean if a field has been set.
func (o *V1alpha3GithubSource) HasCredentialId() bool {
	if o != nil && !IsNil(o.CredentialId) {
		return true
	}

	return false
}

// SetCredentialId gets a reference to the given string and assigns it to the CredentialId field.
func (o *V1alpha3GithubSource) SetCredentialId(v string) {
	o.CredentialId = &v
}

// GetDiscoverBranches returns the DiscoverBranches field value if set, zero value otherwise.
func (o *V1alpha3GithubSource) GetDiscoverBranches() int32 {
	if o == nil || IsNil(o.DiscoverBranches) {
		var ret int32
		return ret
	}
	return *o.DiscoverBranches
}

// GetDiscoverBranchesOk returns a tuple with the DiscoverBranches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3GithubSource) GetDiscoverBranchesOk() (*int32, bool) {
	if o == nil || IsNil(o.DiscoverBranches) {
		return nil, false
	}
	return o.DiscoverBranches, true
}

// HasDiscoverBranches returns a boolean if a field has been set.
func (o *V1alpha3GithubSource) HasDiscoverBranches() bool {
	if o != nil && !IsNil(o.DiscoverBranches) {
		return true
	}

	return false
}

// SetDiscoverBranches gets a reference to the given int32 and assigns it to the DiscoverBranches field.
func (o *V1alpha3GithubSource) SetDiscoverBranches(v int32) {
	o.DiscoverBranches = &v
}

// GetDiscoverPrFromForks returns the DiscoverPrFromForks field value if set, zero value otherwise.
func (o *V1alpha3GithubSource) GetDiscoverPrFromForks() V1alpha3DiscoverPRFromForks {
	if o == nil || IsNil(o.DiscoverPrFromForks) {
		var ret V1alpha3DiscoverPRFromForks
		return ret
	}
	return *o.DiscoverPrFromForks
}

// GetDiscoverPrFromForksOk returns a tuple with the DiscoverPrFromForks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3GithubSource) GetDiscoverPrFromForksOk() (*V1alpha3DiscoverPRFromForks, bool) {
	if o == nil || IsNil(o.DiscoverPrFromForks) {
		return nil, false
	}
	return o.DiscoverPrFromForks, true
}

// HasDiscoverPrFromForks returns a boolean if a field has been set.
func (o *V1alpha3GithubSource) HasDiscoverPrFromForks() bool {
	if o != nil && !IsNil(o.DiscoverPrFromForks) {
		return true
	}

	return false
}

// SetDiscoverPrFromForks gets a reference to the given V1alpha3DiscoverPRFromForks and assigns it to the DiscoverPrFromForks field.
func (o *V1alpha3GithubSource) SetDiscoverPrFromForks(v V1alpha3DiscoverPRFromForks) {
	o.DiscoverPrFromForks = &v
}

// GetDiscoverPrFromOrigin returns the DiscoverPrFromOrigin field value if set, zero value otherwise.
func (o *V1alpha3GithubSource) GetDiscoverPrFromOrigin() int32 {
	if o == nil || IsNil(o.DiscoverPrFromOrigin) {
		var ret int32
		return ret
	}
	return *o.DiscoverPrFromOrigin
}

// GetDiscoverPrFromOriginOk returns a tuple with the DiscoverPrFromOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3GithubSource) GetDiscoverPrFromOriginOk() (*int32, bool) {
	if o == nil || IsNil(o.DiscoverPrFromOrigin) {
		return nil, false
	}
	return o.DiscoverPrFromOrigin, true
}

// HasDiscoverPrFromOrigin returns a boolean if a field has been set.
func (o *V1alpha3GithubSource) HasDiscoverPrFromOrigin() bool {
	if o != nil && !IsNil(o.DiscoverPrFromOrigin) {
		return true
	}

	return false
}

// SetDiscoverPrFromOrigin gets a reference to the given int32 and assigns it to the DiscoverPrFromOrigin field.
func (o *V1alpha3GithubSource) SetDiscoverPrFromOrigin(v int32) {
	o.DiscoverPrFromOrigin = &v
}

// GetDiscoverTags returns the DiscoverTags field value if set, zero value otherwise.
func (o *V1alpha3GithubSource) GetDiscoverTags() bool {
	if o == nil || IsNil(o.DiscoverTags) {
		var ret bool
		return ret
	}
	return *o.DiscoverTags
}

// GetDiscoverTagsOk returns a tuple with the DiscoverTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3GithubSource) GetDiscoverTagsOk() (*bool, bool) {
	if o == nil || IsNil(o.DiscoverTags) {
		return nil, false
	}
	return o.DiscoverTags, true
}

// HasDiscoverTags returns a boolean if a field has been set.
func (o *V1alpha3GithubSource) HasDiscoverTags() bool {
	if o != nil && !IsNil(o.DiscoverTags) {
		return true
	}

	return false
}

// SetDiscoverTags gets a reference to the given bool and assigns it to the DiscoverTags field.
func (o *V1alpha3GithubSource) SetDiscoverTags(v bool) {
	o.DiscoverTags = &v
}

// GetGitCloneOption returns the GitCloneOption field value if set, zero value otherwise.
func (o *V1alpha3GithubSource) GetGitCloneOption() V1alpha3GitCloneOption {
	if o == nil || IsNil(o.GitCloneOption) {
		var ret V1alpha3GitCloneOption
		return ret
	}
	return *o.GitCloneOption
}

// GetGitCloneOptionOk returns a tuple with the GitCloneOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3GithubSource) GetGitCloneOptionOk() (*V1alpha3GitCloneOption, bool) {
	if o == nil || IsNil(o.GitCloneOption) {
		return nil, false
	}
	return o.GitCloneOption, true
}

// HasGitCloneOption returns a boolean if a field has been set.
func (o *V1alpha3GithubSource) HasGitCloneOption() bool {
	if o != nil && !IsNil(o.GitCloneOption) {
		return true
	}

	return false
}

// SetGitCloneOption gets a reference to the given V1alpha3GitCloneOption and assigns it to the GitCloneOption field.
func (o *V1alpha3GithubSource) SetGitCloneOption(v V1alpha3GitCloneOption) {
	o.GitCloneOption = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *V1alpha3GithubSource) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3GithubSource) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *V1alpha3GithubSource) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *V1alpha3GithubSource) SetOwner(v string) {
	o.Owner = &v
}

// GetRegexFilter returns the RegexFilter field value if set, zero value otherwise.
func (o *V1alpha3GithubSource) GetRegexFilter() string {
	if o == nil || IsNil(o.RegexFilter) {
		var ret string
		return ret
	}
	return *o.RegexFilter
}

// GetRegexFilterOk returns a tuple with the RegexFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3GithubSource) GetRegexFilterOk() (*string, bool) {
	if o == nil || IsNil(o.RegexFilter) {
		return nil, false
	}
	return o.RegexFilter, true
}

// HasRegexFilter returns a boolean if a field has been set.
func (o *V1alpha3GithubSource) HasRegexFilter() bool {
	if o != nil && !IsNil(o.RegexFilter) {
		return true
	}

	return false
}

// SetRegexFilter gets a reference to the given string and assigns it to the RegexFilter field.
func (o *V1alpha3GithubSource) SetRegexFilter(v string) {
	o.RegexFilter = &v
}

// GetRepo returns the Repo field value if set, zero value otherwise.
func (o *V1alpha3GithubSource) GetRepo() string {
	if o == nil || IsNil(o.Repo) {
		var ret string
		return ret
	}
	return *o.Repo
}

// GetRepoOk returns a tuple with the Repo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3GithubSource) GetRepoOk() (*string, bool) {
	if o == nil || IsNil(o.Repo) {
		return nil, false
	}
	return o.Repo, true
}

// HasRepo returns a boolean if a field has been set.
func (o *V1alpha3GithubSource) HasRepo() bool {
	if o != nil && !IsNil(o.Repo) {
		return true
	}

	return false
}

// SetRepo gets a reference to the given string and assigns it to the Repo field.
func (o *V1alpha3GithubSource) SetRepo(v string) {
	o.Repo = &v
}

// GetScmId returns the ScmId field value if set, zero value otherwise.
func (o *V1alpha3GithubSource) GetScmId() string {
	if o == nil || IsNil(o.ScmId) {
		var ret string
		return ret
	}
	return *o.ScmId
}

// GetScmIdOk returns a tuple with the ScmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3GithubSource) GetScmIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScmId) {
		return nil, false
	}
	return o.ScmId, true
}

// HasScmId returns a boolean if a field has been set.
func (o *V1alpha3GithubSource) HasScmId() bool {
	if o != nil && !IsNil(o.ScmId) {
		return true
	}

	return false
}

// SetScmId gets a reference to the given string and assigns it to the ScmId field.
func (o *V1alpha3GithubSource) SetScmId(v string) {
	o.ScmId = &v
}

func (o V1alpha3GithubSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha3GithubSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiUri) {
		toSerialize["api_uri"] = o.ApiUri
	}
	if !IsNil(o.CredentialId) {
		toSerialize["credential_id"] = o.CredentialId
	}
	if !IsNil(o.DiscoverBranches) {
		toSerialize["discover_branches"] = o.DiscoverBranches
	}
	if !IsNil(o.DiscoverPrFromForks) {
		toSerialize["discover_pr_from_forks"] = o.DiscoverPrFromForks
	}
	if !IsNil(o.DiscoverPrFromOrigin) {
		toSerialize["discover_pr_from_origin"] = o.DiscoverPrFromOrigin
	}
	if !IsNil(o.DiscoverTags) {
		toSerialize["discover_tags"] = o.DiscoverTags
	}
	if !IsNil(o.GitCloneOption) {
		toSerialize["git_clone_option"] = o.GitCloneOption
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.RegexFilter) {
		toSerialize["regex_filter"] = o.RegexFilter
	}
	if !IsNil(o.Repo) {
		toSerialize["repo"] = o.Repo
	}
	if !IsNil(o.ScmId) {
		toSerialize["scm_id"] = o.ScmId
	}
	return toSerialize, nil
}

type NullableV1alpha3GithubSource struct {
	value *V1alpha3GithubSource
	isSet bool
}

func (v NullableV1alpha3GithubSource) Get() *V1alpha3GithubSource {
	return v.value
}

func (v *NullableV1alpha3GithubSource) Set(val *V1alpha3GithubSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha3GithubSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha3GithubSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha3GithubSource(val *V1alpha3GithubSource) *NullableV1alpha3GithubSource {
	return &NullableV1alpha3GithubSource{value: val, isSet: true}
}

func (v NullableV1alpha3GithubSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha3GithubSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


