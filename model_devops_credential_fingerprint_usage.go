/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DevopsCredentialFingerprintUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevopsCredentialFingerprintUsage{}

// DevopsCredentialFingerprintUsage struct for DevopsCredentialFingerprintUsage
type DevopsCredentialFingerprintUsage struct {
	// pipeline full name
	Name *string `json:"name,omitempty"`
	Ranges *Ranges `json:"ranges,omitempty"`
}

// NewDevopsCredentialFingerprintUsage instantiates a new DevopsCredentialFingerprintUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevopsCredentialFingerprintUsage() *DevopsCredentialFingerprintUsage {
	this := DevopsCredentialFingerprintUsage{}
	return &this
}

// NewDevopsCredentialFingerprintUsageWithDefaults instantiates a new DevopsCredentialFingerprintUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevopsCredentialFingerprintUsageWithDefaults() *DevopsCredentialFingerprintUsage {
	this := DevopsCredentialFingerprintUsage{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DevopsCredentialFingerprintUsage) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevopsCredentialFingerprintUsage) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DevopsCredentialFingerprintUsage) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DevopsCredentialFingerprintUsage) SetName(v string) {
	o.Name = &v
}

// GetRanges returns the Ranges field value if set, zero value otherwise.
func (o *DevopsCredentialFingerprintUsage) GetRanges() Ranges {
	if o == nil || IsNil(o.Ranges) {
		var ret Ranges
		return ret
	}
	return *o.Ranges
}

// GetRangesOk returns a tuple with the Ranges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevopsCredentialFingerprintUsage) GetRangesOk() (*Ranges, bool) {
	if o == nil || IsNil(o.Ranges) {
		return nil, false
	}
	return o.Ranges, true
}

// HasRanges returns a boolean if a field has been set.
func (o *DevopsCredentialFingerprintUsage) HasRanges() bool {
	if o != nil && !IsNil(o.Ranges) {
		return true
	}

	return false
}

// SetRanges gets a reference to the given Ranges and assigns it to the Ranges field.
func (o *DevopsCredentialFingerprintUsage) SetRanges(v Ranges) {
	o.Ranges = &v
}

func (o DevopsCredentialFingerprintUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevopsCredentialFingerprintUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Ranges) {
		toSerialize["ranges"] = o.Ranges
	}
	return toSerialize, nil
}

type NullableDevopsCredentialFingerprintUsage struct {
	value *DevopsCredentialFingerprintUsage
	isSet bool
}

func (v NullableDevopsCredentialFingerprintUsage) Get() *DevopsCredentialFingerprintUsage {
	return v.value
}

func (v *NullableDevopsCredentialFingerprintUsage) Set(val *DevopsCredentialFingerprintUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableDevopsCredentialFingerprintUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableDevopsCredentialFingerprintUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevopsCredentialFingerprintUsage(val *DevopsCredentialFingerprintUsage) *NullableDevopsCredentialFingerprintUsage {
	return &NullableDevopsCredentialFingerprintUsage{value: val, isSet: true}
}

func (v NullableDevopsCredentialFingerprintUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevopsCredentialFingerprintUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


