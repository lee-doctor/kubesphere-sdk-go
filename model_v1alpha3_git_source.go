/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1alpha3GitSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha3GitSource{}

// V1alpha3GitSource struct for V1alpha3GitSource
type V1alpha3GitSource struct {
	// credential id to access git source
	CredentialId *string `json:"credential_id,omitempty"`
	// Whether to discover a branch
	DiscoverBranches *bool `json:"discover_branches,omitempty"`
	// Discover tags configuration
	DiscoverTags *bool `json:"discover_tags,omitempty"`
	GitCloneOption *V1alpha3GitCloneOption `json:"git_clone_option,omitempty"`
	// Regex used to match the name of the branch that needs to be run
	RegexFilter *string `json:"regex_filter,omitempty"`
	// uid of scm
	ScmId *string `json:"scm_id,omitempty"`
	// url of git source
	Url *string `json:"url,omitempty"`
}

// NewV1alpha3GitSource instantiates a new V1alpha3GitSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha3GitSource() *V1alpha3GitSource {
	this := V1alpha3GitSource{}
	return &this
}

// NewV1alpha3GitSourceWithDefaults instantiates a new V1alpha3GitSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha3GitSourceWithDefaults() *V1alpha3GitSource {
	this := V1alpha3GitSource{}
	return &this
}

// GetCredentialId returns the CredentialId field value if set, zero value otherwise.
func (o *V1alpha3GitSource) GetCredentialId() string {
	if o == nil || IsNil(o.CredentialId) {
		var ret string
		return ret
	}
	return *o.CredentialId
}

// GetCredentialIdOk returns a tuple with the CredentialId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3GitSource) GetCredentialIdOk() (*string, bool) {
	if o == nil || IsNil(o.CredentialId) {
		return nil, false
	}
	return o.CredentialId, true
}

// HasCredentialId returns a boolean if a field has been set.
func (o *V1alpha3GitSource) HasCredentialId() bool {
	if o != nil && !IsNil(o.CredentialId) {
		return true
	}

	return false
}

// SetCredentialId gets a reference to the given string and assigns it to the CredentialId field.
func (o *V1alpha3GitSource) SetCredentialId(v string) {
	o.CredentialId = &v
}

// GetDiscoverBranches returns the DiscoverBranches field value if set, zero value otherwise.
func (o *V1alpha3GitSource) GetDiscoverBranches() bool {
	if o == nil || IsNil(o.DiscoverBranches) {
		var ret bool
		return ret
	}
	return *o.DiscoverBranches
}

// GetDiscoverBranchesOk returns a tuple with the DiscoverBranches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3GitSource) GetDiscoverBranchesOk() (*bool, bool) {
	if o == nil || IsNil(o.DiscoverBranches) {
		return nil, false
	}
	return o.DiscoverBranches, true
}

// HasDiscoverBranches returns a boolean if a field has been set.
func (o *V1alpha3GitSource) HasDiscoverBranches() bool {
	if o != nil && !IsNil(o.DiscoverBranches) {
		return true
	}

	return false
}

// SetDiscoverBranches gets a reference to the given bool and assigns it to the DiscoverBranches field.
func (o *V1alpha3GitSource) SetDiscoverBranches(v bool) {
	o.DiscoverBranches = &v
}

// GetDiscoverTags returns the DiscoverTags field value if set, zero value otherwise.
func (o *V1alpha3GitSource) GetDiscoverTags() bool {
	if o == nil || IsNil(o.DiscoverTags) {
		var ret bool
		return ret
	}
	return *o.DiscoverTags
}

// GetDiscoverTagsOk returns a tuple with the DiscoverTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3GitSource) GetDiscoverTagsOk() (*bool, bool) {
	if o == nil || IsNil(o.DiscoverTags) {
		return nil, false
	}
	return o.DiscoverTags, true
}

// HasDiscoverTags returns a boolean if a field has been set.
func (o *V1alpha3GitSource) HasDiscoverTags() bool {
	if o != nil && !IsNil(o.DiscoverTags) {
		return true
	}

	return false
}

// SetDiscoverTags gets a reference to the given bool and assigns it to the DiscoverTags field.
func (o *V1alpha3GitSource) SetDiscoverTags(v bool) {
	o.DiscoverTags = &v
}

// GetGitCloneOption returns the GitCloneOption field value if set, zero value otherwise.
func (o *V1alpha3GitSource) GetGitCloneOption() V1alpha3GitCloneOption {
	if o == nil || IsNil(o.GitCloneOption) {
		var ret V1alpha3GitCloneOption
		return ret
	}
	return *o.GitCloneOption
}

// GetGitCloneOptionOk returns a tuple with the GitCloneOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3GitSource) GetGitCloneOptionOk() (*V1alpha3GitCloneOption, bool) {
	if o == nil || IsNil(o.GitCloneOption) {
		return nil, false
	}
	return o.GitCloneOption, true
}

// HasGitCloneOption returns a boolean if a field has been set.
func (o *V1alpha3GitSource) HasGitCloneOption() bool {
	if o != nil && !IsNil(o.GitCloneOption) {
		return true
	}

	return false
}

// SetGitCloneOption gets a reference to the given V1alpha3GitCloneOption and assigns it to the GitCloneOption field.
func (o *V1alpha3GitSource) SetGitCloneOption(v V1alpha3GitCloneOption) {
	o.GitCloneOption = &v
}

// GetRegexFilter returns the RegexFilter field value if set, zero value otherwise.
func (o *V1alpha3GitSource) GetRegexFilter() string {
	if o == nil || IsNil(o.RegexFilter) {
		var ret string
		return ret
	}
	return *o.RegexFilter
}

// GetRegexFilterOk returns a tuple with the RegexFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3GitSource) GetRegexFilterOk() (*string, bool) {
	if o == nil || IsNil(o.RegexFilter) {
		return nil, false
	}
	return o.RegexFilter, true
}

// HasRegexFilter returns a boolean if a field has been set.
func (o *V1alpha3GitSource) HasRegexFilter() bool {
	if o != nil && !IsNil(o.RegexFilter) {
		return true
	}

	return false
}

// SetRegexFilter gets a reference to the given string and assigns it to the RegexFilter field.
func (o *V1alpha3GitSource) SetRegexFilter(v string) {
	o.RegexFilter = &v
}

// GetScmId returns the ScmId field value if set, zero value otherwise.
func (o *V1alpha3GitSource) GetScmId() string {
	if o == nil || IsNil(o.ScmId) {
		var ret string
		return ret
	}
	return *o.ScmId
}

// GetScmIdOk returns a tuple with the ScmId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3GitSource) GetScmIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScmId) {
		return nil, false
	}
	return o.ScmId, true
}

// HasScmId returns a boolean if a field has been set.
func (o *V1alpha3GitSource) HasScmId() bool {
	if o != nil && !IsNil(o.ScmId) {
		return true
	}

	return false
}

// SetScmId gets a reference to the given string and assigns it to the ScmId field.
func (o *V1alpha3GitSource) SetScmId(v string) {
	o.ScmId = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *V1alpha3GitSource) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3GitSource) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *V1alpha3GitSource) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *V1alpha3GitSource) SetUrl(v string) {
	o.Url = &v
}

func (o V1alpha3GitSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha3GitSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CredentialId) {
		toSerialize["credential_id"] = o.CredentialId
	}
	if !IsNil(o.DiscoverBranches) {
		toSerialize["discover_branches"] = o.DiscoverBranches
	}
	if !IsNil(o.DiscoverTags) {
		toSerialize["discover_tags"] = o.DiscoverTags
	}
	if !IsNil(o.GitCloneOption) {
		toSerialize["git_clone_option"] = o.GitCloneOption
	}
	if !IsNil(o.RegexFilter) {
		toSerialize["regex_filter"] = o.RegexFilter
	}
	if !IsNil(o.ScmId) {
		toSerialize["scm_id"] = o.ScmId
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableV1alpha3GitSource struct {
	value *V1alpha3GitSource
	isSet bool
}

func (v NullableV1alpha3GitSource) Get() *V1alpha3GitSource {
	return v.value
}

func (v *NullableV1alpha3GitSource) Set(val *V1alpha3GitSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha3GitSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha3GitSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha3GitSource(val *V1alpha3GitSource) *NullableV1alpha3GitSource {
	return &NullableV1alpha3GitSource{value: val, isSet: true}
}

func (v NullableV1alpha3GitSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha3GitSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


