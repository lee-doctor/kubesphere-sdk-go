/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RegistriesRootfs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegistriesRootfs{}

// RegistriesRootfs struct for RegistriesRootfs
type RegistriesRootfs struct {
	// Contain ids of layer list
	DiffIds []string `json:"diff_ids,omitempty"`
	// Root filesystem type, always \"layers\" 
	Type *string `json:"type,omitempty"`
}

// NewRegistriesRootfs instantiates a new RegistriesRootfs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistriesRootfs() *RegistriesRootfs {
	this := RegistriesRootfs{}
	return &this
}

// NewRegistriesRootfsWithDefaults instantiates a new RegistriesRootfs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistriesRootfsWithDefaults() *RegistriesRootfs {
	this := RegistriesRootfs{}
	return &this
}

// GetDiffIds returns the DiffIds field value if set, zero value otherwise.
func (o *RegistriesRootfs) GetDiffIds() []string {
	if o == nil || IsNil(o.DiffIds) {
		var ret []string
		return ret
	}
	return o.DiffIds
}

// GetDiffIdsOk returns a tuple with the DiffIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesRootfs) GetDiffIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.DiffIds) {
		return nil, false
	}
	return o.DiffIds, true
}

// HasDiffIds returns a boolean if a field has been set.
func (o *RegistriesRootfs) HasDiffIds() bool {
	if o != nil && !IsNil(o.DiffIds) {
		return true
	}

	return false
}

// SetDiffIds gets a reference to the given []string and assigns it to the DiffIds field.
func (o *RegistriesRootfs) SetDiffIds(v []string) {
	o.DiffIds = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RegistriesRootfs) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesRootfs) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RegistriesRootfs) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RegistriesRootfs) SetType(v string) {
	o.Type = &v
}

func (o RegistriesRootfs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegistriesRootfs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DiffIds) {
		toSerialize["diff_ids"] = o.DiffIds
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableRegistriesRootfs struct {
	value *RegistriesRootfs
	isSet bool
}

func (v NullableRegistriesRootfs) Get() *RegistriesRootfs {
	return v.value
}

func (v *NullableRegistriesRootfs) Set(val *RegistriesRootfs) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistriesRootfs) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistriesRootfs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistriesRootfs(val *RegistriesRootfs) *NullableRegistriesRootfs {
	return &NullableRegistriesRootfs{value: val, isSet: true}
}

func (v NullableRegistriesRootfs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistriesRootfs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


