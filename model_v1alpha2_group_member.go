/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1alpha2GroupMember type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha2GroupMember{}

// V1alpha2GroupMember struct for V1alpha2GroupMember
type V1alpha2GroupMember struct {
	GroupName string `json:"groupName"`
	UserName string `json:"userName"`
}

type _V1alpha2GroupMember V1alpha2GroupMember

// NewV1alpha2GroupMember instantiates a new V1alpha2GroupMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha2GroupMember(groupName string, userName string) *V1alpha2GroupMember {
	this := V1alpha2GroupMember{}
	this.GroupName = groupName
	this.UserName = userName
	return &this
}

// NewV1alpha2GroupMemberWithDefaults instantiates a new V1alpha2GroupMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha2GroupMemberWithDefaults() *V1alpha2GroupMember {
	this := V1alpha2GroupMember{}
	return &this
}

// GetGroupName returns the GroupName field value
func (o *V1alpha2GroupMember) GetGroupName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value
// and a boolean to check if the value has been set.
func (o *V1alpha2GroupMember) GetGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupName, true
}

// SetGroupName sets field value
func (o *V1alpha2GroupMember) SetGroupName(v string) {
	o.GroupName = v
}

// GetUserName returns the UserName field value
func (o *V1alpha2GroupMember) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *V1alpha2GroupMember) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *V1alpha2GroupMember) SetUserName(v string) {
	o.UserName = v
}

func (o V1alpha2GroupMember) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha2GroupMember) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["groupName"] = o.GroupName
	toSerialize["userName"] = o.UserName
	return toSerialize, nil
}

func (o *V1alpha2GroupMember) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"groupName",
		"userName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1alpha2GroupMember := _V1alpha2GroupMember{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1alpha2GroupMember)

	if err != nil {
		return err
	}

	*o = V1alpha2GroupMember(varV1alpha2GroupMember)

	return err
}

type NullableV1alpha2GroupMember struct {
	value *V1alpha2GroupMember
	isSet bool
}

func (v NullableV1alpha2GroupMember) Get() *V1alpha2GroupMember {
	return v.value
}

func (v *NullableV1alpha2GroupMember) Set(val *V1alpha2GroupMember) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha2GroupMember) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha2GroupMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha2GroupMember(val *V1alpha2GroupMember) *NullableV1alpha2GroupMember {
	return &NullableV1alpha2GroupMember{value: val, isSet: true}
}

func (v NullableV1alpha2GroupMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha2GroupMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


