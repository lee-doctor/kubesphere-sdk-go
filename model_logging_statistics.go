/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LoggingStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoggingStatistics{}

// LoggingStatistics struct for LoggingStatistics
type LoggingStatistics struct {
	// total number of containers
	Containers int64 `json:"containers"`
	// total number of logs
	Logs int64 `json:"logs"`
}

type _LoggingStatistics LoggingStatistics

// NewLoggingStatistics instantiates a new LoggingStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoggingStatistics(containers int64, logs int64) *LoggingStatistics {
	this := LoggingStatistics{}
	this.Containers = containers
	this.Logs = logs
	return &this
}

// NewLoggingStatisticsWithDefaults instantiates a new LoggingStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoggingStatisticsWithDefaults() *LoggingStatistics {
	this := LoggingStatistics{}
	return &this
}

// GetContainers returns the Containers field value
func (o *LoggingStatistics) GetContainers() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Containers
}

// GetContainersOk returns a tuple with the Containers field value
// and a boolean to check if the value has been set.
func (o *LoggingStatistics) GetContainersOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Containers, true
}

// SetContainers sets field value
func (o *LoggingStatistics) SetContainers(v int64) {
	o.Containers = v
}

// GetLogs returns the Logs field value
func (o *LoggingStatistics) GetLogs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value
// and a boolean to check if the value has been set.
func (o *LoggingStatistics) GetLogsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Logs, true
}

// SetLogs sets field value
func (o *LoggingStatistics) SetLogs(v int64) {
	o.Logs = v
}

func (o LoggingStatistics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoggingStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["containers"] = o.Containers
	toSerialize["logs"] = o.Logs
	return toSerialize, nil
}

func (o *LoggingStatistics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"containers",
		"logs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoggingStatistics := _LoggingStatistics{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLoggingStatistics)

	if err != nil {
		return err
	}

	*o = LoggingStatistics(varLoggingStatistics)

	return err
}

type NullableLoggingStatistics struct {
	value *LoggingStatistics
	isSet bool
}

func (v NullableLoggingStatistics) Get() *LoggingStatistics {
	return v.value
}

func (v *NullableLoggingStatistics) Set(val *LoggingStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableLoggingStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableLoggingStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoggingStatistics(val *LoggingStatistics) *NullableLoggingStatistics {
	return &NullableLoggingStatistics{value: val, isSet: true}
}

func (v NullableLoggingStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoggingStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


