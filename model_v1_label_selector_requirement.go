/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1LabelSelectorRequirement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1LabelSelectorRequirement{}

// V1LabelSelectorRequirement A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type V1LabelSelectorRequirement struct {
	// key is the label key that the selector applies to.
	Key string `json:"key"`
	// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `json:"operator"`
	// values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
	Values []string `json:"values,omitempty"`
}

type _V1LabelSelectorRequirement V1LabelSelectorRequirement

// NewV1LabelSelectorRequirement instantiates a new V1LabelSelectorRequirement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1LabelSelectorRequirement(key string, operator string) *V1LabelSelectorRequirement {
	this := V1LabelSelectorRequirement{}
	this.Key = key
	this.Operator = operator
	return &this
}

// NewV1LabelSelectorRequirementWithDefaults instantiates a new V1LabelSelectorRequirement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1LabelSelectorRequirementWithDefaults() *V1LabelSelectorRequirement {
	this := V1LabelSelectorRequirement{}
	return &this
}

// GetKey returns the Key field value
func (o *V1LabelSelectorRequirement) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *V1LabelSelectorRequirement) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *V1LabelSelectorRequirement) SetKey(v string) {
	o.Key = v
}

// GetOperator returns the Operator field value
func (o *V1LabelSelectorRequirement) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *V1LabelSelectorRequirement) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *V1LabelSelectorRequirement) SetOperator(v string) {
	o.Operator = v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *V1LabelSelectorRequirement) GetValues() []string {
	if o == nil || IsNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1LabelSelectorRequirement) GetValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *V1LabelSelectorRequirement) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *V1LabelSelectorRequirement) SetValues(v []string) {
	o.Values = v
}

func (o V1LabelSelectorRequirement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1LabelSelectorRequirement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["operator"] = o.Operator
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

func (o *V1LabelSelectorRequirement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"operator",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1LabelSelectorRequirement := _V1LabelSelectorRequirement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1LabelSelectorRequirement)

	if err != nil {
		return err
	}

	*o = V1LabelSelectorRequirement(varV1LabelSelectorRequirement)

	return err
}

type NullableV1LabelSelectorRequirement struct {
	value *V1LabelSelectorRequirement
	isSet bool
}

func (v NullableV1LabelSelectorRequirement) Get() *V1LabelSelectorRequirement {
	return v.value
}

func (v *NullableV1LabelSelectorRequirement) Set(val *V1LabelSelectorRequirement) {
	v.value = val
	v.isSet = true
}

func (v NullableV1LabelSelectorRequirement) IsSet() bool {
	return v.isSet
}

func (v *NullableV1LabelSelectorRequirement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1LabelSelectorRequirement(val *V1LabelSelectorRequirement) *NullableV1LabelSelectorRequirement {
	return &NullableV1LabelSelectorRequirement{value: val, isSet: true}
}

func (v NullableV1LabelSelectorRequirement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1LabelSelectorRequirement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


