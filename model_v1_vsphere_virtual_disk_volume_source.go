/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1VsphereVirtualDiskVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1VsphereVirtualDiskVolumeSource{}

// V1VsphereVirtualDiskVolumeSource Represents a vSphere volume resource.
type V1VsphereVirtualDiskVolumeSource struct {
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
	StoragePolicyID *string `json:"storagePolicyID,omitempty"`
	// Storage Policy Based Management (SPBM) profile name.
	StoragePolicyName *string `json:"storagePolicyName,omitempty"`
	// Path that identifies vSphere volume vmdk
	VolumePath string `json:"volumePath"`
}

type _V1VsphereVirtualDiskVolumeSource V1VsphereVirtualDiskVolumeSource

// NewV1VsphereVirtualDiskVolumeSource instantiates a new V1VsphereVirtualDiskVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1VsphereVirtualDiskVolumeSource(volumePath string) *V1VsphereVirtualDiskVolumeSource {
	this := V1VsphereVirtualDiskVolumeSource{}
	this.VolumePath = volumePath
	return &this
}

// NewV1VsphereVirtualDiskVolumeSourceWithDefaults instantiates a new V1VsphereVirtualDiskVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1VsphereVirtualDiskVolumeSourceWithDefaults() *V1VsphereVirtualDiskVolumeSource {
	this := V1VsphereVirtualDiskVolumeSource{}
	return &this
}

// GetFsType returns the FsType field value if set, zero value otherwise.
func (o *V1VsphereVirtualDiskVolumeSource) GetFsType() string {
	if o == nil || IsNil(o.FsType) {
		var ret string
		return ret
	}
	return *o.FsType
}

// GetFsTypeOk returns a tuple with the FsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VsphereVirtualDiskVolumeSource) GetFsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FsType) {
		return nil, false
	}
	return o.FsType, true
}

// HasFsType returns a boolean if a field has been set.
func (o *V1VsphereVirtualDiskVolumeSource) HasFsType() bool {
	if o != nil && !IsNil(o.FsType) {
		return true
	}

	return false
}

// SetFsType gets a reference to the given string and assigns it to the FsType field.
func (o *V1VsphereVirtualDiskVolumeSource) SetFsType(v string) {
	o.FsType = &v
}

// GetStoragePolicyID returns the StoragePolicyID field value if set, zero value otherwise.
func (o *V1VsphereVirtualDiskVolumeSource) GetStoragePolicyID() string {
	if o == nil || IsNil(o.StoragePolicyID) {
		var ret string
		return ret
	}
	return *o.StoragePolicyID
}

// GetStoragePolicyIDOk returns a tuple with the StoragePolicyID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VsphereVirtualDiskVolumeSource) GetStoragePolicyIDOk() (*string, bool) {
	if o == nil || IsNil(o.StoragePolicyID) {
		return nil, false
	}
	return o.StoragePolicyID, true
}

// HasStoragePolicyID returns a boolean if a field has been set.
func (o *V1VsphereVirtualDiskVolumeSource) HasStoragePolicyID() bool {
	if o != nil && !IsNil(o.StoragePolicyID) {
		return true
	}

	return false
}

// SetStoragePolicyID gets a reference to the given string and assigns it to the StoragePolicyID field.
func (o *V1VsphereVirtualDiskVolumeSource) SetStoragePolicyID(v string) {
	o.StoragePolicyID = &v
}

// GetStoragePolicyName returns the StoragePolicyName field value if set, zero value otherwise.
func (o *V1VsphereVirtualDiskVolumeSource) GetStoragePolicyName() string {
	if o == nil || IsNil(o.StoragePolicyName) {
		var ret string
		return ret
	}
	return *o.StoragePolicyName
}

// GetStoragePolicyNameOk returns a tuple with the StoragePolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VsphereVirtualDiskVolumeSource) GetStoragePolicyNameOk() (*string, bool) {
	if o == nil || IsNil(o.StoragePolicyName) {
		return nil, false
	}
	return o.StoragePolicyName, true
}

// HasStoragePolicyName returns a boolean if a field has been set.
func (o *V1VsphereVirtualDiskVolumeSource) HasStoragePolicyName() bool {
	if o != nil && !IsNil(o.StoragePolicyName) {
		return true
	}

	return false
}

// SetStoragePolicyName gets a reference to the given string and assigns it to the StoragePolicyName field.
func (o *V1VsphereVirtualDiskVolumeSource) SetStoragePolicyName(v string) {
	o.StoragePolicyName = &v
}

// GetVolumePath returns the VolumePath field value
func (o *V1VsphereVirtualDiskVolumeSource) GetVolumePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VolumePath
}

// GetVolumePathOk returns a tuple with the VolumePath field value
// and a boolean to check if the value has been set.
func (o *V1VsphereVirtualDiskVolumeSource) GetVolumePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VolumePath, true
}

// SetVolumePath sets field value
func (o *V1VsphereVirtualDiskVolumeSource) SetVolumePath(v string) {
	o.VolumePath = v
}

func (o V1VsphereVirtualDiskVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1VsphereVirtualDiskVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FsType) {
		toSerialize["fsType"] = o.FsType
	}
	if !IsNil(o.StoragePolicyID) {
		toSerialize["storagePolicyID"] = o.StoragePolicyID
	}
	if !IsNil(o.StoragePolicyName) {
		toSerialize["storagePolicyName"] = o.StoragePolicyName
	}
	toSerialize["volumePath"] = o.VolumePath
	return toSerialize, nil
}

func (o *V1VsphereVirtualDiskVolumeSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"volumePath",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1VsphereVirtualDiskVolumeSource := _V1VsphereVirtualDiskVolumeSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1VsphereVirtualDiskVolumeSource)

	if err != nil {
		return err
	}

	*o = V1VsphereVirtualDiskVolumeSource(varV1VsphereVirtualDiskVolumeSource)

	return err
}

type NullableV1VsphereVirtualDiskVolumeSource struct {
	value *V1VsphereVirtualDiskVolumeSource
	isSet bool
}

func (v NullableV1VsphereVirtualDiskVolumeSource) Get() *V1VsphereVirtualDiskVolumeSource {
	return v.value
}

func (v *NullableV1VsphereVirtualDiskVolumeSource) Set(val *V1VsphereVirtualDiskVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1VsphereVirtualDiskVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1VsphereVirtualDiskVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1VsphereVirtualDiskVolumeSource(val *V1VsphereVirtualDiskVolumeSource) *NullableV1VsphereVirtualDiskVolumeSource {
	return &NullableV1VsphereVirtualDiskVolumeSource{value: val, isSet: true}
}

func (v NullableV1VsphereVirtualDiskVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1VsphereVirtualDiskVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


