/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JoseJSONWebKeySet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JoseJSONWebKeySet{}

// JoseJSONWebKeySet struct for JoseJSONWebKeySet
type JoseJSONWebKeySet struct {
	Keys []JoseJSONWebKey `json:"keys"`
}

type _JoseJSONWebKeySet JoseJSONWebKeySet

// NewJoseJSONWebKeySet instantiates a new JoseJSONWebKeySet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJoseJSONWebKeySet(keys []JoseJSONWebKey) *JoseJSONWebKeySet {
	this := JoseJSONWebKeySet{}
	this.Keys = keys
	return &this
}

// NewJoseJSONWebKeySetWithDefaults instantiates a new JoseJSONWebKeySet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJoseJSONWebKeySetWithDefaults() *JoseJSONWebKeySet {
	this := JoseJSONWebKeySet{}
	return &this
}

// GetKeys returns the Keys field value
func (o *JoseJSONWebKeySet) GetKeys() []JoseJSONWebKey {
	if o == nil {
		var ret []JoseJSONWebKey
		return ret
	}

	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value
// and a boolean to check if the value has been set.
func (o *JoseJSONWebKeySet) GetKeysOk() ([]JoseJSONWebKey, bool) {
	if o == nil {
		return nil, false
	}
	return o.Keys, true
}

// SetKeys sets field value
func (o *JoseJSONWebKeySet) SetKeys(v []JoseJSONWebKey) {
	o.Keys = v
}

func (o JoseJSONWebKeySet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JoseJSONWebKeySet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["keys"] = o.Keys
	return toSerialize, nil
}

func (o *JoseJSONWebKeySet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"keys",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJoseJSONWebKeySet := _JoseJSONWebKeySet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJoseJSONWebKeySet)

	if err != nil {
		return err
	}

	*o = JoseJSONWebKeySet(varJoseJSONWebKeySet)

	return err
}

type NullableJoseJSONWebKeySet struct {
	value *JoseJSONWebKeySet
	isSet bool
}

func (v NullableJoseJSONWebKeySet) Get() *JoseJSONWebKeySet {
	return v.value
}

func (v *NullableJoseJSONWebKeySet) Set(val *JoseJSONWebKeySet) {
	v.value = val
	v.isSet = true
}

func (v NullableJoseJSONWebKeySet) IsSet() bool {
	return v.isSet
}

func (v *NullableJoseJSONWebKeySet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJoseJSONWebKeySet(val *JoseJSONWebKeySet) *NullableJoseJSONWebKeySet {
	return &NullableJoseJSONWebKeySet{value: val, isSet: true}
}

func (v NullableJoseJSONWebKeySet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJoseJSONWebKeySet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


