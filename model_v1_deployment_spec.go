/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1DeploymentSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1DeploymentSpec{}

// V1DeploymentSpec DeploymentSpec is the specification of the desired behavior of the Deployment.
type V1DeploymentSpec struct {
	// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
	MinReadySeconds *int32 `json:"minReadySeconds,omitempty"`
	// Indicates that the deployment is paused.
	Paused *bool `json:"paused,omitempty"`
	// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
	ProgressDeadlineSeconds *int32 `json:"progressDeadlineSeconds,omitempty"`
	// Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
	Replicas *int32 `json:"replicas,omitempty"`
	// The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
	RevisionHistoryLimit *int32 `json:"revisionHistoryLimit,omitempty"`
	Selector V1LabelSelector `json:"selector"`
	Strategy *V1DeploymentStrategy `json:"strategy,omitempty"`
	Template V1PodTemplateSpec `json:"template"`
}

type _V1DeploymentSpec V1DeploymentSpec

// NewV1DeploymentSpec instantiates a new V1DeploymentSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DeploymentSpec(selector V1LabelSelector, template V1PodTemplateSpec) *V1DeploymentSpec {
	this := V1DeploymentSpec{}
	this.Selector = selector
	this.Template = template
	return &this
}

// NewV1DeploymentSpecWithDefaults instantiates a new V1DeploymentSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DeploymentSpecWithDefaults() *V1DeploymentSpec {
	this := V1DeploymentSpec{}
	return &this
}

// GetMinReadySeconds returns the MinReadySeconds field value if set, zero value otherwise.
func (o *V1DeploymentSpec) GetMinReadySeconds() int32 {
	if o == nil || IsNil(o.MinReadySeconds) {
		var ret int32
		return ret
	}
	return *o.MinReadySeconds
}

// GetMinReadySecondsOk returns a tuple with the MinReadySeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeploymentSpec) GetMinReadySecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinReadySeconds) {
		return nil, false
	}
	return o.MinReadySeconds, true
}

// HasMinReadySeconds returns a boolean if a field has been set.
func (o *V1DeploymentSpec) HasMinReadySeconds() bool {
	if o != nil && !IsNil(o.MinReadySeconds) {
		return true
	}

	return false
}

// SetMinReadySeconds gets a reference to the given int32 and assigns it to the MinReadySeconds field.
func (o *V1DeploymentSpec) SetMinReadySeconds(v int32) {
	o.MinReadySeconds = &v
}

// GetPaused returns the Paused field value if set, zero value otherwise.
func (o *V1DeploymentSpec) GetPaused() bool {
	if o == nil || IsNil(o.Paused) {
		var ret bool
		return ret
	}
	return *o.Paused
}

// GetPausedOk returns a tuple with the Paused field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeploymentSpec) GetPausedOk() (*bool, bool) {
	if o == nil || IsNil(o.Paused) {
		return nil, false
	}
	return o.Paused, true
}

// HasPaused returns a boolean if a field has been set.
func (o *V1DeploymentSpec) HasPaused() bool {
	if o != nil && !IsNil(o.Paused) {
		return true
	}

	return false
}

// SetPaused gets a reference to the given bool and assigns it to the Paused field.
func (o *V1DeploymentSpec) SetPaused(v bool) {
	o.Paused = &v
}

// GetProgressDeadlineSeconds returns the ProgressDeadlineSeconds field value if set, zero value otherwise.
func (o *V1DeploymentSpec) GetProgressDeadlineSeconds() int32 {
	if o == nil || IsNil(o.ProgressDeadlineSeconds) {
		var ret int32
		return ret
	}
	return *o.ProgressDeadlineSeconds
}

// GetProgressDeadlineSecondsOk returns a tuple with the ProgressDeadlineSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeploymentSpec) GetProgressDeadlineSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.ProgressDeadlineSeconds) {
		return nil, false
	}
	return o.ProgressDeadlineSeconds, true
}

// HasProgressDeadlineSeconds returns a boolean if a field has been set.
func (o *V1DeploymentSpec) HasProgressDeadlineSeconds() bool {
	if o != nil && !IsNil(o.ProgressDeadlineSeconds) {
		return true
	}

	return false
}

// SetProgressDeadlineSeconds gets a reference to the given int32 and assigns it to the ProgressDeadlineSeconds field.
func (o *V1DeploymentSpec) SetProgressDeadlineSeconds(v int32) {
	o.ProgressDeadlineSeconds = &v
}

// GetReplicas returns the Replicas field value if set, zero value otherwise.
func (o *V1DeploymentSpec) GetReplicas() int32 {
	if o == nil || IsNil(o.Replicas) {
		var ret int32
		return ret
	}
	return *o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeploymentSpec) GetReplicasOk() (*int32, bool) {
	if o == nil || IsNil(o.Replicas) {
		return nil, false
	}
	return o.Replicas, true
}

// HasReplicas returns a boolean if a field has been set.
func (o *V1DeploymentSpec) HasReplicas() bool {
	if o != nil && !IsNil(o.Replicas) {
		return true
	}

	return false
}

// SetReplicas gets a reference to the given int32 and assigns it to the Replicas field.
func (o *V1DeploymentSpec) SetReplicas(v int32) {
	o.Replicas = &v
}

// GetRevisionHistoryLimit returns the RevisionHistoryLimit field value if set, zero value otherwise.
func (o *V1DeploymentSpec) GetRevisionHistoryLimit() int32 {
	if o == nil || IsNil(o.RevisionHistoryLimit) {
		var ret int32
		return ret
	}
	return *o.RevisionHistoryLimit
}

// GetRevisionHistoryLimitOk returns a tuple with the RevisionHistoryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeploymentSpec) GetRevisionHistoryLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.RevisionHistoryLimit) {
		return nil, false
	}
	return o.RevisionHistoryLimit, true
}

// HasRevisionHistoryLimit returns a boolean if a field has been set.
func (o *V1DeploymentSpec) HasRevisionHistoryLimit() bool {
	if o != nil && !IsNil(o.RevisionHistoryLimit) {
		return true
	}

	return false
}

// SetRevisionHistoryLimit gets a reference to the given int32 and assigns it to the RevisionHistoryLimit field.
func (o *V1DeploymentSpec) SetRevisionHistoryLimit(v int32) {
	o.RevisionHistoryLimit = &v
}

// GetSelector returns the Selector field value
func (o *V1DeploymentSpec) GetSelector() V1LabelSelector {
	if o == nil {
		var ret V1LabelSelector
		return ret
	}

	return o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value
// and a boolean to check if the value has been set.
func (o *V1DeploymentSpec) GetSelectorOk() (*V1LabelSelector, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Selector, true
}

// SetSelector sets field value
func (o *V1DeploymentSpec) SetSelector(v V1LabelSelector) {
	o.Selector = v
}

// GetStrategy returns the Strategy field value if set, zero value otherwise.
func (o *V1DeploymentSpec) GetStrategy() V1DeploymentStrategy {
	if o == nil || IsNil(o.Strategy) {
		var ret V1DeploymentStrategy
		return ret
	}
	return *o.Strategy
}

// GetStrategyOk returns a tuple with the Strategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DeploymentSpec) GetStrategyOk() (*V1DeploymentStrategy, bool) {
	if o == nil || IsNil(o.Strategy) {
		return nil, false
	}
	return o.Strategy, true
}

// HasStrategy returns a boolean if a field has been set.
func (o *V1DeploymentSpec) HasStrategy() bool {
	if o != nil && !IsNil(o.Strategy) {
		return true
	}

	return false
}

// SetStrategy gets a reference to the given V1DeploymentStrategy and assigns it to the Strategy field.
func (o *V1DeploymentSpec) SetStrategy(v V1DeploymentStrategy) {
	o.Strategy = &v
}

// GetTemplate returns the Template field value
func (o *V1DeploymentSpec) GetTemplate() V1PodTemplateSpec {
	if o == nil {
		var ret V1PodTemplateSpec
		return ret
	}

	return o.Template
}

// GetTemplateOk returns a tuple with the Template field value
// and a boolean to check if the value has been set.
func (o *V1DeploymentSpec) GetTemplateOk() (*V1PodTemplateSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Template, true
}

// SetTemplate sets field value
func (o *V1DeploymentSpec) SetTemplate(v V1PodTemplateSpec) {
	o.Template = v
}

func (o V1DeploymentSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1DeploymentSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinReadySeconds) {
		toSerialize["minReadySeconds"] = o.MinReadySeconds
	}
	if !IsNil(o.Paused) {
		toSerialize["paused"] = o.Paused
	}
	if !IsNil(o.ProgressDeadlineSeconds) {
		toSerialize["progressDeadlineSeconds"] = o.ProgressDeadlineSeconds
	}
	if !IsNil(o.Replicas) {
		toSerialize["replicas"] = o.Replicas
	}
	if !IsNil(o.RevisionHistoryLimit) {
		toSerialize["revisionHistoryLimit"] = o.RevisionHistoryLimit
	}
	toSerialize["selector"] = o.Selector
	if !IsNil(o.Strategy) {
		toSerialize["strategy"] = o.Strategy
	}
	toSerialize["template"] = o.Template
	return toSerialize, nil
}

func (o *V1DeploymentSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"selector",
		"template",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1DeploymentSpec := _V1DeploymentSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1DeploymentSpec)

	if err != nil {
		return err
	}

	*o = V1DeploymentSpec(varV1DeploymentSpec)

	return err
}

type NullableV1DeploymentSpec struct {
	value *V1DeploymentSpec
	isSet bool
}

func (v NullableV1DeploymentSpec) Get() *V1DeploymentSpec {
	return v.value
}

func (v *NullableV1DeploymentSpec) Set(val *V1DeploymentSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DeploymentSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DeploymentSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DeploymentSpec(val *V1DeploymentSpec) *NullableV1DeploymentSpec {
	return &NullableV1DeploymentSpec{value: val, isSet: true}
}

func (v NullableV1DeploymentSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DeploymentSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


