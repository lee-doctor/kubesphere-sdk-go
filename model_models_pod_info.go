/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModelsPodInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsPodInfo{}

// ModelsPodInfo struct for ModelsPodInfo
type ModelsPodInfo struct {
	// container name
	Container string `json:"container"`
	// namespace
	Namespace string `json:"namespace"`
	// pod name
	Pod string `json:"pod"`
}

type _ModelsPodInfo ModelsPodInfo

// NewModelsPodInfo instantiates a new ModelsPodInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsPodInfo(container string, namespace string, pod string) *ModelsPodInfo {
	this := ModelsPodInfo{}
	this.Container = container
	this.Namespace = namespace
	this.Pod = pod
	return &this
}

// NewModelsPodInfoWithDefaults instantiates a new ModelsPodInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsPodInfoWithDefaults() *ModelsPodInfo {
	this := ModelsPodInfo{}
	return &this
}

// GetContainer returns the Container field value
func (o *ModelsPodInfo) GetContainer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Container
}

// GetContainerOk returns a tuple with the Container field value
// and a boolean to check if the value has been set.
func (o *ModelsPodInfo) GetContainerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Container, true
}

// SetContainer sets field value
func (o *ModelsPodInfo) SetContainer(v string) {
	o.Container = v
}

// GetNamespace returns the Namespace field value
func (o *ModelsPodInfo) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *ModelsPodInfo) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *ModelsPodInfo) SetNamespace(v string) {
	o.Namespace = v
}

// GetPod returns the Pod field value
func (o *ModelsPodInfo) GetPod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pod
}

// GetPodOk returns a tuple with the Pod field value
// and a boolean to check if the value has been set.
func (o *ModelsPodInfo) GetPodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pod, true
}

// SetPod sets field value
func (o *ModelsPodInfo) SetPod(v string) {
	o.Pod = v
}

func (o ModelsPodInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsPodInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["container"] = o.Container
	toSerialize["namespace"] = o.Namespace
	toSerialize["pod"] = o.Pod
	return toSerialize, nil
}

func (o *ModelsPodInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"container",
		"namespace",
		"pod",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelsPodInfo := _ModelsPodInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModelsPodInfo)

	if err != nil {
		return err
	}

	*o = ModelsPodInfo(varModelsPodInfo)

	return err
}

type NullableModelsPodInfo struct {
	value *ModelsPodInfo
	isSet bool
}

func (v NullableModelsPodInfo) Get() *ModelsPodInfo {
	return v.value
}

func (v *NullableModelsPodInfo) Set(val *ModelsPodInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsPodInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsPodInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsPodInfo(val *ModelsPodInfo) *NullableModelsPodInfo {
	return &NullableModelsPodInfo{value: val, isSet: true}
}

func (v NullableModelsPodInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsPodInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


