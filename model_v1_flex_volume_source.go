/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1FlexVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1FlexVolumeSource{}

// V1FlexVolumeSource FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
type V1FlexVolumeSource struct {
	// Driver is the name of the driver to use for this volume.
	Driver string `json:"driver"`
	// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.
	FsType *string `json:"fsType,omitempty"`
	// Optional: Extra command options if any.
	Options *map[string]string `json:"options,omitempty"`
	// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `json:"readOnly,omitempty"`
	SecretRef *V1LocalObjectReference `json:"secretRef,omitempty"`
}

type _V1FlexVolumeSource V1FlexVolumeSource

// NewV1FlexVolumeSource instantiates a new V1FlexVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1FlexVolumeSource(driver string) *V1FlexVolumeSource {
	this := V1FlexVolumeSource{}
	this.Driver = driver
	return &this
}

// NewV1FlexVolumeSourceWithDefaults instantiates a new V1FlexVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1FlexVolumeSourceWithDefaults() *V1FlexVolumeSource {
	this := V1FlexVolumeSource{}
	return &this
}

// GetDriver returns the Driver field value
func (o *V1FlexVolumeSource) GetDriver() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Driver
}

// GetDriverOk returns a tuple with the Driver field value
// and a boolean to check if the value has been set.
func (o *V1FlexVolumeSource) GetDriverOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Driver, true
}

// SetDriver sets field value
func (o *V1FlexVolumeSource) SetDriver(v string) {
	o.Driver = v
}

// GetFsType returns the FsType field value if set, zero value otherwise.
func (o *V1FlexVolumeSource) GetFsType() string {
	if o == nil || IsNil(o.FsType) {
		var ret string
		return ret
	}
	return *o.FsType
}

// GetFsTypeOk returns a tuple with the FsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FlexVolumeSource) GetFsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FsType) {
		return nil, false
	}
	return o.FsType, true
}

// HasFsType returns a boolean if a field has been set.
func (o *V1FlexVolumeSource) HasFsType() bool {
	if o != nil && !IsNil(o.FsType) {
		return true
	}

	return false
}

// SetFsType gets a reference to the given string and assigns it to the FsType field.
func (o *V1FlexVolumeSource) SetFsType(v string) {
	o.FsType = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *V1FlexVolumeSource) GetOptions() map[string]string {
	if o == nil || IsNil(o.Options) {
		var ret map[string]string
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FlexVolumeSource) GetOptionsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *V1FlexVolumeSource) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]string and assigns it to the Options field.
func (o *V1FlexVolumeSource) SetOptions(v map[string]string) {
	o.Options = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *V1FlexVolumeSource) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FlexVolumeSource) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *V1FlexVolumeSource) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *V1FlexVolumeSource) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetSecretRef returns the SecretRef field value if set, zero value otherwise.
func (o *V1FlexVolumeSource) GetSecretRef() V1LocalObjectReference {
	if o == nil || IsNil(o.SecretRef) {
		var ret V1LocalObjectReference
		return ret
	}
	return *o.SecretRef
}

// GetSecretRefOk returns a tuple with the SecretRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FlexVolumeSource) GetSecretRefOk() (*V1LocalObjectReference, bool) {
	if o == nil || IsNil(o.SecretRef) {
		return nil, false
	}
	return o.SecretRef, true
}

// HasSecretRef returns a boolean if a field has been set.
func (o *V1FlexVolumeSource) HasSecretRef() bool {
	if o != nil && !IsNil(o.SecretRef) {
		return true
	}

	return false
}

// SetSecretRef gets a reference to the given V1LocalObjectReference and assigns it to the SecretRef field.
func (o *V1FlexVolumeSource) SetSecretRef(v V1LocalObjectReference) {
	o.SecretRef = &v
}

func (o V1FlexVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1FlexVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["driver"] = o.Driver
	if !IsNil(o.FsType) {
		toSerialize["fsType"] = o.FsType
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	if !IsNil(o.SecretRef) {
		toSerialize["secretRef"] = o.SecretRef
	}
	return toSerialize, nil
}

func (o *V1FlexVolumeSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"driver",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1FlexVolumeSource := _V1FlexVolumeSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1FlexVolumeSource)

	if err != nil {
		return err
	}

	*o = V1FlexVolumeSource(varV1FlexVolumeSource)

	return err
}

type NullableV1FlexVolumeSource struct {
	value *V1FlexVolumeSource
	isSet bool
}

func (v NullableV1FlexVolumeSource) Get() *V1FlexVolumeSource {
	return v.value
}

func (v *NullableV1FlexVolumeSource) Set(val *V1FlexVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1FlexVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1FlexVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1FlexVolumeSource(val *V1FlexVolumeSource) *NullableV1FlexVolumeSource {
	return &NullableV1FlexVolumeSource{value: val, isSet: true}
}

func (v NullableV1FlexVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1FlexVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


