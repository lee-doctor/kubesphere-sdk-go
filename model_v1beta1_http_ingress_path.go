/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1beta1HTTPIngressPath type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1beta1HTTPIngressPath{}

// V1beta1HTTPIngressPath HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
type V1beta1HTTPIngressPath struct {
	Backend V1beta1IngressBackend `json:"backend"`
	// Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. When unspecified, all paths from incoming requests are matched.
	Path *string `json:"path,omitempty"`
	// PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is   done on a path element by element basis. A path element refers is the   list of labels in the path split by the '/' separator. A request is a   match for path p if every p is an element-wise prefix of p of the   request path. Note that if the last element of the path is a substring   of the last element in request path, it is not a match (e.g. /foo/bar   matches /foo/bar/baz, but does not match /foo/barbaz). * ImplementationSpecific: Interpretation of the Path matching is up to   the IngressClass. Implementations can treat this as a separate PathType   or treat it identically to Prefix or Exact path types. Implementations are required to support all path types. Defaults to ImplementationSpecific.
	PathType *string `json:"pathType,omitempty"`
}

type _V1beta1HTTPIngressPath V1beta1HTTPIngressPath

// NewV1beta1HTTPIngressPath instantiates a new V1beta1HTTPIngressPath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1beta1HTTPIngressPath(backend V1beta1IngressBackend) *V1beta1HTTPIngressPath {
	this := V1beta1HTTPIngressPath{}
	this.Backend = backend
	return &this
}

// NewV1beta1HTTPIngressPathWithDefaults instantiates a new V1beta1HTTPIngressPath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1beta1HTTPIngressPathWithDefaults() *V1beta1HTTPIngressPath {
	this := V1beta1HTTPIngressPath{}
	return &this
}

// GetBackend returns the Backend field value
func (o *V1beta1HTTPIngressPath) GetBackend() V1beta1IngressBackend {
	if o == nil {
		var ret V1beta1IngressBackend
		return ret
	}

	return o.Backend
}

// GetBackendOk returns a tuple with the Backend field value
// and a boolean to check if the value has been set.
func (o *V1beta1HTTPIngressPath) GetBackendOk() (*V1beta1IngressBackend, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Backend, true
}

// SetBackend sets field value
func (o *V1beta1HTTPIngressPath) SetBackend(v V1beta1IngressBackend) {
	o.Backend = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *V1beta1HTTPIngressPath) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1HTTPIngressPath) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *V1beta1HTTPIngressPath) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *V1beta1HTTPIngressPath) SetPath(v string) {
	o.Path = &v
}

// GetPathType returns the PathType field value if set, zero value otherwise.
func (o *V1beta1HTTPIngressPath) GetPathType() string {
	if o == nil || IsNil(o.PathType) {
		var ret string
		return ret
	}
	return *o.PathType
}

// GetPathTypeOk returns a tuple with the PathType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1HTTPIngressPath) GetPathTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PathType) {
		return nil, false
	}
	return o.PathType, true
}

// HasPathType returns a boolean if a field has been set.
func (o *V1beta1HTTPIngressPath) HasPathType() bool {
	if o != nil && !IsNil(o.PathType) {
		return true
	}

	return false
}

// SetPathType gets a reference to the given string and assigns it to the PathType field.
func (o *V1beta1HTTPIngressPath) SetPathType(v string) {
	o.PathType = &v
}

func (o V1beta1HTTPIngressPath) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1beta1HTTPIngressPath) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["backend"] = o.Backend
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.PathType) {
		toSerialize["pathType"] = o.PathType
	}
	return toSerialize, nil
}

func (o *V1beta1HTTPIngressPath) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"backend",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1beta1HTTPIngressPath := _V1beta1HTTPIngressPath{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1beta1HTTPIngressPath)

	if err != nil {
		return err
	}

	*o = V1beta1HTTPIngressPath(varV1beta1HTTPIngressPath)

	return err
}

type NullableV1beta1HTTPIngressPath struct {
	value *V1beta1HTTPIngressPath
	isSet bool
}

func (v NullableV1beta1HTTPIngressPath) Get() *V1beta1HTTPIngressPath {
	return v.value
}

func (v *NullableV1beta1HTTPIngressPath) Set(val *V1beta1HTTPIngressPath) {
	v.value = val
	v.isSet = true
}

func (v NullableV1beta1HTTPIngressPath) IsSet() bool {
	return v.isSet
}

func (v *NullableV1beta1HTTPIngressPath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1beta1HTTPIngressPath(val *V1beta1HTTPIngressPath) *NullableV1beta1HTTPIngressPath {
	return &NullableV1beta1HTTPIngressPath{value: val, isSet: true}
}

func (v NullableV1beta1HTTPIngressPath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1beta1HTTPIngressPath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


