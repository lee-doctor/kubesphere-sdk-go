/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1alpha2BadRequestError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha2BadRequestError{}

// V1alpha2BadRequestError struct for V1alpha2BadRequestError
type V1alpha2BadRequestError struct {
	Reason map[string]interface{} `json:"reason"`
	Status int32 `json:"status"`
}

type _V1alpha2BadRequestError V1alpha2BadRequestError

// NewV1alpha2BadRequestError instantiates a new V1alpha2BadRequestError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha2BadRequestError(reason map[string]interface{}, status int32) *V1alpha2BadRequestError {
	this := V1alpha2BadRequestError{}
	this.Reason = reason
	this.Status = status
	return &this
}

// NewV1alpha2BadRequestErrorWithDefaults instantiates a new V1alpha2BadRequestError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha2BadRequestErrorWithDefaults() *V1alpha2BadRequestError {
	this := V1alpha2BadRequestError{}
	return &this
}

// GetReason returns the Reason field value
func (o *V1alpha2BadRequestError) GetReason() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *V1alpha2BadRequestError) GetReasonOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Reason, true
}

// SetReason sets field value
func (o *V1alpha2BadRequestError) SetReason(v map[string]interface{}) {
	o.Reason = v
}

// GetStatus returns the Status field value
func (o *V1alpha2BadRequestError) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *V1alpha2BadRequestError) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *V1alpha2BadRequestError) SetStatus(v int32) {
	o.Status = v
}

func (o V1alpha2BadRequestError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha2BadRequestError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reason"] = o.Reason
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *V1alpha2BadRequestError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reason",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1alpha2BadRequestError := _V1alpha2BadRequestError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1alpha2BadRequestError)

	if err != nil {
		return err
	}

	*o = V1alpha2BadRequestError(varV1alpha2BadRequestError)

	return err
}

type NullableV1alpha2BadRequestError struct {
	value *V1alpha2BadRequestError
	isSet bool
}

func (v NullableV1alpha2BadRequestError) Get() *V1alpha2BadRequestError {
	return v.value
}

func (v *NullableV1alpha2BadRequestError) Set(val *V1alpha2BadRequestError) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha2BadRequestError) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha2BadRequestError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha2BadRequestError(val *V1alpha2BadRequestError) *NullableV1alpha2BadRequestError {
	return &NullableV1alpha2BadRequestError{value: val, isSet: true}
}

func (v NullableV1alpha2BadRequestError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha2BadRequestError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


