/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1alpha1LabelSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha1LabelSpec{}

// V1alpha1LabelSpec struct for V1alpha1LabelSpec
type V1alpha1LabelSpec struct {
	BackgroundColor *string `json:"backgroundColor,omitempty"`
	Clusters []string `json:"clusters,omitempty"`
	Key string `json:"key"`
	Value string `json:"value"`
}

type _V1alpha1LabelSpec V1alpha1LabelSpec

// NewV1alpha1LabelSpec instantiates a new V1alpha1LabelSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha1LabelSpec(key string, value string) *V1alpha1LabelSpec {
	this := V1alpha1LabelSpec{}
	this.Key = key
	this.Value = value
	return &this
}

// NewV1alpha1LabelSpecWithDefaults instantiates a new V1alpha1LabelSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha1LabelSpecWithDefaults() *V1alpha1LabelSpec {
	this := V1alpha1LabelSpec{}
	return &this
}

// GetBackgroundColor returns the BackgroundColor field value if set, zero value otherwise.
func (o *V1alpha1LabelSpec) GetBackgroundColor() string {
	if o == nil || IsNil(o.BackgroundColor) {
		var ret string
		return ret
	}
	return *o.BackgroundColor
}

// GetBackgroundColorOk returns a tuple with the BackgroundColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1LabelSpec) GetBackgroundColorOk() (*string, bool) {
	if o == nil || IsNil(o.BackgroundColor) {
		return nil, false
	}
	return o.BackgroundColor, true
}

// HasBackgroundColor returns a boolean if a field has been set.
func (o *V1alpha1LabelSpec) HasBackgroundColor() bool {
	if o != nil && !IsNil(o.BackgroundColor) {
		return true
	}

	return false
}

// SetBackgroundColor gets a reference to the given string and assigns it to the BackgroundColor field.
func (o *V1alpha1LabelSpec) SetBackgroundColor(v string) {
	o.BackgroundColor = &v
}

// GetClusters returns the Clusters field value if set, zero value otherwise.
func (o *V1alpha1LabelSpec) GetClusters() []string {
	if o == nil || IsNil(o.Clusters) {
		var ret []string
		return ret
	}
	return o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1LabelSpec) GetClustersOk() ([]string, bool) {
	if o == nil || IsNil(o.Clusters) {
		return nil, false
	}
	return o.Clusters, true
}

// HasClusters returns a boolean if a field has been set.
func (o *V1alpha1LabelSpec) HasClusters() bool {
	if o != nil && !IsNil(o.Clusters) {
		return true
	}

	return false
}

// SetClusters gets a reference to the given []string and assigns it to the Clusters field.
func (o *V1alpha1LabelSpec) SetClusters(v []string) {
	o.Clusters = v
}

// GetKey returns the Key field value
func (o *V1alpha1LabelSpec) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *V1alpha1LabelSpec) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *V1alpha1LabelSpec) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *V1alpha1LabelSpec) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *V1alpha1LabelSpec) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *V1alpha1LabelSpec) SetValue(v string) {
	o.Value = v
}

func (o V1alpha1LabelSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha1LabelSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BackgroundColor) {
		toSerialize["backgroundColor"] = o.BackgroundColor
	}
	if !IsNil(o.Clusters) {
		toSerialize["clusters"] = o.Clusters
	}
	toSerialize["key"] = o.Key
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *V1alpha1LabelSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1alpha1LabelSpec := _V1alpha1LabelSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1alpha1LabelSpec)

	if err != nil {
		return err
	}

	*o = V1alpha1LabelSpec(varV1alpha1LabelSpec)

	return err
}

type NullableV1alpha1LabelSpec struct {
	value *V1alpha1LabelSpec
	isSet bool
}

func (v NullableV1alpha1LabelSpec) Get() *V1alpha1LabelSpec {
	return v.value
}

func (v *NullableV1alpha1LabelSpec) Set(val *V1alpha1LabelSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha1LabelSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha1LabelSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha1LabelSpec(val *V1alpha1LabelSpec) *NullableV1alpha1LabelSpec {
	return &NullableV1alpha1LabelSpec{value: val, isSet: true}
}

func (v NullableV1alpha1LabelSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha1LabelSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


