/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1PolicyRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1PolicyRule{}

// V1PolicyRule PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
type V1PolicyRule struct {
	// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
	ApiGroups []string `json:"apiGroups,omitempty"`
	// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \"pods\" or \"secrets\") or non-resource URL paths (such as \"/api\"),  but not both.
	NonResourceURLs []string `json:"nonResourceURLs,omitempty"`
	// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
	ResourceNames []string `json:"resourceNames,omitempty"`
	// Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
	Resources []string `json:"resources,omitempty"`
	// Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
	Verbs []string `json:"verbs"`
}

type _V1PolicyRule V1PolicyRule

// NewV1PolicyRule instantiates a new V1PolicyRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1PolicyRule(verbs []string) *V1PolicyRule {
	this := V1PolicyRule{}
	this.Verbs = verbs
	return &this
}

// NewV1PolicyRuleWithDefaults instantiates a new V1PolicyRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1PolicyRuleWithDefaults() *V1PolicyRule {
	this := V1PolicyRule{}
	return &this
}

// GetApiGroups returns the ApiGroups field value if set, zero value otherwise.
func (o *V1PolicyRule) GetApiGroups() []string {
	if o == nil || IsNil(o.ApiGroups) {
		var ret []string
		return ret
	}
	return o.ApiGroups
}

// GetApiGroupsOk returns a tuple with the ApiGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PolicyRule) GetApiGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.ApiGroups) {
		return nil, false
	}
	return o.ApiGroups, true
}

// HasApiGroups returns a boolean if a field has been set.
func (o *V1PolicyRule) HasApiGroups() bool {
	if o != nil && !IsNil(o.ApiGroups) {
		return true
	}

	return false
}

// SetApiGroups gets a reference to the given []string and assigns it to the ApiGroups field.
func (o *V1PolicyRule) SetApiGroups(v []string) {
	o.ApiGroups = v
}

// GetNonResourceURLs returns the NonResourceURLs field value if set, zero value otherwise.
func (o *V1PolicyRule) GetNonResourceURLs() []string {
	if o == nil || IsNil(o.NonResourceURLs) {
		var ret []string
		return ret
	}
	return o.NonResourceURLs
}

// GetNonResourceURLsOk returns a tuple with the NonResourceURLs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PolicyRule) GetNonResourceURLsOk() ([]string, bool) {
	if o == nil || IsNil(o.NonResourceURLs) {
		return nil, false
	}
	return o.NonResourceURLs, true
}

// HasNonResourceURLs returns a boolean if a field has been set.
func (o *V1PolicyRule) HasNonResourceURLs() bool {
	if o != nil && !IsNil(o.NonResourceURLs) {
		return true
	}

	return false
}

// SetNonResourceURLs gets a reference to the given []string and assigns it to the NonResourceURLs field.
func (o *V1PolicyRule) SetNonResourceURLs(v []string) {
	o.NonResourceURLs = v
}

// GetResourceNames returns the ResourceNames field value if set, zero value otherwise.
func (o *V1PolicyRule) GetResourceNames() []string {
	if o == nil || IsNil(o.ResourceNames) {
		var ret []string
		return ret
	}
	return o.ResourceNames
}

// GetResourceNamesOk returns a tuple with the ResourceNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PolicyRule) GetResourceNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ResourceNames) {
		return nil, false
	}
	return o.ResourceNames, true
}

// HasResourceNames returns a boolean if a field has been set.
func (o *V1PolicyRule) HasResourceNames() bool {
	if o != nil && !IsNil(o.ResourceNames) {
		return true
	}

	return false
}

// SetResourceNames gets a reference to the given []string and assigns it to the ResourceNames field.
func (o *V1PolicyRule) SetResourceNames(v []string) {
	o.ResourceNames = v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *V1PolicyRule) GetResources() []string {
	if o == nil || IsNil(o.Resources) {
		var ret []string
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PolicyRule) GetResourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *V1PolicyRule) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []string and assigns it to the Resources field.
func (o *V1PolicyRule) SetResources(v []string) {
	o.Resources = v
}

// GetVerbs returns the Verbs field value
func (o *V1PolicyRule) GetVerbs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Verbs
}

// GetVerbsOk returns a tuple with the Verbs field value
// and a boolean to check if the value has been set.
func (o *V1PolicyRule) GetVerbsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Verbs, true
}

// SetVerbs sets field value
func (o *V1PolicyRule) SetVerbs(v []string) {
	o.Verbs = v
}

func (o V1PolicyRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1PolicyRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiGroups) {
		toSerialize["apiGroups"] = o.ApiGroups
	}
	if !IsNil(o.NonResourceURLs) {
		toSerialize["nonResourceURLs"] = o.NonResourceURLs
	}
	if !IsNil(o.ResourceNames) {
		toSerialize["resourceNames"] = o.ResourceNames
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	toSerialize["verbs"] = o.Verbs
	return toSerialize, nil
}

func (o *V1PolicyRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"verbs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1PolicyRule := _V1PolicyRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1PolicyRule)

	if err != nil {
		return err
	}

	*o = V1PolicyRule(varV1PolicyRule)

	return err
}

type NullableV1PolicyRule struct {
	value *V1PolicyRule
	isSet bool
}

func (v NullableV1PolicyRule) Get() *V1PolicyRule {
	return v.value
}

func (v *NullableV1PolicyRule) Set(val *V1PolicyRule) {
	v.value = val
	v.isSet = true
}

func (v NullableV1PolicyRule) IsSet() bool {
	return v.isSet
}

func (v *NullableV1PolicyRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1PolicyRule(val *V1PolicyRule) *NullableV1PolicyRule {
	return &NullableV1PolicyRule{value: val, isSet: true}
}

func (v NullableV1PolicyRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1PolicyRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


