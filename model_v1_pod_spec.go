/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1PodSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1PodSpec{}

// V1PodSpec PodSpec is a description of a pod.
type V1PodSpec struct {
	// Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
	ActiveDeadlineSeconds *int64 `json:"activeDeadlineSeconds,omitempty"`
	Affinity *V1Affinity `json:"affinity,omitempty"`
	// AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
	AutomountServiceAccountToken *bool `json:"automountServiceAccountToken,omitempty"`
	// List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
	Containers []V1Container `json:"containers"`
	DnsConfig *V1PodDNSConfig `json:"dnsConfig,omitempty"`
	// Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
	DnsPolicy *string `json:"dnsPolicy,omitempty"`
	// EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
	EnableServiceLinks *bool `json:"enableServiceLinks,omitempty"`
	// List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.
	EphemeralContainers []V1EphemeralContainer `json:"ephemeralContainers,omitempty"`
	// HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
	HostAliases []V1HostAlias `json:"hostAliases,omitempty"`
	// Use the host's ipc namespace. Optional: Default to false.
	HostIPC *bool `json:"hostIPC,omitempty"`
	// Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
	HostNetwork *bool `json:"hostNetwork,omitempty"`
	// Use the host's pid namespace. Optional: Default to false.
	HostPID *bool `json:"hostPID,omitempty"`
	// Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
	Hostname *string `json:"hostname,omitempty"`
	// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
	ImagePullSecrets []V1LocalObjectReference `json:"imagePullSecrets,omitempty"`
	// List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
	InitContainers []V1Container `json:"initContainers,omitempty"`
	// NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
	NodeName *string `json:"nodeName,omitempty"`
	// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
	NodeSelector *map[string]string `json:"nodeSelector,omitempty"`
	// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.
	Overhead *map[string]ResourceQuantity `json:"overhead,omitempty"`
	// PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is alpha-level and is only honored by servers that enable the NonPreemptingPriority feature.
	PreemptionPolicy *string `json:"preemptionPolicy,omitempty"`
	// The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
	Priority *int32 `json:"priority,omitempty"`
	// If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
	PriorityClassName *string `json:"priorityClassName,omitempty"`
	// If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
	ReadinessGates []V1PodReadinessGate `json:"readinessGates,omitempty"`
	// Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
	RestartPolicy *string `json:"restartPolicy,omitempty"`
	// RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.
	RuntimeClassName *string `json:"runtimeClassName,omitempty"`
	// If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
	SchedulerName *string `json:"schedulerName,omitempty"`
	SecurityContext *V1PodSecurityContext `json:"securityContext,omitempty"`
	// DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
	ServiceAccount *string `json:"serviceAccount,omitempty"`
	// ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
	ServiceAccountName *string `json:"serviceAccountName,omitempty"`
	// Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
	ShareProcessNamespace *bool `json:"shareProcessNamespace,omitempty"`
	// If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.
	Subdomain *string `json:"subdomain,omitempty"`
	// Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
	TerminationGracePeriodSeconds *int64 `json:"terminationGracePeriodSeconds,omitempty"`
	// If specified, the pod's tolerations.
	Tolerations []V1Toleration `json:"tolerations,omitempty"`
	// TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. This field is only honored by clusters that enable the EvenPodsSpread feature. All topologySpreadConstraints are ANDed.
	TopologySpreadConstraints []V1TopologySpreadConstraint `json:"topologySpreadConstraints,omitempty"`
	// List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
	Volumes []V1Volume `json:"volumes,omitempty"`
}

type _V1PodSpec V1PodSpec

// NewV1PodSpec instantiates a new V1PodSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1PodSpec(containers []V1Container) *V1PodSpec {
	this := V1PodSpec{}
	this.Containers = containers
	return &this
}

// NewV1PodSpecWithDefaults instantiates a new V1PodSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1PodSpecWithDefaults() *V1PodSpec {
	this := V1PodSpec{}
	return &this
}

// GetActiveDeadlineSeconds returns the ActiveDeadlineSeconds field value if set, zero value otherwise.
func (o *V1PodSpec) GetActiveDeadlineSeconds() int64 {
	if o == nil || IsNil(o.ActiveDeadlineSeconds) {
		var ret int64
		return ret
	}
	return *o.ActiveDeadlineSeconds
}

// GetActiveDeadlineSecondsOk returns a tuple with the ActiveDeadlineSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetActiveDeadlineSecondsOk() (*int64, bool) {
	if o == nil || IsNil(o.ActiveDeadlineSeconds) {
		return nil, false
	}
	return o.ActiveDeadlineSeconds, true
}

// HasActiveDeadlineSeconds returns a boolean if a field has been set.
func (o *V1PodSpec) HasActiveDeadlineSeconds() bool {
	if o != nil && !IsNil(o.ActiveDeadlineSeconds) {
		return true
	}

	return false
}

// SetActiveDeadlineSeconds gets a reference to the given int64 and assigns it to the ActiveDeadlineSeconds field.
func (o *V1PodSpec) SetActiveDeadlineSeconds(v int64) {
	o.ActiveDeadlineSeconds = &v
}

// GetAffinity returns the Affinity field value if set, zero value otherwise.
func (o *V1PodSpec) GetAffinity() V1Affinity {
	if o == nil || IsNil(o.Affinity) {
		var ret V1Affinity
		return ret
	}
	return *o.Affinity
}

// GetAffinityOk returns a tuple with the Affinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetAffinityOk() (*V1Affinity, bool) {
	if o == nil || IsNil(o.Affinity) {
		return nil, false
	}
	return o.Affinity, true
}

// HasAffinity returns a boolean if a field has been set.
func (o *V1PodSpec) HasAffinity() bool {
	if o != nil && !IsNil(o.Affinity) {
		return true
	}

	return false
}

// SetAffinity gets a reference to the given V1Affinity and assigns it to the Affinity field.
func (o *V1PodSpec) SetAffinity(v V1Affinity) {
	o.Affinity = &v
}

// GetAutomountServiceAccountToken returns the AutomountServiceAccountToken field value if set, zero value otherwise.
func (o *V1PodSpec) GetAutomountServiceAccountToken() bool {
	if o == nil || IsNil(o.AutomountServiceAccountToken) {
		var ret bool
		return ret
	}
	return *o.AutomountServiceAccountToken
}

// GetAutomountServiceAccountTokenOk returns a tuple with the AutomountServiceAccountToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetAutomountServiceAccountTokenOk() (*bool, bool) {
	if o == nil || IsNil(o.AutomountServiceAccountToken) {
		return nil, false
	}
	return o.AutomountServiceAccountToken, true
}

// HasAutomountServiceAccountToken returns a boolean if a field has been set.
func (o *V1PodSpec) HasAutomountServiceAccountToken() bool {
	if o != nil && !IsNil(o.AutomountServiceAccountToken) {
		return true
	}

	return false
}

// SetAutomountServiceAccountToken gets a reference to the given bool and assigns it to the AutomountServiceAccountToken field.
func (o *V1PodSpec) SetAutomountServiceAccountToken(v bool) {
	o.AutomountServiceAccountToken = &v
}

// GetContainers returns the Containers field value
func (o *V1PodSpec) GetContainers() []V1Container {
	if o == nil {
		var ret []V1Container
		return ret
	}

	return o.Containers
}

// GetContainersOk returns a tuple with the Containers field value
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetContainersOk() ([]V1Container, bool) {
	if o == nil {
		return nil, false
	}
	return o.Containers, true
}

// SetContainers sets field value
func (o *V1PodSpec) SetContainers(v []V1Container) {
	o.Containers = v
}

// GetDnsConfig returns the DnsConfig field value if set, zero value otherwise.
func (o *V1PodSpec) GetDnsConfig() V1PodDNSConfig {
	if o == nil || IsNil(o.DnsConfig) {
		var ret V1PodDNSConfig
		return ret
	}
	return *o.DnsConfig
}

// GetDnsConfigOk returns a tuple with the DnsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetDnsConfigOk() (*V1PodDNSConfig, bool) {
	if o == nil || IsNil(o.DnsConfig) {
		return nil, false
	}
	return o.DnsConfig, true
}

// HasDnsConfig returns a boolean if a field has been set.
func (o *V1PodSpec) HasDnsConfig() bool {
	if o != nil && !IsNil(o.DnsConfig) {
		return true
	}

	return false
}

// SetDnsConfig gets a reference to the given V1PodDNSConfig and assigns it to the DnsConfig field.
func (o *V1PodSpec) SetDnsConfig(v V1PodDNSConfig) {
	o.DnsConfig = &v
}

// GetDnsPolicy returns the DnsPolicy field value if set, zero value otherwise.
func (o *V1PodSpec) GetDnsPolicy() string {
	if o == nil || IsNil(o.DnsPolicy) {
		var ret string
		return ret
	}
	return *o.DnsPolicy
}

// GetDnsPolicyOk returns a tuple with the DnsPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetDnsPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.DnsPolicy) {
		return nil, false
	}
	return o.DnsPolicy, true
}

// HasDnsPolicy returns a boolean if a field has been set.
func (o *V1PodSpec) HasDnsPolicy() bool {
	if o != nil && !IsNil(o.DnsPolicy) {
		return true
	}

	return false
}

// SetDnsPolicy gets a reference to the given string and assigns it to the DnsPolicy field.
func (o *V1PodSpec) SetDnsPolicy(v string) {
	o.DnsPolicy = &v
}

// GetEnableServiceLinks returns the EnableServiceLinks field value if set, zero value otherwise.
func (o *V1PodSpec) GetEnableServiceLinks() bool {
	if o == nil || IsNil(o.EnableServiceLinks) {
		var ret bool
		return ret
	}
	return *o.EnableServiceLinks
}

// GetEnableServiceLinksOk returns a tuple with the EnableServiceLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetEnableServiceLinksOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableServiceLinks) {
		return nil, false
	}
	return o.EnableServiceLinks, true
}

// HasEnableServiceLinks returns a boolean if a field has been set.
func (o *V1PodSpec) HasEnableServiceLinks() bool {
	if o != nil && !IsNil(o.EnableServiceLinks) {
		return true
	}

	return false
}

// SetEnableServiceLinks gets a reference to the given bool and assigns it to the EnableServiceLinks field.
func (o *V1PodSpec) SetEnableServiceLinks(v bool) {
	o.EnableServiceLinks = &v
}

// GetEphemeralContainers returns the EphemeralContainers field value if set, zero value otherwise.
func (o *V1PodSpec) GetEphemeralContainers() []V1EphemeralContainer {
	if o == nil || IsNil(o.EphemeralContainers) {
		var ret []V1EphemeralContainer
		return ret
	}
	return o.EphemeralContainers
}

// GetEphemeralContainersOk returns a tuple with the EphemeralContainers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetEphemeralContainersOk() ([]V1EphemeralContainer, bool) {
	if o == nil || IsNil(o.EphemeralContainers) {
		return nil, false
	}
	return o.EphemeralContainers, true
}

// HasEphemeralContainers returns a boolean if a field has been set.
func (o *V1PodSpec) HasEphemeralContainers() bool {
	if o != nil && !IsNil(o.EphemeralContainers) {
		return true
	}

	return false
}

// SetEphemeralContainers gets a reference to the given []V1EphemeralContainer and assigns it to the EphemeralContainers field.
func (o *V1PodSpec) SetEphemeralContainers(v []V1EphemeralContainer) {
	o.EphemeralContainers = v
}

// GetHostAliases returns the HostAliases field value if set, zero value otherwise.
func (o *V1PodSpec) GetHostAliases() []V1HostAlias {
	if o == nil || IsNil(o.HostAliases) {
		var ret []V1HostAlias
		return ret
	}
	return o.HostAliases
}

// GetHostAliasesOk returns a tuple with the HostAliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetHostAliasesOk() ([]V1HostAlias, bool) {
	if o == nil || IsNil(o.HostAliases) {
		return nil, false
	}
	return o.HostAliases, true
}

// HasHostAliases returns a boolean if a field has been set.
func (o *V1PodSpec) HasHostAliases() bool {
	if o != nil && !IsNil(o.HostAliases) {
		return true
	}

	return false
}

// SetHostAliases gets a reference to the given []V1HostAlias and assigns it to the HostAliases field.
func (o *V1PodSpec) SetHostAliases(v []V1HostAlias) {
	o.HostAliases = v
}

// GetHostIPC returns the HostIPC field value if set, zero value otherwise.
func (o *V1PodSpec) GetHostIPC() bool {
	if o == nil || IsNil(o.HostIPC) {
		var ret bool
		return ret
	}
	return *o.HostIPC
}

// GetHostIPCOk returns a tuple with the HostIPC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetHostIPCOk() (*bool, bool) {
	if o == nil || IsNil(o.HostIPC) {
		return nil, false
	}
	return o.HostIPC, true
}

// HasHostIPC returns a boolean if a field has been set.
func (o *V1PodSpec) HasHostIPC() bool {
	if o != nil && !IsNil(o.HostIPC) {
		return true
	}

	return false
}

// SetHostIPC gets a reference to the given bool and assigns it to the HostIPC field.
func (o *V1PodSpec) SetHostIPC(v bool) {
	o.HostIPC = &v
}

// GetHostNetwork returns the HostNetwork field value if set, zero value otherwise.
func (o *V1PodSpec) GetHostNetwork() bool {
	if o == nil || IsNil(o.HostNetwork) {
		var ret bool
		return ret
	}
	return *o.HostNetwork
}

// GetHostNetworkOk returns a tuple with the HostNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetHostNetworkOk() (*bool, bool) {
	if o == nil || IsNil(o.HostNetwork) {
		return nil, false
	}
	return o.HostNetwork, true
}

// HasHostNetwork returns a boolean if a field has been set.
func (o *V1PodSpec) HasHostNetwork() bool {
	if o != nil && !IsNil(o.HostNetwork) {
		return true
	}

	return false
}

// SetHostNetwork gets a reference to the given bool and assigns it to the HostNetwork field.
func (o *V1PodSpec) SetHostNetwork(v bool) {
	o.HostNetwork = &v
}

// GetHostPID returns the HostPID field value if set, zero value otherwise.
func (o *V1PodSpec) GetHostPID() bool {
	if o == nil || IsNil(o.HostPID) {
		var ret bool
		return ret
	}
	return *o.HostPID
}

// GetHostPIDOk returns a tuple with the HostPID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetHostPIDOk() (*bool, bool) {
	if o == nil || IsNil(o.HostPID) {
		return nil, false
	}
	return o.HostPID, true
}

// HasHostPID returns a boolean if a field has been set.
func (o *V1PodSpec) HasHostPID() bool {
	if o != nil && !IsNil(o.HostPID) {
		return true
	}

	return false
}

// SetHostPID gets a reference to the given bool and assigns it to the HostPID field.
func (o *V1PodSpec) SetHostPID(v bool) {
	o.HostPID = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *V1PodSpec) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *V1PodSpec) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *V1PodSpec) SetHostname(v string) {
	o.Hostname = &v
}

// GetImagePullSecrets returns the ImagePullSecrets field value if set, zero value otherwise.
func (o *V1PodSpec) GetImagePullSecrets() []V1LocalObjectReference {
	if o == nil || IsNil(o.ImagePullSecrets) {
		var ret []V1LocalObjectReference
		return ret
	}
	return o.ImagePullSecrets
}

// GetImagePullSecretsOk returns a tuple with the ImagePullSecrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetImagePullSecretsOk() ([]V1LocalObjectReference, bool) {
	if o == nil || IsNil(o.ImagePullSecrets) {
		return nil, false
	}
	return o.ImagePullSecrets, true
}

// HasImagePullSecrets returns a boolean if a field has been set.
func (o *V1PodSpec) HasImagePullSecrets() bool {
	if o != nil && !IsNil(o.ImagePullSecrets) {
		return true
	}

	return false
}

// SetImagePullSecrets gets a reference to the given []V1LocalObjectReference and assigns it to the ImagePullSecrets field.
func (o *V1PodSpec) SetImagePullSecrets(v []V1LocalObjectReference) {
	o.ImagePullSecrets = v
}

// GetInitContainers returns the InitContainers field value if set, zero value otherwise.
func (o *V1PodSpec) GetInitContainers() []V1Container {
	if o == nil || IsNil(o.InitContainers) {
		var ret []V1Container
		return ret
	}
	return o.InitContainers
}

// GetInitContainersOk returns a tuple with the InitContainers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetInitContainersOk() ([]V1Container, bool) {
	if o == nil || IsNil(o.InitContainers) {
		return nil, false
	}
	return o.InitContainers, true
}

// HasInitContainers returns a boolean if a field has been set.
func (o *V1PodSpec) HasInitContainers() bool {
	if o != nil && !IsNil(o.InitContainers) {
		return true
	}

	return false
}

// SetInitContainers gets a reference to the given []V1Container and assigns it to the InitContainers field.
func (o *V1PodSpec) SetInitContainers(v []V1Container) {
	o.InitContainers = v
}

// GetNodeName returns the NodeName field value if set, zero value otherwise.
func (o *V1PodSpec) GetNodeName() string {
	if o == nil || IsNil(o.NodeName) {
		var ret string
		return ret
	}
	return *o.NodeName
}

// GetNodeNameOk returns a tuple with the NodeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetNodeNameOk() (*string, bool) {
	if o == nil || IsNil(o.NodeName) {
		return nil, false
	}
	return o.NodeName, true
}

// HasNodeName returns a boolean if a field has been set.
func (o *V1PodSpec) HasNodeName() bool {
	if o != nil && !IsNil(o.NodeName) {
		return true
	}

	return false
}

// SetNodeName gets a reference to the given string and assigns it to the NodeName field.
func (o *V1PodSpec) SetNodeName(v string) {
	o.NodeName = &v
}

// GetNodeSelector returns the NodeSelector field value if set, zero value otherwise.
func (o *V1PodSpec) GetNodeSelector() map[string]string {
	if o == nil || IsNil(o.NodeSelector) {
		var ret map[string]string
		return ret
	}
	return *o.NodeSelector
}

// GetNodeSelectorOk returns a tuple with the NodeSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetNodeSelectorOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.NodeSelector) {
		return nil, false
	}
	return o.NodeSelector, true
}

// HasNodeSelector returns a boolean if a field has been set.
func (o *V1PodSpec) HasNodeSelector() bool {
	if o != nil && !IsNil(o.NodeSelector) {
		return true
	}

	return false
}

// SetNodeSelector gets a reference to the given map[string]string and assigns it to the NodeSelector field.
func (o *V1PodSpec) SetNodeSelector(v map[string]string) {
	o.NodeSelector = &v
}

// GetOverhead returns the Overhead field value if set, zero value otherwise.
func (o *V1PodSpec) GetOverhead() map[string]ResourceQuantity {
	if o == nil || IsNil(o.Overhead) {
		var ret map[string]ResourceQuantity
		return ret
	}
	return *o.Overhead
}

// GetOverheadOk returns a tuple with the Overhead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetOverheadOk() (*map[string]ResourceQuantity, bool) {
	if o == nil || IsNil(o.Overhead) {
		return nil, false
	}
	return o.Overhead, true
}

// HasOverhead returns a boolean if a field has been set.
func (o *V1PodSpec) HasOverhead() bool {
	if o != nil && !IsNil(o.Overhead) {
		return true
	}

	return false
}

// SetOverhead gets a reference to the given map[string]ResourceQuantity and assigns it to the Overhead field.
func (o *V1PodSpec) SetOverhead(v map[string]ResourceQuantity) {
	o.Overhead = &v
}

// GetPreemptionPolicy returns the PreemptionPolicy field value if set, zero value otherwise.
func (o *V1PodSpec) GetPreemptionPolicy() string {
	if o == nil || IsNil(o.PreemptionPolicy) {
		var ret string
		return ret
	}
	return *o.PreemptionPolicy
}

// GetPreemptionPolicyOk returns a tuple with the PreemptionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetPreemptionPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.PreemptionPolicy) {
		return nil, false
	}
	return o.PreemptionPolicy, true
}

// HasPreemptionPolicy returns a boolean if a field has been set.
func (o *V1PodSpec) HasPreemptionPolicy() bool {
	if o != nil && !IsNil(o.PreemptionPolicy) {
		return true
	}

	return false
}

// SetPreemptionPolicy gets a reference to the given string and assigns it to the PreemptionPolicy field.
func (o *V1PodSpec) SetPreemptionPolicy(v string) {
	o.PreemptionPolicy = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *V1PodSpec) GetPriority() int32 {
	if o == nil || IsNil(o.Priority) {
		var ret int32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *V1PodSpec) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int32 and assigns it to the Priority field.
func (o *V1PodSpec) SetPriority(v int32) {
	o.Priority = &v
}

// GetPriorityClassName returns the PriorityClassName field value if set, zero value otherwise.
func (o *V1PodSpec) GetPriorityClassName() string {
	if o == nil || IsNil(o.PriorityClassName) {
		var ret string
		return ret
	}
	return *o.PriorityClassName
}

// GetPriorityClassNameOk returns a tuple with the PriorityClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetPriorityClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.PriorityClassName) {
		return nil, false
	}
	return o.PriorityClassName, true
}

// HasPriorityClassName returns a boolean if a field has been set.
func (o *V1PodSpec) HasPriorityClassName() bool {
	if o != nil && !IsNil(o.PriorityClassName) {
		return true
	}

	return false
}

// SetPriorityClassName gets a reference to the given string and assigns it to the PriorityClassName field.
func (o *V1PodSpec) SetPriorityClassName(v string) {
	o.PriorityClassName = &v
}

// GetReadinessGates returns the ReadinessGates field value if set, zero value otherwise.
func (o *V1PodSpec) GetReadinessGates() []V1PodReadinessGate {
	if o == nil || IsNil(o.ReadinessGates) {
		var ret []V1PodReadinessGate
		return ret
	}
	return o.ReadinessGates
}

// GetReadinessGatesOk returns a tuple with the ReadinessGates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetReadinessGatesOk() ([]V1PodReadinessGate, bool) {
	if o == nil || IsNil(o.ReadinessGates) {
		return nil, false
	}
	return o.ReadinessGates, true
}

// HasReadinessGates returns a boolean if a field has been set.
func (o *V1PodSpec) HasReadinessGates() bool {
	if o != nil && !IsNil(o.ReadinessGates) {
		return true
	}

	return false
}

// SetReadinessGates gets a reference to the given []V1PodReadinessGate and assigns it to the ReadinessGates field.
func (o *V1PodSpec) SetReadinessGates(v []V1PodReadinessGate) {
	o.ReadinessGates = v
}

// GetRestartPolicy returns the RestartPolicy field value if set, zero value otherwise.
func (o *V1PodSpec) GetRestartPolicy() string {
	if o == nil || IsNil(o.RestartPolicy) {
		var ret string
		return ret
	}
	return *o.RestartPolicy
}

// GetRestartPolicyOk returns a tuple with the RestartPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetRestartPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.RestartPolicy) {
		return nil, false
	}
	return o.RestartPolicy, true
}

// HasRestartPolicy returns a boolean if a field has been set.
func (o *V1PodSpec) HasRestartPolicy() bool {
	if o != nil && !IsNil(o.RestartPolicy) {
		return true
	}

	return false
}

// SetRestartPolicy gets a reference to the given string and assigns it to the RestartPolicy field.
func (o *V1PodSpec) SetRestartPolicy(v string) {
	o.RestartPolicy = &v
}

// GetRuntimeClassName returns the RuntimeClassName field value if set, zero value otherwise.
func (o *V1PodSpec) GetRuntimeClassName() string {
	if o == nil || IsNil(o.RuntimeClassName) {
		var ret string
		return ret
	}
	return *o.RuntimeClassName
}

// GetRuntimeClassNameOk returns a tuple with the RuntimeClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetRuntimeClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.RuntimeClassName) {
		return nil, false
	}
	return o.RuntimeClassName, true
}

// HasRuntimeClassName returns a boolean if a field has been set.
func (o *V1PodSpec) HasRuntimeClassName() bool {
	if o != nil && !IsNil(o.RuntimeClassName) {
		return true
	}

	return false
}

// SetRuntimeClassName gets a reference to the given string and assigns it to the RuntimeClassName field.
func (o *V1PodSpec) SetRuntimeClassName(v string) {
	o.RuntimeClassName = &v
}

// GetSchedulerName returns the SchedulerName field value if set, zero value otherwise.
func (o *V1PodSpec) GetSchedulerName() string {
	if o == nil || IsNil(o.SchedulerName) {
		var ret string
		return ret
	}
	return *o.SchedulerName
}

// GetSchedulerNameOk returns a tuple with the SchedulerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetSchedulerNameOk() (*string, bool) {
	if o == nil || IsNil(o.SchedulerName) {
		return nil, false
	}
	return o.SchedulerName, true
}

// HasSchedulerName returns a boolean if a field has been set.
func (o *V1PodSpec) HasSchedulerName() bool {
	if o != nil && !IsNil(o.SchedulerName) {
		return true
	}

	return false
}

// SetSchedulerName gets a reference to the given string and assigns it to the SchedulerName field.
func (o *V1PodSpec) SetSchedulerName(v string) {
	o.SchedulerName = &v
}

// GetSecurityContext returns the SecurityContext field value if set, zero value otherwise.
func (o *V1PodSpec) GetSecurityContext() V1PodSecurityContext {
	if o == nil || IsNil(o.SecurityContext) {
		var ret V1PodSecurityContext
		return ret
	}
	return *o.SecurityContext
}

// GetSecurityContextOk returns a tuple with the SecurityContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetSecurityContextOk() (*V1PodSecurityContext, bool) {
	if o == nil || IsNil(o.SecurityContext) {
		return nil, false
	}
	return o.SecurityContext, true
}

// HasSecurityContext returns a boolean if a field has been set.
func (o *V1PodSpec) HasSecurityContext() bool {
	if o != nil && !IsNil(o.SecurityContext) {
		return true
	}

	return false
}

// SetSecurityContext gets a reference to the given V1PodSecurityContext and assigns it to the SecurityContext field.
func (o *V1PodSpec) SetSecurityContext(v V1PodSecurityContext) {
	o.SecurityContext = &v
}

// GetServiceAccount returns the ServiceAccount field value if set, zero value otherwise.
func (o *V1PodSpec) GetServiceAccount() string {
	if o == nil || IsNil(o.ServiceAccount) {
		var ret string
		return ret
	}
	return *o.ServiceAccount
}

// GetServiceAccountOk returns a tuple with the ServiceAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetServiceAccountOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceAccount) {
		return nil, false
	}
	return o.ServiceAccount, true
}

// HasServiceAccount returns a boolean if a field has been set.
func (o *V1PodSpec) HasServiceAccount() bool {
	if o != nil && !IsNil(o.ServiceAccount) {
		return true
	}

	return false
}

// SetServiceAccount gets a reference to the given string and assigns it to the ServiceAccount field.
func (o *V1PodSpec) SetServiceAccount(v string) {
	o.ServiceAccount = &v
}

// GetServiceAccountName returns the ServiceAccountName field value if set, zero value otherwise.
func (o *V1PodSpec) GetServiceAccountName() string {
	if o == nil || IsNil(o.ServiceAccountName) {
		var ret string
		return ret
	}
	return *o.ServiceAccountName
}

// GetServiceAccountNameOk returns a tuple with the ServiceAccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetServiceAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceAccountName) {
		return nil, false
	}
	return o.ServiceAccountName, true
}

// HasServiceAccountName returns a boolean if a field has been set.
func (o *V1PodSpec) HasServiceAccountName() bool {
	if o != nil && !IsNil(o.ServiceAccountName) {
		return true
	}

	return false
}

// SetServiceAccountName gets a reference to the given string and assigns it to the ServiceAccountName field.
func (o *V1PodSpec) SetServiceAccountName(v string) {
	o.ServiceAccountName = &v
}

// GetShareProcessNamespace returns the ShareProcessNamespace field value if set, zero value otherwise.
func (o *V1PodSpec) GetShareProcessNamespace() bool {
	if o == nil || IsNil(o.ShareProcessNamespace) {
		var ret bool
		return ret
	}
	return *o.ShareProcessNamespace
}

// GetShareProcessNamespaceOk returns a tuple with the ShareProcessNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetShareProcessNamespaceOk() (*bool, bool) {
	if o == nil || IsNil(o.ShareProcessNamespace) {
		return nil, false
	}
	return o.ShareProcessNamespace, true
}

// HasShareProcessNamespace returns a boolean if a field has been set.
func (o *V1PodSpec) HasShareProcessNamespace() bool {
	if o != nil && !IsNil(o.ShareProcessNamespace) {
		return true
	}

	return false
}

// SetShareProcessNamespace gets a reference to the given bool and assigns it to the ShareProcessNamespace field.
func (o *V1PodSpec) SetShareProcessNamespace(v bool) {
	o.ShareProcessNamespace = &v
}

// GetSubdomain returns the Subdomain field value if set, zero value otherwise.
func (o *V1PodSpec) GetSubdomain() string {
	if o == nil || IsNil(o.Subdomain) {
		var ret string
		return ret
	}
	return *o.Subdomain
}

// GetSubdomainOk returns a tuple with the Subdomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetSubdomainOk() (*string, bool) {
	if o == nil || IsNil(o.Subdomain) {
		return nil, false
	}
	return o.Subdomain, true
}

// HasSubdomain returns a boolean if a field has been set.
func (o *V1PodSpec) HasSubdomain() bool {
	if o != nil && !IsNil(o.Subdomain) {
		return true
	}

	return false
}

// SetSubdomain gets a reference to the given string and assigns it to the Subdomain field.
func (o *V1PodSpec) SetSubdomain(v string) {
	o.Subdomain = &v
}

// GetTerminationGracePeriodSeconds returns the TerminationGracePeriodSeconds field value if set, zero value otherwise.
func (o *V1PodSpec) GetTerminationGracePeriodSeconds() int64 {
	if o == nil || IsNil(o.TerminationGracePeriodSeconds) {
		var ret int64
		return ret
	}
	return *o.TerminationGracePeriodSeconds
}

// GetTerminationGracePeriodSecondsOk returns a tuple with the TerminationGracePeriodSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetTerminationGracePeriodSecondsOk() (*int64, bool) {
	if o == nil || IsNil(o.TerminationGracePeriodSeconds) {
		return nil, false
	}
	return o.TerminationGracePeriodSeconds, true
}

// HasTerminationGracePeriodSeconds returns a boolean if a field has been set.
func (o *V1PodSpec) HasTerminationGracePeriodSeconds() bool {
	if o != nil && !IsNil(o.TerminationGracePeriodSeconds) {
		return true
	}

	return false
}

// SetTerminationGracePeriodSeconds gets a reference to the given int64 and assigns it to the TerminationGracePeriodSeconds field.
func (o *V1PodSpec) SetTerminationGracePeriodSeconds(v int64) {
	o.TerminationGracePeriodSeconds = &v
}

// GetTolerations returns the Tolerations field value if set, zero value otherwise.
func (o *V1PodSpec) GetTolerations() []V1Toleration {
	if o == nil || IsNil(o.Tolerations) {
		var ret []V1Toleration
		return ret
	}
	return o.Tolerations
}

// GetTolerationsOk returns a tuple with the Tolerations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetTolerationsOk() ([]V1Toleration, bool) {
	if o == nil || IsNil(o.Tolerations) {
		return nil, false
	}
	return o.Tolerations, true
}

// HasTolerations returns a boolean if a field has been set.
func (o *V1PodSpec) HasTolerations() bool {
	if o != nil && !IsNil(o.Tolerations) {
		return true
	}

	return false
}

// SetTolerations gets a reference to the given []V1Toleration and assigns it to the Tolerations field.
func (o *V1PodSpec) SetTolerations(v []V1Toleration) {
	o.Tolerations = v
}

// GetTopologySpreadConstraints returns the TopologySpreadConstraints field value if set, zero value otherwise.
func (o *V1PodSpec) GetTopologySpreadConstraints() []V1TopologySpreadConstraint {
	if o == nil || IsNil(o.TopologySpreadConstraints) {
		var ret []V1TopologySpreadConstraint
		return ret
	}
	return o.TopologySpreadConstraints
}

// GetTopologySpreadConstraintsOk returns a tuple with the TopologySpreadConstraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetTopologySpreadConstraintsOk() ([]V1TopologySpreadConstraint, bool) {
	if o == nil || IsNil(o.TopologySpreadConstraints) {
		return nil, false
	}
	return o.TopologySpreadConstraints, true
}

// HasTopologySpreadConstraints returns a boolean if a field has been set.
func (o *V1PodSpec) HasTopologySpreadConstraints() bool {
	if o != nil && !IsNil(o.TopologySpreadConstraints) {
		return true
	}

	return false
}

// SetTopologySpreadConstraints gets a reference to the given []V1TopologySpreadConstraint and assigns it to the TopologySpreadConstraints field.
func (o *V1PodSpec) SetTopologySpreadConstraints(v []V1TopologySpreadConstraint) {
	o.TopologySpreadConstraints = v
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *V1PodSpec) GetVolumes() []V1Volume {
	if o == nil || IsNil(o.Volumes) {
		var ret []V1Volume
		return ret
	}
	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodSpec) GetVolumesOk() ([]V1Volume, bool) {
	if o == nil || IsNil(o.Volumes) {
		return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *V1PodSpec) HasVolumes() bool {
	if o != nil && !IsNil(o.Volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []V1Volume and assigns it to the Volumes field.
func (o *V1PodSpec) SetVolumes(v []V1Volume) {
	o.Volumes = v
}

func (o V1PodSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1PodSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActiveDeadlineSeconds) {
		toSerialize["activeDeadlineSeconds"] = o.ActiveDeadlineSeconds
	}
	if !IsNil(o.Affinity) {
		toSerialize["affinity"] = o.Affinity
	}
	if !IsNil(o.AutomountServiceAccountToken) {
		toSerialize["automountServiceAccountToken"] = o.AutomountServiceAccountToken
	}
	toSerialize["containers"] = o.Containers
	if !IsNil(o.DnsConfig) {
		toSerialize["dnsConfig"] = o.DnsConfig
	}
	if !IsNil(o.DnsPolicy) {
		toSerialize["dnsPolicy"] = o.DnsPolicy
	}
	if !IsNil(o.EnableServiceLinks) {
		toSerialize["enableServiceLinks"] = o.EnableServiceLinks
	}
	if !IsNil(o.EphemeralContainers) {
		toSerialize["ephemeralContainers"] = o.EphemeralContainers
	}
	if !IsNil(o.HostAliases) {
		toSerialize["hostAliases"] = o.HostAliases
	}
	if !IsNil(o.HostIPC) {
		toSerialize["hostIPC"] = o.HostIPC
	}
	if !IsNil(o.HostNetwork) {
		toSerialize["hostNetwork"] = o.HostNetwork
	}
	if !IsNil(o.HostPID) {
		toSerialize["hostPID"] = o.HostPID
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.ImagePullSecrets) {
		toSerialize["imagePullSecrets"] = o.ImagePullSecrets
	}
	if !IsNil(o.InitContainers) {
		toSerialize["initContainers"] = o.InitContainers
	}
	if !IsNil(o.NodeName) {
		toSerialize["nodeName"] = o.NodeName
	}
	if !IsNil(o.NodeSelector) {
		toSerialize["nodeSelector"] = o.NodeSelector
	}
	if !IsNil(o.Overhead) {
		toSerialize["overhead"] = o.Overhead
	}
	if !IsNil(o.PreemptionPolicy) {
		toSerialize["preemptionPolicy"] = o.PreemptionPolicy
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if !IsNil(o.PriorityClassName) {
		toSerialize["priorityClassName"] = o.PriorityClassName
	}
	if !IsNil(o.ReadinessGates) {
		toSerialize["readinessGates"] = o.ReadinessGates
	}
	if !IsNil(o.RestartPolicy) {
		toSerialize["restartPolicy"] = o.RestartPolicy
	}
	if !IsNil(o.RuntimeClassName) {
		toSerialize["runtimeClassName"] = o.RuntimeClassName
	}
	if !IsNil(o.SchedulerName) {
		toSerialize["schedulerName"] = o.SchedulerName
	}
	if !IsNil(o.SecurityContext) {
		toSerialize["securityContext"] = o.SecurityContext
	}
	if !IsNil(o.ServiceAccount) {
		toSerialize["serviceAccount"] = o.ServiceAccount
	}
	if !IsNil(o.ServiceAccountName) {
		toSerialize["serviceAccountName"] = o.ServiceAccountName
	}
	if !IsNil(o.ShareProcessNamespace) {
		toSerialize["shareProcessNamespace"] = o.ShareProcessNamespace
	}
	if !IsNil(o.Subdomain) {
		toSerialize["subdomain"] = o.Subdomain
	}
	if !IsNil(o.TerminationGracePeriodSeconds) {
		toSerialize["terminationGracePeriodSeconds"] = o.TerminationGracePeriodSeconds
	}
	if !IsNil(o.Tolerations) {
		toSerialize["tolerations"] = o.Tolerations
	}
	if !IsNil(o.TopologySpreadConstraints) {
		toSerialize["topologySpreadConstraints"] = o.TopologySpreadConstraints
	}
	if !IsNil(o.Volumes) {
		toSerialize["volumes"] = o.Volumes
	}
	return toSerialize, nil
}

func (o *V1PodSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"containers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1PodSpec := _V1PodSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1PodSpec)

	if err != nil {
		return err
	}

	*o = V1PodSpec(varV1PodSpec)

	return err
}

type NullableV1PodSpec struct {
	value *V1PodSpec
	isSet bool
}

func (v NullableV1PodSpec) Get() *V1PodSpec {
	return v.value
}

func (v *NullableV1PodSpec) Set(val *V1PodSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableV1PodSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableV1PodSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1PodSpec(val *V1PodSpec) *NullableV1PodSpec {
	return &NullableV1PodSpec{value: val, isSet: true}
}

func (v NullableV1PodSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1PodSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


