/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1RollingUpdateDaemonSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1RollingUpdateDaemonSet{}

// V1RollingUpdateDaemonSet Spec to control the desired behavior of daemon set rolling update.
type V1RollingUpdateDaemonSet struct {
	// The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
	MaxUnavailable *string `json:"maxUnavailable,omitempty"`
}

// NewV1RollingUpdateDaemonSet instantiates a new V1RollingUpdateDaemonSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1RollingUpdateDaemonSet() *V1RollingUpdateDaemonSet {
	this := V1RollingUpdateDaemonSet{}
	return &this
}

// NewV1RollingUpdateDaemonSetWithDefaults instantiates a new V1RollingUpdateDaemonSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1RollingUpdateDaemonSetWithDefaults() *V1RollingUpdateDaemonSet {
	this := V1RollingUpdateDaemonSet{}
	return &this
}

// GetMaxUnavailable returns the MaxUnavailable field value if set, zero value otherwise.
func (o *V1RollingUpdateDaemonSet) GetMaxUnavailable() string {
	if o == nil || IsNil(o.MaxUnavailable) {
		var ret string
		return ret
	}
	return *o.MaxUnavailable
}

// GetMaxUnavailableOk returns a tuple with the MaxUnavailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1RollingUpdateDaemonSet) GetMaxUnavailableOk() (*string, bool) {
	if o == nil || IsNil(o.MaxUnavailable) {
		return nil, false
	}
	return o.MaxUnavailable, true
}

// HasMaxUnavailable returns a boolean if a field has been set.
func (o *V1RollingUpdateDaemonSet) HasMaxUnavailable() bool {
	if o != nil && !IsNil(o.MaxUnavailable) {
		return true
	}

	return false
}

// SetMaxUnavailable gets a reference to the given string and assigns it to the MaxUnavailable field.
func (o *V1RollingUpdateDaemonSet) SetMaxUnavailable(v string) {
	o.MaxUnavailable = &v
}

func (o V1RollingUpdateDaemonSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1RollingUpdateDaemonSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxUnavailable) {
		toSerialize["maxUnavailable"] = o.MaxUnavailable
	}
	return toSerialize, nil
}

type NullableV1RollingUpdateDaemonSet struct {
	value *V1RollingUpdateDaemonSet
	isSet bool
}

func (v NullableV1RollingUpdateDaemonSet) Get() *V1RollingUpdateDaemonSet {
	return v.value
}

func (v *NullableV1RollingUpdateDaemonSet) Set(val *V1RollingUpdateDaemonSet) {
	v.value = val
	v.isSet = true
}

func (v NullableV1RollingUpdateDaemonSet) IsSet() bool {
	return v.isSet
}

func (v *NullableV1RollingUpdateDaemonSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1RollingUpdateDaemonSet(val *V1RollingUpdateDaemonSet) *NullableV1RollingUpdateDaemonSet {
	return &NullableV1RollingUpdateDaemonSet{value: val, isSet: true}
}

func (v NullableV1RollingUpdateDaemonSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1RollingUpdateDaemonSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


