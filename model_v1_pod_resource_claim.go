/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1PodResourceClaim type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1PodResourceClaim{}

// V1PodResourceClaim PodResourceClaim references exactly one ResourceClaim through a ClaimSource. It adds a name to it that uniquely identifies the ResourceClaim inside the Pod. Containers that need access to the ResourceClaim reference it with this name.
type V1PodResourceClaim struct {
	// Name uniquely identifies this resource claim inside the pod. This must be a DNS_LABEL.
	Name string `json:"name"`
	Source *V1ClaimSource `json:"source,omitempty"`
}

type _V1PodResourceClaim V1PodResourceClaim

// NewV1PodResourceClaim instantiates a new V1PodResourceClaim object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1PodResourceClaim(name string) *V1PodResourceClaim {
	this := V1PodResourceClaim{}
	this.Name = name
	return &this
}

// NewV1PodResourceClaimWithDefaults instantiates a new V1PodResourceClaim object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1PodResourceClaimWithDefaults() *V1PodResourceClaim {
	this := V1PodResourceClaim{}
	return &this
}

// GetName returns the Name field value
func (o *V1PodResourceClaim) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *V1PodResourceClaim) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *V1PodResourceClaim) SetName(v string) {
	o.Name = v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *V1PodResourceClaim) GetSource() V1ClaimSource {
	if o == nil || IsNil(o.Source) {
		var ret V1ClaimSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PodResourceClaim) GetSourceOk() (*V1ClaimSource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *V1PodResourceClaim) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given V1ClaimSource and assigns it to the Source field.
func (o *V1PodResourceClaim) SetSource(v V1ClaimSource) {
	o.Source = &v
}

func (o V1PodResourceClaim) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1PodResourceClaim) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	return toSerialize, nil
}

func (o *V1PodResourceClaim) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1PodResourceClaim := _V1PodResourceClaim{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1PodResourceClaim)

	if err != nil {
		return err
	}

	*o = V1PodResourceClaim(varV1PodResourceClaim)

	return err
}

type NullableV1PodResourceClaim struct {
	value *V1PodResourceClaim
	isSet bool
}

func (v NullableV1PodResourceClaim) Get() *V1PodResourceClaim {
	return v.value
}

func (v *NullableV1PodResourceClaim) Set(val *V1PodResourceClaim) {
	v.value = val
	v.isSet = true
}

func (v NullableV1PodResourceClaim) IsSet() bool {
	return v.isSet
}

func (v *NullableV1PodResourceClaim) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1PodResourceClaim(val *V1PodResourceClaim) *NullableV1PodResourceClaim {
	return &NullableV1PodResourceClaim{value: val, isSet: true}
}

func (v NullableV1PodResourceClaim) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1PodResourceClaim) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


