/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1PersistentVolumeClaimStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1PersistentVolumeClaimStatus{}

// V1PersistentVolumeClaimStatus PersistentVolumeClaimStatus is the current status of a persistent volume claim.
type V1PersistentVolumeClaimStatus struct {
	// AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `json:"accessModes,omitempty"`
	// Represents the actual resources of the underlying volume.
	Capacity *map[string]ResourceQuantity `json:"capacity,omitempty"`
	// Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
	Conditions []V1PersistentVolumeClaimCondition `json:"conditions,omitempty"`
	// Phase represents the current phase of PersistentVolumeClaim.
	Phase *string `json:"phase,omitempty"`
}

// NewV1PersistentVolumeClaimStatus instantiates a new V1PersistentVolumeClaimStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1PersistentVolumeClaimStatus() *V1PersistentVolumeClaimStatus {
	this := V1PersistentVolumeClaimStatus{}
	return &this
}

// NewV1PersistentVolumeClaimStatusWithDefaults instantiates a new V1PersistentVolumeClaimStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1PersistentVolumeClaimStatusWithDefaults() *V1PersistentVolumeClaimStatus {
	this := V1PersistentVolumeClaimStatus{}
	return &this
}

// GetAccessModes returns the AccessModes field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimStatus) GetAccessModes() []string {
	if o == nil || IsNil(o.AccessModes) {
		var ret []string
		return ret
	}
	return o.AccessModes
}

// GetAccessModesOk returns a tuple with the AccessModes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimStatus) GetAccessModesOk() ([]string, bool) {
	if o == nil || IsNil(o.AccessModes) {
		return nil, false
	}
	return o.AccessModes, true
}

// HasAccessModes returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimStatus) HasAccessModes() bool {
	if o != nil && !IsNil(o.AccessModes) {
		return true
	}

	return false
}

// SetAccessModes gets a reference to the given []string and assigns it to the AccessModes field.
func (o *V1PersistentVolumeClaimStatus) SetAccessModes(v []string) {
	o.AccessModes = v
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimStatus) GetCapacity() map[string]ResourceQuantity {
	if o == nil || IsNil(o.Capacity) {
		var ret map[string]ResourceQuantity
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimStatus) GetCapacityOk() (*map[string]ResourceQuantity, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimStatus) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given map[string]ResourceQuantity and assigns it to the Capacity field.
func (o *V1PersistentVolumeClaimStatus) SetCapacity(v map[string]ResourceQuantity) {
	o.Capacity = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimStatus) GetConditions() []V1PersistentVolumeClaimCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []V1PersistentVolumeClaimCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimStatus) GetConditionsOk() ([]V1PersistentVolumeClaimCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimStatus) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []V1PersistentVolumeClaimCondition and assigns it to the Conditions field.
func (o *V1PersistentVolumeClaimStatus) SetConditions(v []V1PersistentVolumeClaimCondition) {
	o.Conditions = v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimStatus) GetPhase() string {
	if o == nil || IsNil(o.Phase) {
		var ret string
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimStatus) GetPhaseOk() (*string, bool) {
	if o == nil || IsNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimStatus) HasPhase() bool {
	if o != nil && !IsNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given string and assigns it to the Phase field.
func (o *V1PersistentVolumeClaimStatus) SetPhase(v string) {
	o.Phase = &v
}

func (o V1PersistentVolumeClaimStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1PersistentVolumeClaimStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessModes) {
		toSerialize["accessModes"] = o.AccessModes
	}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}
	return toSerialize, nil
}

type NullableV1PersistentVolumeClaimStatus struct {
	value *V1PersistentVolumeClaimStatus
	isSet bool
}

func (v NullableV1PersistentVolumeClaimStatus) Get() *V1PersistentVolumeClaimStatus {
	return v.value
}

func (v *NullableV1PersistentVolumeClaimStatus) Set(val *V1PersistentVolumeClaimStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableV1PersistentVolumeClaimStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableV1PersistentVolumeClaimStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1PersistentVolumeClaimStatus(val *V1PersistentVolumeClaimStatus) *NullableV1PersistentVolumeClaimStatus {
	return &NullableV1PersistentVolumeClaimStatus{value: val, isSet: true}
}

func (v NullableV1PersistentVolumeClaimStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1PersistentVolumeClaimStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


