/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1PersistentVolumeClaimStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1PersistentVolumeClaimStatus{}

// V1PersistentVolumeClaimStatus PersistentVolumeClaimStatus is the current status of a persistent volume claim.
type V1PersistentVolumeClaimStatus struct {
	// accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `json:"accessModes,omitempty"`
	// allocatedResourceStatuses stores status of resource being resized for the given PVC. Key names follow standard Kubernetes label syntax. Valid values are either:  * Un-prefixed keys:   - storage - the capacity of the volume.  * Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.  ClaimResourceStatus can be in any of following states:  - ControllerResizeInProgress:   State set when resize controller starts resizing the volume in control-plane.  - ControllerResizeFailed:   State set when resize has failed in resize controller with a terminal error.  - NodeResizePending:   State set when resize controller has finished resizing the volume but further resizing of   volume is needed on the node.  - NodeResizeInProgress:   State set when kubelet starts resizing the volume.  - NodeResizeFailed:   State set when resizing has failed in kubelet with a terminal error. Transient errors don't set   NodeResizeFailed. For example: if expanding a PVC for more capacity - this field can be one of the following states:  - pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeInProgress\"      - pvc.status.allocatedResourceStatus['storage'] = \"ControllerResizeFailed\"      - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizePending\"      - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeInProgress\"      - pvc.status.allocatedResourceStatus['storage'] = \"NodeResizeFailed\" When this field is not set, it means that no resize operation is in progress for the given PVC.  A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.  This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResourceStatuses *map[string]string `json:"allocatedResourceStatuses,omitempty"`
	// allocatedResources tracks the resources allocated to a PVC including its capacity. Key names follow standard Kubernetes label syntax. Valid values are either:  * Un-prefixed keys:   - storage - the capacity of the volume.  * Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\" Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.  Capacity reported here may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity.  A controller that receives PVC update with previously unknown resourceName should ignore the update for the purpose it was designed. For example - a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.  This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResources *map[string]ResourceQuantity `json:"allocatedResources,omitempty"`
	// capacity represents the actual resources of the underlying volume.
	Capacity *map[string]ResourceQuantity `json:"capacity,omitempty"`
	// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
	Conditions []V1PersistentVolumeClaimCondition `json:"conditions,omitempty"`
	// currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using. When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim This is an alpha field and requires enabling VolumeAttributesClass feature.
	CurrentVolumeAttributesClassName *string `json:"currentVolumeAttributesClassName,omitempty"`
	ModifyVolumeStatus *V1ModifyVolumeStatus `json:"modifyVolumeStatus,omitempty"`
	// phase represents the current phase of PersistentVolumeClaim.
	Phase *string `json:"phase,omitempty"`
}

// NewV1PersistentVolumeClaimStatus instantiates a new V1PersistentVolumeClaimStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1PersistentVolumeClaimStatus() *V1PersistentVolumeClaimStatus {
	this := V1PersistentVolumeClaimStatus{}
	return &this
}

// NewV1PersistentVolumeClaimStatusWithDefaults instantiates a new V1PersistentVolumeClaimStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1PersistentVolumeClaimStatusWithDefaults() *V1PersistentVolumeClaimStatus {
	this := V1PersistentVolumeClaimStatus{}
	return &this
}

// GetAccessModes returns the AccessModes field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimStatus) GetAccessModes() []string {
	if o == nil || IsNil(o.AccessModes) {
		var ret []string
		return ret
	}
	return o.AccessModes
}

// GetAccessModesOk returns a tuple with the AccessModes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimStatus) GetAccessModesOk() ([]string, bool) {
	if o == nil || IsNil(o.AccessModes) {
		return nil, false
	}
	return o.AccessModes, true
}

// HasAccessModes returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimStatus) HasAccessModes() bool {
	if o != nil && !IsNil(o.AccessModes) {
		return true
	}

	return false
}

// SetAccessModes gets a reference to the given []string and assigns it to the AccessModes field.
func (o *V1PersistentVolumeClaimStatus) SetAccessModes(v []string) {
	o.AccessModes = v
}

// GetAllocatedResourceStatuses returns the AllocatedResourceStatuses field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimStatus) GetAllocatedResourceStatuses() map[string]string {
	if o == nil || IsNil(o.AllocatedResourceStatuses) {
		var ret map[string]string
		return ret
	}
	return *o.AllocatedResourceStatuses
}

// GetAllocatedResourceStatusesOk returns a tuple with the AllocatedResourceStatuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimStatus) GetAllocatedResourceStatusesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.AllocatedResourceStatuses) {
		return nil, false
	}
	return o.AllocatedResourceStatuses, true
}

// HasAllocatedResourceStatuses returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimStatus) HasAllocatedResourceStatuses() bool {
	if o != nil && !IsNil(o.AllocatedResourceStatuses) {
		return true
	}

	return false
}

// SetAllocatedResourceStatuses gets a reference to the given map[string]string and assigns it to the AllocatedResourceStatuses field.
func (o *V1PersistentVolumeClaimStatus) SetAllocatedResourceStatuses(v map[string]string) {
	o.AllocatedResourceStatuses = &v
}

// GetAllocatedResources returns the AllocatedResources field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimStatus) GetAllocatedResources() map[string]ResourceQuantity {
	if o == nil || IsNil(o.AllocatedResources) {
		var ret map[string]ResourceQuantity
		return ret
	}
	return *o.AllocatedResources
}

// GetAllocatedResourcesOk returns a tuple with the AllocatedResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimStatus) GetAllocatedResourcesOk() (*map[string]ResourceQuantity, bool) {
	if o == nil || IsNil(o.AllocatedResources) {
		return nil, false
	}
	return o.AllocatedResources, true
}

// HasAllocatedResources returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimStatus) HasAllocatedResources() bool {
	if o != nil && !IsNil(o.AllocatedResources) {
		return true
	}

	return false
}

// SetAllocatedResources gets a reference to the given map[string]ResourceQuantity and assigns it to the AllocatedResources field.
func (o *V1PersistentVolumeClaimStatus) SetAllocatedResources(v map[string]ResourceQuantity) {
	o.AllocatedResources = &v
}

// GetCapacity returns the Capacity field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimStatus) GetCapacity() map[string]ResourceQuantity {
	if o == nil || IsNil(o.Capacity) {
		var ret map[string]ResourceQuantity
		return ret
	}
	return *o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimStatus) GetCapacityOk() (*map[string]ResourceQuantity, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimStatus) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given map[string]ResourceQuantity and assigns it to the Capacity field.
func (o *V1PersistentVolumeClaimStatus) SetCapacity(v map[string]ResourceQuantity) {
	o.Capacity = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimStatus) GetConditions() []V1PersistentVolumeClaimCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []V1PersistentVolumeClaimCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimStatus) GetConditionsOk() ([]V1PersistentVolumeClaimCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimStatus) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []V1PersistentVolumeClaimCondition and assigns it to the Conditions field.
func (o *V1PersistentVolumeClaimStatus) SetConditions(v []V1PersistentVolumeClaimCondition) {
	o.Conditions = v
}

// GetCurrentVolumeAttributesClassName returns the CurrentVolumeAttributesClassName field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimStatus) GetCurrentVolumeAttributesClassName() string {
	if o == nil || IsNil(o.CurrentVolumeAttributesClassName) {
		var ret string
		return ret
	}
	return *o.CurrentVolumeAttributesClassName
}

// GetCurrentVolumeAttributesClassNameOk returns a tuple with the CurrentVolumeAttributesClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimStatus) GetCurrentVolumeAttributesClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentVolumeAttributesClassName) {
		return nil, false
	}
	return o.CurrentVolumeAttributesClassName, true
}

// HasCurrentVolumeAttributesClassName returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimStatus) HasCurrentVolumeAttributesClassName() bool {
	if o != nil && !IsNil(o.CurrentVolumeAttributesClassName) {
		return true
	}

	return false
}

// SetCurrentVolumeAttributesClassName gets a reference to the given string and assigns it to the CurrentVolumeAttributesClassName field.
func (o *V1PersistentVolumeClaimStatus) SetCurrentVolumeAttributesClassName(v string) {
	o.CurrentVolumeAttributesClassName = &v
}

// GetModifyVolumeStatus returns the ModifyVolumeStatus field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimStatus) GetModifyVolumeStatus() V1ModifyVolumeStatus {
	if o == nil || IsNil(o.ModifyVolumeStatus) {
		var ret V1ModifyVolumeStatus
		return ret
	}
	return *o.ModifyVolumeStatus
}

// GetModifyVolumeStatusOk returns a tuple with the ModifyVolumeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimStatus) GetModifyVolumeStatusOk() (*V1ModifyVolumeStatus, bool) {
	if o == nil || IsNil(o.ModifyVolumeStatus) {
		return nil, false
	}
	return o.ModifyVolumeStatus, true
}

// HasModifyVolumeStatus returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimStatus) HasModifyVolumeStatus() bool {
	if o != nil && !IsNil(o.ModifyVolumeStatus) {
		return true
	}

	return false
}

// SetModifyVolumeStatus gets a reference to the given V1ModifyVolumeStatus and assigns it to the ModifyVolumeStatus field.
func (o *V1PersistentVolumeClaimStatus) SetModifyVolumeStatus(v V1ModifyVolumeStatus) {
	o.ModifyVolumeStatus = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimStatus) GetPhase() string {
	if o == nil || IsNil(o.Phase) {
		var ret string
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimStatus) GetPhaseOk() (*string, bool) {
	if o == nil || IsNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimStatus) HasPhase() bool {
	if o != nil && !IsNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given string and assigns it to the Phase field.
func (o *V1PersistentVolumeClaimStatus) SetPhase(v string) {
	o.Phase = &v
}

func (o V1PersistentVolumeClaimStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1PersistentVolumeClaimStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessModes) {
		toSerialize["accessModes"] = o.AccessModes
	}
	if !IsNil(o.AllocatedResourceStatuses) {
		toSerialize["allocatedResourceStatuses"] = o.AllocatedResourceStatuses
	}
	if !IsNil(o.AllocatedResources) {
		toSerialize["allocatedResources"] = o.AllocatedResources
	}
	if !IsNil(o.Capacity) {
		toSerialize["capacity"] = o.Capacity
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.CurrentVolumeAttributesClassName) {
		toSerialize["currentVolumeAttributesClassName"] = o.CurrentVolumeAttributesClassName
	}
	if !IsNil(o.ModifyVolumeStatus) {
		toSerialize["modifyVolumeStatus"] = o.ModifyVolumeStatus
	}
	if !IsNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}
	return toSerialize, nil
}

type NullableV1PersistentVolumeClaimStatus struct {
	value *V1PersistentVolumeClaimStatus
	isSet bool
}

func (v NullableV1PersistentVolumeClaimStatus) Get() *V1PersistentVolumeClaimStatus {
	return v.value
}

func (v *NullableV1PersistentVolumeClaimStatus) Set(val *V1PersistentVolumeClaimStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableV1PersistentVolumeClaimStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableV1PersistentVolumeClaimStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1PersistentVolumeClaimStatus(val *V1PersistentVolumeClaimStatus) *NullableV1PersistentVolumeClaimStatus {
	return &NullableV1PersistentVolumeClaimStatus{value: val, isSet: true}
}

func (v NullableV1PersistentVolumeClaimStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1PersistentVolumeClaimStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


