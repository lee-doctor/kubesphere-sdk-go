/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UrlURL type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UrlURL{}

// UrlURL struct for UrlURL
type UrlURL struct {
	ForceQuery bool `json:"ForceQuery"`
	Fragment string `json:"Fragment"`
	Host string `json:"Host"`
	OmitHost bool `json:"OmitHost"`
	Opaque string `json:"Opaque"`
	Path string `json:"Path"`
	RawFragment string `json:"RawFragment"`
	RawPath string `json:"RawPath"`
	RawQuery string `json:"RawQuery"`
	Scheme string `json:"Scheme"`
	User UrlUserinfo `json:"User"`
}

type _UrlURL UrlURL

// NewUrlURL instantiates a new UrlURL object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUrlURL(forceQuery bool, fragment string, host string, omitHost bool, opaque string, path string, rawFragment string, rawPath string, rawQuery string, scheme string, user UrlUserinfo) *UrlURL {
	this := UrlURL{}
	this.ForceQuery = forceQuery
	this.Fragment = fragment
	this.Host = host
	this.OmitHost = omitHost
	this.Opaque = opaque
	this.Path = path
	this.RawFragment = rawFragment
	this.RawPath = rawPath
	this.RawQuery = rawQuery
	this.Scheme = scheme
	this.User = user
	return &this
}

// NewUrlURLWithDefaults instantiates a new UrlURL object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUrlURLWithDefaults() *UrlURL {
	this := UrlURL{}
	return &this
}

// GetForceQuery returns the ForceQuery field value
func (o *UrlURL) GetForceQuery() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ForceQuery
}

// GetForceQueryOk returns a tuple with the ForceQuery field value
// and a boolean to check if the value has been set.
func (o *UrlURL) GetForceQueryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForceQuery, true
}

// SetForceQuery sets field value
func (o *UrlURL) SetForceQuery(v bool) {
	o.ForceQuery = v
}

// GetFragment returns the Fragment field value
func (o *UrlURL) GetFragment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fragment
}

// GetFragmentOk returns a tuple with the Fragment field value
// and a boolean to check if the value has been set.
func (o *UrlURL) GetFragmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fragment, true
}

// SetFragment sets field value
func (o *UrlURL) SetFragment(v string) {
	o.Fragment = v
}

// GetHost returns the Host field value
func (o *UrlURL) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *UrlURL) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *UrlURL) SetHost(v string) {
	o.Host = v
}

// GetOmitHost returns the OmitHost field value
func (o *UrlURL) GetOmitHost() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.OmitHost
}

// GetOmitHostOk returns a tuple with the OmitHost field value
// and a boolean to check if the value has been set.
func (o *UrlURL) GetOmitHostOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OmitHost, true
}

// SetOmitHost sets field value
func (o *UrlURL) SetOmitHost(v bool) {
	o.OmitHost = v
}

// GetOpaque returns the Opaque field value
func (o *UrlURL) GetOpaque() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Opaque
}

// GetOpaqueOk returns a tuple with the Opaque field value
// and a boolean to check if the value has been set.
func (o *UrlURL) GetOpaqueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Opaque, true
}

// SetOpaque sets field value
func (o *UrlURL) SetOpaque(v string) {
	o.Opaque = v
}

// GetPath returns the Path field value
func (o *UrlURL) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *UrlURL) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *UrlURL) SetPath(v string) {
	o.Path = v
}

// GetRawFragment returns the RawFragment field value
func (o *UrlURL) GetRawFragment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RawFragment
}

// GetRawFragmentOk returns a tuple with the RawFragment field value
// and a boolean to check if the value has been set.
func (o *UrlURL) GetRawFragmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RawFragment, true
}

// SetRawFragment sets field value
func (o *UrlURL) SetRawFragment(v string) {
	o.RawFragment = v
}

// GetRawPath returns the RawPath field value
func (o *UrlURL) GetRawPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RawPath
}

// GetRawPathOk returns a tuple with the RawPath field value
// and a boolean to check if the value has been set.
func (o *UrlURL) GetRawPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RawPath, true
}

// SetRawPath sets field value
func (o *UrlURL) SetRawPath(v string) {
	o.RawPath = v
}

// GetRawQuery returns the RawQuery field value
func (o *UrlURL) GetRawQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RawQuery
}

// GetRawQueryOk returns a tuple with the RawQuery field value
// and a boolean to check if the value has been set.
func (o *UrlURL) GetRawQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RawQuery, true
}

// SetRawQuery sets field value
func (o *UrlURL) SetRawQuery(v string) {
	o.RawQuery = v
}

// GetScheme returns the Scheme field value
func (o *UrlURL) GetScheme() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value
// and a boolean to check if the value has been set.
func (o *UrlURL) GetSchemeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scheme, true
}

// SetScheme sets field value
func (o *UrlURL) SetScheme(v string) {
	o.Scheme = v
}

// GetUser returns the User field value
func (o *UrlURL) GetUser() UrlUserinfo {
	if o == nil {
		var ret UrlUserinfo
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *UrlURL) GetUserOk() (*UrlUserinfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *UrlURL) SetUser(v UrlUserinfo) {
	o.User = v
}

func (o UrlURL) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UrlURL) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ForceQuery"] = o.ForceQuery
	toSerialize["Fragment"] = o.Fragment
	toSerialize["Host"] = o.Host
	toSerialize["OmitHost"] = o.OmitHost
	toSerialize["Opaque"] = o.Opaque
	toSerialize["Path"] = o.Path
	toSerialize["RawFragment"] = o.RawFragment
	toSerialize["RawPath"] = o.RawPath
	toSerialize["RawQuery"] = o.RawQuery
	toSerialize["Scheme"] = o.Scheme
	toSerialize["User"] = o.User
	return toSerialize, nil
}

func (o *UrlURL) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ForceQuery",
		"Fragment",
		"Host",
		"OmitHost",
		"Opaque",
		"Path",
		"RawFragment",
		"RawPath",
		"RawQuery",
		"Scheme",
		"User",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUrlURL := _UrlURL{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUrlURL)

	if err != nil {
		return err
	}

	*o = UrlURL(varUrlURL)

	return err
}

type NullableUrlURL struct {
	value *UrlURL
	isSet bool
}

func (v NullableUrlURL) Get() *UrlURL {
	return v.value
}

func (v *NullableUrlURL) Set(val *UrlURL) {
	v.value = val
	v.isSet = true
}

func (v NullableUrlURL) IsSet() bool {
	return v.isSet
}

func (v *NullableUrlURL) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUrlURL(val *UrlURL) *NullableUrlURL {
	return &NullableUrlURL{value: val, isSet: true}
}

func (v NullableUrlURL) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUrlURL) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


