/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1alpha2Node type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha2Node{}

// V1alpha2Node struct for V1alpha2Node
type V1alpha2Node struct {
	Adjacency []string `json:"adjacency,omitempty"`
	Children []V1alpha2NodeSummaryGroup `json:"children,omitempty"`
	Connections []V1alpha2ConnectionsSummary `json:"connections,omitempty"`
	Controls []V1alpha2ControlInstance `json:"controls"`
	Id string `json:"id"`
	Label string `json:"label"`
	LabelMinor string `json:"labelMinor"`
	Metadata []V1alpha2MetadataRow `json:"metadata,omitempty"`
	Metrics []V1alpha2MetricRow `json:"metrics,omitempty"`
	Parents []V1alpha2Parent `json:"parents,omitempty"`
	Pseudo *bool `json:"pseudo,omitempty"`
	Rank string `json:"rank"`
	Shape *string `json:"shape,omitempty"`
	Stack *bool `json:"stack,omitempty"`
	Tables []V1alpha2Table `json:"tables,omitempty"`
	Tag *string `json:"tag,omitempty"`
}

type _V1alpha2Node V1alpha2Node

// NewV1alpha2Node instantiates a new V1alpha2Node object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha2Node(controls []V1alpha2ControlInstance, id string, label string, labelMinor string, rank string) *V1alpha2Node {
	this := V1alpha2Node{}
	this.Controls = controls
	this.Id = id
	this.Label = label
	this.LabelMinor = labelMinor
	this.Rank = rank
	return &this
}

// NewV1alpha2NodeWithDefaults instantiates a new V1alpha2Node object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha2NodeWithDefaults() *V1alpha2Node {
	this := V1alpha2Node{}
	return &this
}

// GetAdjacency returns the Adjacency field value if set, zero value otherwise.
func (o *V1alpha2Node) GetAdjacency() []string {
	if o == nil || IsNil(o.Adjacency) {
		var ret []string
		return ret
	}
	return o.Adjacency
}

// GetAdjacencyOk returns a tuple with the Adjacency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2Node) GetAdjacencyOk() ([]string, bool) {
	if o == nil || IsNil(o.Adjacency) {
		return nil, false
	}
	return o.Adjacency, true
}

// HasAdjacency returns a boolean if a field has been set.
func (o *V1alpha2Node) HasAdjacency() bool {
	if o != nil && !IsNil(o.Adjacency) {
		return true
	}

	return false
}

// SetAdjacency gets a reference to the given []string and assigns it to the Adjacency field.
func (o *V1alpha2Node) SetAdjacency(v []string) {
	o.Adjacency = v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *V1alpha2Node) GetChildren() []V1alpha2NodeSummaryGroup {
	if o == nil || IsNil(o.Children) {
		var ret []V1alpha2NodeSummaryGroup
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2Node) GetChildrenOk() ([]V1alpha2NodeSummaryGroup, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *V1alpha2Node) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []V1alpha2NodeSummaryGroup and assigns it to the Children field.
func (o *V1alpha2Node) SetChildren(v []V1alpha2NodeSummaryGroup) {
	o.Children = v
}

// GetConnections returns the Connections field value if set, zero value otherwise.
func (o *V1alpha2Node) GetConnections() []V1alpha2ConnectionsSummary {
	if o == nil || IsNil(o.Connections) {
		var ret []V1alpha2ConnectionsSummary
		return ret
	}
	return o.Connections
}

// GetConnectionsOk returns a tuple with the Connections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2Node) GetConnectionsOk() ([]V1alpha2ConnectionsSummary, bool) {
	if o == nil || IsNil(o.Connections) {
		return nil, false
	}
	return o.Connections, true
}

// HasConnections returns a boolean if a field has been set.
func (o *V1alpha2Node) HasConnections() bool {
	if o != nil && !IsNil(o.Connections) {
		return true
	}

	return false
}

// SetConnections gets a reference to the given []V1alpha2ConnectionsSummary and assigns it to the Connections field.
func (o *V1alpha2Node) SetConnections(v []V1alpha2ConnectionsSummary) {
	o.Connections = v
}

// GetControls returns the Controls field value
func (o *V1alpha2Node) GetControls() []V1alpha2ControlInstance {
	if o == nil {
		var ret []V1alpha2ControlInstance
		return ret
	}

	return o.Controls
}

// GetControlsOk returns a tuple with the Controls field value
// and a boolean to check if the value has been set.
func (o *V1alpha2Node) GetControlsOk() ([]V1alpha2ControlInstance, bool) {
	if o == nil {
		return nil, false
	}
	return o.Controls, true
}

// SetControls sets field value
func (o *V1alpha2Node) SetControls(v []V1alpha2ControlInstance) {
	o.Controls = v
}

// GetId returns the Id field value
func (o *V1alpha2Node) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *V1alpha2Node) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *V1alpha2Node) SetId(v string) {
	o.Id = v
}

// GetLabel returns the Label field value
func (o *V1alpha2Node) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *V1alpha2Node) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *V1alpha2Node) SetLabel(v string) {
	o.Label = v
}

// GetLabelMinor returns the LabelMinor field value
func (o *V1alpha2Node) GetLabelMinor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LabelMinor
}

// GetLabelMinorOk returns a tuple with the LabelMinor field value
// and a boolean to check if the value has been set.
func (o *V1alpha2Node) GetLabelMinorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LabelMinor, true
}

// SetLabelMinor sets field value
func (o *V1alpha2Node) SetLabelMinor(v string) {
	o.LabelMinor = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V1alpha2Node) GetMetadata() []V1alpha2MetadataRow {
	if o == nil || IsNil(o.Metadata) {
		var ret []V1alpha2MetadataRow
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2Node) GetMetadataOk() ([]V1alpha2MetadataRow, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V1alpha2Node) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given []V1alpha2MetadataRow and assigns it to the Metadata field.
func (o *V1alpha2Node) SetMetadata(v []V1alpha2MetadataRow) {
	o.Metadata = v
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *V1alpha2Node) GetMetrics() []V1alpha2MetricRow {
	if o == nil || IsNil(o.Metrics) {
		var ret []V1alpha2MetricRow
		return ret
	}
	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2Node) GetMetricsOk() ([]V1alpha2MetricRow, bool) {
	if o == nil || IsNil(o.Metrics) {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *V1alpha2Node) HasMetrics() bool {
	if o != nil && !IsNil(o.Metrics) {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given []V1alpha2MetricRow and assigns it to the Metrics field.
func (o *V1alpha2Node) SetMetrics(v []V1alpha2MetricRow) {
	o.Metrics = v
}

// GetParents returns the Parents field value if set, zero value otherwise.
func (o *V1alpha2Node) GetParents() []V1alpha2Parent {
	if o == nil || IsNil(o.Parents) {
		var ret []V1alpha2Parent
		return ret
	}
	return o.Parents
}

// GetParentsOk returns a tuple with the Parents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2Node) GetParentsOk() ([]V1alpha2Parent, bool) {
	if o == nil || IsNil(o.Parents) {
		return nil, false
	}
	return o.Parents, true
}

// HasParents returns a boolean if a field has been set.
func (o *V1alpha2Node) HasParents() bool {
	if o != nil && !IsNil(o.Parents) {
		return true
	}

	return false
}

// SetParents gets a reference to the given []V1alpha2Parent and assigns it to the Parents field.
func (o *V1alpha2Node) SetParents(v []V1alpha2Parent) {
	o.Parents = v
}

// GetPseudo returns the Pseudo field value if set, zero value otherwise.
func (o *V1alpha2Node) GetPseudo() bool {
	if o == nil || IsNil(o.Pseudo) {
		var ret bool
		return ret
	}
	return *o.Pseudo
}

// GetPseudoOk returns a tuple with the Pseudo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2Node) GetPseudoOk() (*bool, bool) {
	if o == nil || IsNil(o.Pseudo) {
		return nil, false
	}
	return o.Pseudo, true
}

// HasPseudo returns a boolean if a field has been set.
func (o *V1alpha2Node) HasPseudo() bool {
	if o != nil && !IsNil(o.Pseudo) {
		return true
	}

	return false
}

// SetPseudo gets a reference to the given bool and assigns it to the Pseudo field.
func (o *V1alpha2Node) SetPseudo(v bool) {
	o.Pseudo = &v
}

// GetRank returns the Rank field value
func (o *V1alpha2Node) GetRank() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Rank
}

// GetRankOk returns a tuple with the Rank field value
// and a boolean to check if the value has been set.
func (o *V1alpha2Node) GetRankOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rank, true
}

// SetRank sets field value
func (o *V1alpha2Node) SetRank(v string) {
	o.Rank = v
}

// GetShape returns the Shape field value if set, zero value otherwise.
func (o *V1alpha2Node) GetShape() string {
	if o == nil || IsNil(o.Shape) {
		var ret string
		return ret
	}
	return *o.Shape
}

// GetShapeOk returns a tuple with the Shape field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2Node) GetShapeOk() (*string, bool) {
	if o == nil || IsNil(o.Shape) {
		return nil, false
	}
	return o.Shape, true
}

// HasShape returns a boolean if a field has been set.
func (o *V1alpha2Node) HasShape() bool {
	if o != nil && !IsNil(o.Shape) {
		return true
	}

	return false
}

// SetShape gets a reference to the given string and assigns it to the Shape field.
func (o *V1alpha2Node) SetShape(v string) {
	o.Shape = &v
}

// GetStack returns the Stack field value if set, zero value otherwise.
func (o *V1alpha2Node) GetStack() bool {
	if o == nil || IsNil(o.Stack) {
		var ret bool
		return ret
	}
	return *o.Stack
}

// GetStackOk returns a tuple with the Stack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2Node) GetStackOk() (*bool, bool) {
	if o == nil || IsNil(o.Stack) {
		return nil, false
	}
	return o.Stack, true
}

// HasStack returns a boolean if a field has been set.
func (o *V1alpha2Node) HasStack() bool {
	if o != nil && !IsNil(o.Stack) {
		return true
	}

	return false
}

// SetStack gets a reference to the given bool and assigns it to the Stack field.
func (o *V1alpha2Node) SetStack(v bool) {
	o.Stack = &v
}

// GetTables returns the Tables field value if set, zero value otherwise.
func (o *V1alpha2Node) GetTables() []V1alpha2Table {
	if o == nil || IsNil(o.Tables) {
		var ret []V1alpha2Table
		return ret
	}
	return o.Tables
}

// GetTablesOk returns a tuple with the Tables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2Node) GetTablesOk() ([]V1alpha2Table, bool) {
	if o == nil || IsNil(o.Tables) {
		return nil, false
	}
	return o.Tables, true
}

// HasTables returns a boolean if a field has been set.
func (o *V1alpha2Node) HasTables() bool {
	if o != nil && !IsNil(o.Tables) {
		return true
	}

	return false
}

// SetTables gets a reference to the given []V1alpha2Table and assigns it to the Tables field.
func (o *V1alpha2Node) SetTables(v []V1alpha2Table) {
	o.Tables = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *V1alpha2Node) GetTag() string {
	if o == nil || IsNil(o.Tag) {
		var ret string
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2Node) GetTagOk() (*string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *V1alpha2Node) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given string and assigns it to the Tag field.
func (o *V1alpha2Node) SetTag(v string) {
	o.Tag = &v
}

func (o V1alpha2Node) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha2Node) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Adjacency) {
		toSerialize["adjacency"] = o.Adjacency
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.Connections) {
		toSerialize["connections"] = o.Connections
	}
	toSerialize["controls"] = o.Controls
	toSerialize["id"] = o.Id
	toSerialize["label"] = o.Label
	toSerialize["labelMinor"] = o.LabelMinor
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Metrics) {
		toSerialize["metrics"] = o.Metrics
	}
	if !IsNil(o.Parents) {
		toSerialize["parents"] = o.Parents
	}
	if !IsNil(o.Pseudo) {
		toSerialize["pseudo"] = o.Pseudo
	}
	toSerialize["rank"] = o.Rank
	if !IsNil(o.Shape) {
		toSerialize["shape"] = o.Shape
	}
	if !IsNil(o.Stack) {
		toSerialize["stack"] = o.Stack
	}
	if !IsNil(o.Tables) {
		toSerialize["tables"] = o.Tables
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	return toSerialize, nil
}

func (o *V1alpha2Node) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"controls",
		"id",
		"label",
		"labelMinor",
		"rank",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1alpha2Node := _V1alpha2Node{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1alpha2Node)

	if err != nil {
		return err
	}

	*o = V1alpha2Node(varV1alpha2Node)

	return err
}

type NullableV1alpha2Node struct {
	value *V1alpha2Node
	isSet bool
}

func (v NullableV1alpha2Node) Get() *V1alpha2Node {
	return v.value
}

func (v *NullableV1alpha2Node) Set(val *V1alpha2Node) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha2Node) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha2Node) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha2Node(val *V1alpha2Node) *NullableV1alpha2Node {
	return &NullableV1alpha2Node{value: val, isSet: true}
}

func (v NullableV1alpha2Node) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha2Node) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


