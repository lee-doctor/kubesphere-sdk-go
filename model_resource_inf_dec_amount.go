/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResourceInfDecAmount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceInfDecAmount{}

// ResourceInfDecAmount struct for ResourceInfDecAmount
type ResourceInfDecAmount struct {
	Dec InfDec `json:"Dec"`
}

type _ResourceInfDecAmount ResourceInfDecAmount

// NewResourceInfDecAmount instantiates a new ResourceInfDecAmount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceInfDecAmount(dec InfDec) *ResourceInfDecAmount {
	this := ResourceInfDecAmount{}
	this.Dec = dec
	return &this
}

// NewResourceInfDecAmountWithDefaults instantiates a new ResourceInfDecAmount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceInfDecAmountWithDefaults() *ResourceInfDecAmount {
	this := ResourceInfDecAmount{}
	return &this
}

// GetDec returns the Dec field value
func (o *ResourceInfDecAmount) GetDec() InfDec {
	if o == nil {
		var ret InfDec
		return ret
	}

	return o.Dec
}

// GetDecOk returns a tuple with the Dec field value
// and a boolean to check if the value has been set.
func (o *ResourceInfDecAmount) GetDecOk() (*InfDec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dec, true
}

// SetDec sets field value
func (o *ResourceInfDecAmount) SetDec(v InfDec) {
	o.Dec = v
}

func (o ResourceInfDecAmount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceInfDecAmount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Dec"] = o.Dec
	return toSerialize, nil
}

func (o *ResourceInfDecAmount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Dec",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourceInfDecAmount := _ResourceInfDecAmount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourceInfDecAmount)

	if err != nil {
		return err
	}

	*o = ResourceInfDecAmount(varResourceInfDecAmount)

	return err
}

type NullableResourceInfDecAmount struct {
	value *ResourceInfDecAmount
	isSet bool
}

func (v NullableResourceInfDecAmount) Get() *ResourceInfDecAmount {
	return v.value
}

func (v *NullableResourceInfDecAmount) Set(val *ResourceInfDecAmount) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceInfDecAmount) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceInfDecAmount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceInfDecAmount(val *ResourceInfDecAmount) *NullableResourceInfDecAmount {
	return &NullableResourceInfDecAmount{value: val, isSet: true}
}

func (v NullableResourceInfDecAmount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceInfDecAmount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


