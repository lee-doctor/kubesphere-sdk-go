/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1History type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1History{}

// V1History struct for V1History
type V1History struct {
	Author *string `json:"author,omitempty"`
	Comment *string `json:"comment,omitempty"`
	Created *string `json:"created,omitempty"`
	CreatedBy *string `json:"created_by,omitempty"`
	EmptyLayer *bool `json:"empty_layer,omitempty"`
}

// NewV1History instantiates a new V1History object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1History() *V1History {
	this := V1History{}
	return &this
}

// NewV1HistoryWithDefaults instantiates a new V1History object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1HistoryWithDefaults() *V1History {
	this := V1History{}
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *V1History) GetAuthor() string {
	if o == nil || IsNil(o.Author) {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1History) GetAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *V1History) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *V1History) SetAuthor(v string) {
	o.Author = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *V1History) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1History) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *V1History) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *V1History) SetComment(v string) {
	o.Comment = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *V1History) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1History) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *V1History) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *V1History) SetCreated(v string) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *V1History) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1History) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *V1History) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *V1History) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetEmptyLayer returns the EmptyLayer field value if set, zero value otherwise.
func (o *V1History) GetEmptyLayer() bool {
	if o == nil || IsNil(o.EmptyLayer) {
		var ret bool
		return ret
	}
	return *o.EmptyLayer
}

// GetEmptyLayerOk returns a tuple with the EmptyLayer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1History) GetEmptyLayerOk() (*bool, bool) {
	if o == nil || IsNil(o.EmptyLayer) {
		return nil, false
	}
	return o.EmptyLayer, true
}

// HasEmptyLayer returns a boolean if a field has been set.
func (o *V1History) HasEmptyLayer() bool {
	if o != nil && !IsNil(o.EmptyLayer) {
		return true
	}

	return false
}

// SetEmptyLayer gets a reference to the given bool and assigns it to the EmptyLayer field.
func (o *V1History) SetEmptyLayer(v bool) {
	o.EmptyLayer = &v
}

func (o V1History) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1History) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["created_by"] = o.CreatedBy
	}
	if !IsNil(o.EmptyLayer) {
		toSerialize["empty_layer"] = o.EmptyLayer
	}
	return toSerialize, nil
}

type NullableV1History struct {
	value *V1History
	isSet bool
}

func (v NullableV1History) Get() *V1History {
	return v.value
}

func (v *NullableV1History) Set(val *V1History) {
	v.value = val
	v.isSet = true
}

func (v NullableV1History) IsSet() bool {
	return v.isSet
}

func (v *NullableV1History) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1History(val *V1History) *NullableV1History {
	return &NullableV1History{value: val, isSet: true}
}

func (v NullableV1History) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1History) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


