/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1alpha3PipelineSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha3PipelineSpec{}

// V1alpha3PipelineSpec struct for V1alpha3PipelineSpec
type V1alpha3PipelineSpec struct {
	MultiBranchPipeline *V1alpha3MultiBranchPipeline `json:"multi_branch_pipeline,omitempty"`
	Pipeline *V1alpha3NoScmPipeline `json:"pipeline,omitempty"`
	// type of devops pipeline, in scm or no scm
	Type string `json:"type"`
}

type _V1alpha3PipelineSpec V1alpha3PipelineSpec

// NewV1alpha3PipelineSpec instantiates a new V1alpha3PipelineSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha3PipelineSpec(type_ string) *V1alpha3PipelineSpec {
	this := V1alpha3PipelineSpec{}
	this.Type = type_
	return &this
}

// NewV1alpha3PipelineSpecWithDefaults instantiates a new V1alpha3PipelineSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha3PipelineSpecWithDefaults() *V1alpha3PipelineSpec {
	this := V1alpha3PipelineSpec{}
	return &this
}

// GetMultiBranchPipeline returns the MultiBranchPipeline field value if set, zero value otherwise.
func (o *V1alpha3PipelineSpec) GetMultiBranchPipeline() V1alpha3MultiBranchPipeline {
	if o == nil || IsNil(o.MultiBranchPipeline) {
		var ret V1alpha3MultiBranchPipeline
		return ret
	}
	return *o.MultiBranchPipeline
}

// GetMultiBranchPipelineOk returns a tuple with the MultiBranchPipeline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3PipelineSpec) GetMultiBranchPipelineOk() (*V1alpha3MultiBranchPipeline, bool) {
	if o == nil || IsNil(o.MultiBranchPipeline) {
		return nil, false
	}
	return o.MultiBranchPipeline, true
}

// HasMultiBranchPipeline returns a boolean if a field has been set.
func (o *V1alpha3PipelineSpec) HasMultiBranchPipeline() bool {
	if o != nil && !IsNil(o.MultiBranchPipeline) {
		return true
	}

	return false
}

// SetMultiBranchPipeline gets a reference to the given V1alpha3MultiBranchPipeline and assigns it to the MultiBranchPipeline field.
func (o *V1alpha3PipelineSpec) SetMultiBranchPipeline(v V1alpha3MultiBranchPipeline) {
	o.MultiBranchPipeline = &v
}

// GetPipeline returns the Pipeline field value if set, zero value otherwise.
func (o *V1alpha3PipelineSpec) GetPipeline() V1alpha3NoScmPipeline {
	if o == nil || IsNil(o.Pipeline) {
		var ret V1alpha3NoScmPipeline
		return ret
	}
	return *o.Pipeline
}

// GetPipelineOk returns a tuple with the Pipeline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha3PipelineSpec) GetPipelineOk() (*V1alpha3NoScmPipeline, bool) {
	if o == nil || IsNil(o.Pipeline) {
		return nil, false
	}
	return o.Pipeline, true
}

// HasPipeline returns a boolean if a field has been set.
func (o *V1alpha3PipelineSpec) HasPipeline() bool {
	if o != nil && !IsNil(o.Pipeline) {
		return true
	}

	return false
}

// SetPipeline gets a reference to the given V1alpha3NoScmPipeline and assigns it to the Pipeline field.
func (o *V1alpha3PipelineSpec) SetPipeline(v V1alpha3NoScmPipeline) {
	o.Pipeline = &v
}

// GetType returns the Type field value
func (o *V1alpha3PipelineSpec) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *V1alpha3PipelineSpec) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *V1alpha3PipelineSpec) SetType(v string) {
	o.Type = v
}

func (o V1alpha3PipelineSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha3PipelineSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MultiBranchPipeline) {
		toSerialize["multi_branch_pipeline"] = o.MultiBranchPipeline
	}
	if !IsNil(o.Pipeline) {
		toSerialize["pipeline"] = o.Pipeline
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *V1alpha3PipelineSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1alpha3PipelineSpec := _V1alpha3PipelineSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1alpha3PipelineSpec)

	if err != nil {
		return err
	}

	*o = V1alpha3PipelineSpec(varV1alpha3PipelineSpec)

	return err
}

type NullableV1alpha3PipelineSpec struct {
	value *V1alpha3PipelineSpec
	isSet bool
}

func (v NullableV1alpha3PipelineSpec) Get() *V1alpha3PipelineSpec {
	return v.value
}

func (v *NullableV1alpha3PipelineSpec) Set(val *V1alpha3PipelineSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha3PipelineSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha3PipelineSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha3PipelineSpec(val *V1alpha3PipelineSpec) *NullableV1alpha3PipelineSpec {
	return &NullableV1alpha3PipelineSpec{value: val, isSet: true}
}

func (v NullableV1alpha3PipelineSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha3PipelineSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


