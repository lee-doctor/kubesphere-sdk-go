/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1PhotonPersistentDiskVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1PhotonPersistentDiskVolumeSource{}

// V1PhotonPersistentDiskVolumeSource Represents a Photon Controller persistent disk resource.
type V1PhotonPersistentDiskVolumeSource struct {
	// fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.
	FsType *string `json:"fsType,omitempty"`
	// pdID is the ID that identifies Photon Controller persistent disk
	PdID string `json:"pdID"`
}

type _V1PhotonPersistentDiskVolumeSource V1PhotonPersistentDiskVolumeSource

// NewV1PhotonPersistentDiskVolumeSource instantiates a new V1PhotonPersistentDiskVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1PhotonPersistentDiskVolumeSource(pdID string) *V1PhotonPersistentDiskVolumeSource {
	this := V1PhotonPersistentDiskVolumeSource{}
	this.PdID = pdID
	return &this
}

// NewV1PhotonPersistentDiskVolumeSourceWithDefaults instantiates a new V1PhotonPersistentDiskVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1PhotonPersistentDiskVolumeSourceWithDefaults() *V1PhotonPersistentDiskVolumeSource {
	this := V1PhotonPersistentDiskVolumeSource{}
	return &this
}

// GetFsType returns the FsType field value if set, zero value otherwise.
func (o *V1PhotonPersistentDiskVolumeSource) GetFsType() string {
	if o == nil || IsNil(o.FsType) {
		var ret string
		return ret
	}
	return *o.FsType
}

// GetFsTypeOk returns a tuple with the FsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PhotonPersistentDiskVolumeSource) GetFsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FsType) {
		return nil, false
	}
	return o.FsType, true
}

// HasFsType returns a boolean if a field has been set.
func (o *V1PhotonPersistentDiskVolumeSource) HasFsType() bool {
	if o != nil && !IsNil(o.FsType) {
		return true
	}

	return false
}

// SetFsType gets a reference to the given string and assigns it to the FsType field.
func (o *V1PhotonPersistentDiskVolumeSource) SetFsType(v string) {
	o.FsType = &v
}

// GetPdID returns the PdID field value
func (o *V1PhotonPersistentDiskVolumeSource) GetPdID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PdID
}

// GetPdIDOk returns a tuple with the PdID field value
// and a boolean to check if the value has been set.
func (o *V1PhotonPersistentDiskVolumeSource) GetPdIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PdID, true
}

// SetPdID sets field value
func (o *V1PhotonPersistentDiskVolumeSource) SetPdID(v string) {
	o.PdID = v
}

func (o V1PhotonPersistentDiskVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1PhotonPersistentDiskVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FsType) {
		toSerialize["fsType"] = o.FsType
	}
	toSerialize["pdID"] = o.PdID
	return toSerialize, nil
}

func (o *V1PhotonPersistentDiskVolumeSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pdID",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1PhotonPersistentDiskVolumeSource := _V1PhotonPersistentDiskVolumeSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1PhotonPersistentDiskVolumeSource)

	if err != nil {
		return err
	}

	*o = V1PhotonPersistentDiskVolumeSource(varV1PhotonPersistentDiskVolumeSource)

	return err
}

type NullableV1PhotonPersistentDiskVolumeSource struct {
	value *V1PhotonPersistentDiskVolumeSource
	isSet bool
}

func (v NullableV1PhotonPersistentDiskVolumeSource) Get() *V1PhotonPersistentDiskVolumeSource {
	return v.value
}

func (v *NullableV1PhotonPersistentDiskVolumeSource) Set(val *V1PhotonPersistentDiskVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1PhotonPersistentDiskVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1PhotonPersistentDiskVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1PhotonPersistentDiskVolumeSource(val *V1PhotonPersistentDiskVolumeSource) *NullableV1PhotonPersistentDiskVolumeSource {
	return &NullableV1PhotonPersistentDiskVolumeSource{value: val, isSet: true}
}

func (v NullableV1PhotonPersistentDiskVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1PhotonPersistentDiskVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


