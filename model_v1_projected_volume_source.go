/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1ProjectedVolumeSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ProjectedVolumeSource{}

// V1ProjectedVolumeSource Represents a projected volume source
type V1ProjectedVolumeSource struct {
	// defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int32 `json:"defaultMode,omitempty"`
	// sources is the list of volume projections
	Sources []V1VolumeProjection `json:"sources"`
}

type _V1ProjectedVolumeSource V1ProjectedVolumeSource

// NewV1ProjectedVolumeSource instantiates a new V1ProjectedVolumeSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ProjectedVolumeSource(sources []V1VolumeProjection) *V1ProjectedVolumeSource {
	this := V1ProjectedVolumeSource{}
	this.Sources = sources
	return &this
}

// NewV1ProjectedVolumeSourceWithDefaults instantiates a new V1ProjectedVolumeSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ProjectedVolumeSourceWithDefaults() *V1ProjectedVolumeSource {
	this := V1ProjectedVolumeSource{}
	return &this
}

// GetDefaultMode returns the DefaultMode field value if set, zero value otherwise.
func (o *V1ProjectedVolumeSource) GetDefaultMode() int32 {
	if o == nil || IsNil(o.DefaultMode) {
		var ret int32
		return ret
	}
	return *o.DefaultMode
}

// GetDefaultModeOk returns a tuple with the DefaultMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ProjectedVolumeSource) GetDefaultModeOk() (*int32, bool) {
	if o == nil || IsNil(o.DefaultMode) {
		return nil, false
	}
	return o.DefaultMode, true
}

// HasDefaultMode returns a boolean if a field has been set.
func (o *V1ProjectedVolumeSource) HasDefaultMode() bool {
	if o != nil && !IsNil(o.DefaultMode) {
		return true
	}

	return false
}

// SetDefaultMode gets a reference to the given int32 and assigns it to the DefaultMode field.
func (o *V1ProjectedVolumeSource) SetDefaultMode(v int32) {
	o.DefaultMode = &v
}

// GetSources returns the Sources field value
func (o *V1ProjectedVolumeSource) GetSources() []V1VolumeProjection {
	if o == nil {
		var ret []V1VolumeProjection
		return ret
	}

	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value
// and a boolean to check if the value has been set.
func (o *V1ProjectedVolumeSource) GetSourcesOk() ([]V1VolumeProjection, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sources, true
}

// SetSources sets field value
func (o *V1ProjectedVolumeSource) SetSources(v []V1VolumeProjection) {
	o.Sources = v
}

func (o V1ProjectedVolumeSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ProjectedVolumeSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultMode) {
		toSerialize["defaultMode"] = o.DefaultMode
	}
	toSerialize["sources"] = o.Sources
	return toSerialize, nil
}

func (o *V1ProjectedVolumeSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sources",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1ProjectedVolumeSource := _V1ProjectedVolumeSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1ProjectedVolumeSource)

	if err != nil {
		return err
	}

	*o = V1ProjectedVolumeSource(varV1ProjectedVolumeSource)

	return err
}

type NullableV1ProjectedVolumeSource struct {
	value *V1ProjectedVolumeSource
	isSet bool
}

func (v NullableV1ProjectedVolumeSource) Get() *V1ProjectedVolumeSource {
	return v.value
}

func (v *NullableV1ProjectedVolumeSource) Set(val *V1ProjectedVolumeSource) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ProjectedVolumeSource) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ProjectedVolumeSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ProjectedVolumeSource(val *V1ProjectedVolumeSource) *NullableV1ProjectedVolumeSource {
	return &NullableV1ProjectedVolumeSource{value: val, isSet: true}
}

func (v NullableV1ProjectedVolumeSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ProjectedVolumeSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


