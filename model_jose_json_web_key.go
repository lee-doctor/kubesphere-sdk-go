/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JoseJSONWebKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JoseJSONWebKey{}

// JoseJSONWebKey struct for JoseJSONWebKey
type JoseJSONWebKey struct {
	Algorithm string `json:"Algorithm"`
	CertificateThumbprintSHA1 string `json:"CertificateThumbprintSHA1"`
	CertificateThumbprintSHA256 string `json:"CertificateThumbprintSHA256"`
	Certificates []X509Certificate `json:"Certificates"`
	CertificatesURL UrlURL `json:"CertificatesURL"`
	Key map[string]interface{} `json:"Key"`
	KeyID string `json:"KeyID"`
	Use string `json:"Use"`
}

type _JoseJSONWebKey JoseJSONWebKey

// NewJoseJSONWebKey instantiates a new JoseJSONWebKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJoseJSONWebKey(algorithm string, certificateThumbprintSHA1 string, certificateThumbprintSHA256 string, certificates []X509Certificate, certificatesURL UrlURL, key map[string]interface{}, keyID string, use string) *JoseJSONWebKey {
	this := JoseJSONWebKey{}
	this.Algorithm = algorithm
	this.CertificateThumbprintSHA1 = certificateThumbprintSHA1
	this.CertificateThumbprintSHA256 = certificateThumbprintSHA256
	this.Certificates = certificates
	this.CertificatesURL = certificatesURL
	this.Key = key
	this.KeyID = keyID
	this.Use = use
	return &this
}

// NewJoseJSONWebKeyWithDefaults instantiates a new JoseJSONWebKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJoseJSONWebKeyWithDefaults() *JoseJSONWebKey {
	this := JoseJSONWebKey{}
	return &this
}

// GetAlgorithm returns the Algorithm field value
func (o *JoseJSONWebKey) GetAlgorithm() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value
// and a boolean to check if the value has been set.
func (o *JoseJSONWebKey) GetAlgorithmOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Algorithm, true
}

// SetAlgorithm sets field value
func (o *JoseJSONWebKey) SetAlgorithm(v string) {
	o.Algorithm = v
}

// GetCertificateThumbprintSHA1 returns the CertificateThumbprintSHA1 field value
func (o *JoseJSONWebKey) GetCertificateThumbprintSHA1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertificateThumbprintSHA1
}

// GetCertificateThumbprintSHA1Ok returns a tuple with the CertificateThumbprintSHA1 field value
// and a boolean to check if the value has been set.
func (o *JoseJSONWebKey) GetCertificateThumbprintSHA1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateThumbprintSHA1, true
}

// SetCertificateThumbprintSHA1 sets field value
func (o *JoseJSONWebKey) SetCertificateThumbprintSHA1(v string) {
	o.CertificateThumbprintSHA1 = v
}

// GetCertificateThumbprintSHA256 returns the CertificateThumbprintSHA256 field value
func (o *JoseJSONWebKey) GetCertificateThumbprintSHA256() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertificateThumbprintSHA256
}

// GetCertificateThumbprintSHA256Ok returns a tuple with the CertificateThumbprintSHA256 field value
// and a boolean to check if the value has been set.
func (o *JoseJSONWebKey) GetCertificateThumbprintSHA256Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateThumbprintSHA256, true
}

// SetCertificateThumbprintSHA256 sets field value
func (o *JoseJSONWebKey) SetCertificateThumbprintSHA256(v string) {
	o.CertificateThumbprintSHA256 = v
}

// GetCertificates returns the Certificates field value
func (o *JoseJSONWebKey) GetCertificates() []X509Certificate {
	if o == nil {
		var ret []X509Certificate
		return ret
	}

	return o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value
// and a boolean to check if the value has been set.
func (o *JoseJSONWebKey) GetCertificatesOk() ([]X509Certificate, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificates, true
}

// SetCertificates sets field value
func (o *JoseJSONWebKey) SetCertificates(v []X509Certificate) {
	o.Certificates = v
}

// GetCertificatesURL returns the CertificatesURL field value
func (o *JoseJSONWebKey) GetCertificatesURL() UrlURL {
	if o == nil {
		var ret UrlURL
		return ret
	}

	return o.CertificatesURL
}

// GetCertificatesURLOk returns a tuple with the CertificatesURL field value
// and a boolean to check if the value has been set.
func (o *JoseJSONWebKey) GetCertificatesURLOk() (*UrlURL, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificatesURL, true
}

// SetCertificatesURL sets field value
func (o *JoseJSONWebKey) SetCertificatesURL(v UrlURL) {
	o.CertificatesURL = v
}

// GetKey returns the Key field value
func (o *JoseJSONWebKey) GetKey() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *JoseJSONWebKey) GetKeyOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Key, true
}

// SetKey sets field value
func (o *JoseJSONWebKey) SetKey(v map[string]interface{}) {
	o.Key = v
}

// GetKeyID returns the KeyID field value
func (o *JoseJSONWebKey) GetKeyID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KeyID
}

// GetKeyIDOk returns a tuple with the KeyID field value
// and a boolean to check if the value has been set.
func (o *JoseJSONWebKey) GetKeyIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyID, true
}

// SetKeyID sets field value
func (o *JoseJSONWebKey) SetKeyID(v string) {
	o.KeyID = v
}

// GetUse returns the Use field value
func (o *JoseJSONWebKey) GetUse() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Use
}

// GetUseOk returns a tuple with the Use field value
// and a boolean to check if the value has been set.
func (o *JoseJSONWebKey) GetUseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Use, true
}

// SetUse sets field value
func (o *JoseJSONWebKey) SetUse(v string) {
	o.Use = v
}

func (o JoseJSONWebKey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JoseJSONWebKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Algorithm"] = o.Algorithm
	toSerialize["CertificateThumbprintSHA1"] = o.CertificateThumbprintSHA1
	toSerialize["CertificateThumbprintSHA256"] = o.CertificateThumbprintSHA256
	toSerialize["Certificates"] = o.Certificates
	toSerialize["CertificatesURL"] = o.CertificatesURL
	toSerialize["Key"] = o.Key
	toSerialize["KeyID"] = o.KeyID
	toSerialize["Use"] = o.Use
	return toSerialize, nil
}

func (o *JoseJSONWebKey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Algorithm",
		"CertificateThumbprintSHA1",
		"CertificateThumbprintSHA256",
		"Certificates",
		"CertificatesURL",
		"Key",
		"KeyID",
		"Use",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJoseJSONWebKey := _JoseJSONWebKey{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJoseJSONWebKey)

	if err != nil {
		return err
	}

	*o = JoseJSONWebKey(varJoseJSONWebKey)

	return err
}

type NullableJoseJSONWebKey struct {
	value *JoseJSONWebKey
	isSet bool
}

func (v NullableJoseJSONWebKey) Get() *JoseJSONWebKey {
	return v.value
}

func (v *NullableJoseJSONWebKey) Set(val *JoseJSONWebKey) {
	v.value = val
	v.isSet = true
}

func (v NullableJoseJSONWebKey) IsSet() bool {
	return v.isSet
}

func (v *NullableJoseJSONWebKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJoseJSONWebKey(val *JoseJSONWebKey) *NullableJoseJSONWebKey {
	return &NullableJoseJSONWebKey{value: val, isSet: true}
}

func (v NullableJoseJSONWebKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJoseJSONWebKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


