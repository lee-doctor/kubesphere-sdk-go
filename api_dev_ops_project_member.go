/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DevOpsProjectMemberAPIService DevOpsProjectMemberAPI service
type DevOpsProjectMemberAPIService service

type ApiCreateNamespaceMembersRequest struct {
	ctx context.Context
	ApiService *DevOpsProjectMemberAPIService
	devops string
	body *[]V1alpha2Member
}

func (r ApiCreateNamespaceMembersRequest) Body(body []V1alpha2Member) ApiCreateNamespaceMembersRequest {
	r.body = &body
	return r
}

func (r ApiCreateNamespaceMembersRequest) Execute() ([]V1alpha2Member, *http.Response, error) {
	return r.ApiService.CreateNamespaceMembersExecute(r)
}

/*
CreateNamespaceMembers Add members to the DevOps project in bulk.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param devops devops project name
 @return ApiCreateNamespaceMembersRequest
*/
func (a *DevOpsProjectMemberAPIService) CreateNamespaceMembers(ctx context.Context, devops string) ApiCreateNamespaceMembersRequest {
	return ApiCreateNamespaceMembersRequest{
		ApiService: a,
		ctx: ctx,
		devops: devops,
	}
}

// Execute executes the request
//  @return []V1alpha2Member
func (a *DevOpsProjectMemberAPIService) CreateNamespaceMembersExecute(r ApiCreateNamespaceMembersRequest) ([]V1alpha2Member, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []V1alpha2Member
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevOpsProjectMemberAPIService.CreateNamespaceMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/iam.kubesphere.io/v1alpha2/devops/{devops}/members"
	localVarPath = strings.Replace(localVarPath, "{"+"devops"+"}", url.PathEscape(parameterValueToString(r.devops, "devops")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDescribeDevOpsProjectNamespaceMemberRequest struct {
	ctx context.Context
	ApiService *DevOpsProjectMemberAPIService
	devops string
	member string
}

func (r ApiDescribeDevOpsProjectNamespaceMemberRequest) Execute() (*V1alpha2User, *http.Response, error) {
	return r.ApiService.DescribeDevOpsProjectNamespaceMemberExecute(r)
}

/*
DescribeDevOpsProjectNamespaceMember Retrieve devops project member details.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param devops devops project name
 @param member devops project member's username
 @return ApiDescribeDevOpsProjectNamespaceMemberRequest
*/
func (a *DevOpsProjectMemberAPIService) DescribeDevOpsProjectNamespaceMember(ctx context.Context, devops string, member string) ApiDescribeDevOpsProjectNamespaceMemberRequest {
	return ApiDescribeDevOpsProjectNamespaceMemberRequest{
		ApiService: a,
		ctx: ctx,
		devops: devops,
		member: member,
	}
}

// Execute executes the request
//  @return V1alpha2User
func (a *DevOpsProjectMemberAPIService) DescribeDevOpsProjectNamespaceMemberExecute(r ApiDescribeDevOpsProjectNamespaceMemberRequest) (*V1alpha2User, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1alpha2User
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevOpsProjectMemberAPIService.DescribeDevOpsProjectNamespaceMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/iam.kubesphere.io/v1alpha2/devops/{devops}/members/{member}"
	localVarPath = strings.Replace(localVarPath, "{"+"devops"+"}", url.PathEscape(parameterValueToString(r.devops, "devops")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member"+"}", url.PathEscape(parameterValueToString(r.member, "member")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAllNamespaceMembersRequest struct {
	ctx context.Context
	ApiService *DevOpsProjectMemberAPIService
	devops string
}

func (r ApiListAllNamespaceMembersRequest) Execute() (*ApiListResult, *http.Response, error) {
	return r.ApiService.ListAllNamespaceMembersExecute(r)
}

/*
ListAllNamespaceMembers List all members in the specified devops project.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param devops devops project name
 @return ApiListAllNamespaceMembersRequest
*/
func (a *DevOpsProjectMemberAPIService) ListAllNamespaceMembers(ctx context.Context, devops string) ApiListAllNamespaceMembersRequest {
	return ApiListAllNamespaceMembersRequest{
		ApiService: a,
		ctx: ctx,
		devops: devops,
	}
}

// Execute executes the request
//  @return ApiListResult
func (a *DevOpsProjectMemberAPIService) ListAllNamespaceMembersExecute(r ApiListAllNamespaceMembersRequest) (*ApiListResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiListResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevOpsProjectMemberAPIService.ListAllNamespaceMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/iam.kubesphere.io/v1alpha2/devops/{devops}/members"
	localVarPath = strings.Replace(localVarPath, "{"+"devops"+"}", url.PathEscape(parameterValueToString(r.devops, "devops")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveDevOpsNamespaceMemberRequest struct {
	ctx context.Context
	ApiService *DevOpsProjectMemberAPIService
	devops string
	member string
}

func (r ApiRemoveDevOpsNamespaceMemberRequest) Execute() (*ErrorsError, *http.Response, error) {
	return r.ApiService.RemoveDevOpsNamespaceMemberExecute(r)
}

/*
RemoveDevOpsNamespaceMember Delete a member from the DevOps project.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param devops devops project name
 @param member devops project member's username
 @return ApiRemoveDevOpsNamespaceMemberRequest
*/
func (a *DevOpsProjectMemberAPIService) RemoveDevOpsNamespaceMember(ctx context.Context, devops string, member string) ApiRemoveDevOpsNamespaceMemberRequest {
	return ApiRemoveDevOpsNamespaceMemberRequest{
		ApiService: a,
		ctx: ctx,
		devops: devops,
		member: member,
	}
}

// Execute executes the request
//  @return ErrorsError
func (a *DevOpsProjectMemberAPIService) RemoveDevOpsNamespaceMemberExecute(r ApiRemoveDevOpsNamespaceMemberRequest) (*ErrorsError, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ErrorsError
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevOpsProjectMemberAPIService.RemoveDevOpsNamespaceMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/iam.kubesphere.io/v1alpha2/devops/{devops}/members/{member}"
	localVarPath = strings.Replace(localVarPath, "{"+"devops"+"}", url.PathEscape(parameterValueToString(r.devops, "devops")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member"+"}", url.PathEscape(parameterValueToString(r.member, "member")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDevOpsNamespaceMemberRequest struct {
	ctx context.Context
	ApiService *DevOpsProjectMemberAPIService
	devops string
	member string
	body *V1alpha2Member
}

func (r ApiUpdateDevOpsNamespaceMemberRequest) Body(body V1alpha2Member) ApiUpdateDevOpsNamespaceMemberRequest {
	r.body = &body
	return r
}

func (r ApiUpdateDevOpsNamespaceMemberRequest) Execute() (*V1alpha2Member, *http.Response, error) {
	return r.ApiService.UpdateDevOpsNamespaceMemberExecute(r)
}

/*
UpdateDevOpsNamespaceMember Update the role bind of the member.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param devops devops project name
 @param member devops project member's username
 @return ApiUpdateDevOpsNamespaceMemberRequest
*/
func (a *DevOpsProjectMemberAPIService) UpdateDevOpsNamespaceMember(ctx context.Context, devops string, member string) ApiUpdateDevOpsNamespaceMemberRequest {
	return ApiUpdateDevOpsNamespaceMemberRequest{
		ApiService: a,
		ctx: ctx,
		devops: devops,
		member: member,
	}
}

// Execute executes the request
//  @return V1alpha2Member
func (a *DevOpsProjectMemberAPIService) UpdateDevOpsNamespaceMemberExecute(r ApiUpdateDevOpsNamespaceMemberRequest) (*V1alpha2Member, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *V1alpha2Member
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevOpsProjectMemberAPIService.UpdateDevOpsNamespaceMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/iam.kubesphere.io/v1alpha2/devops/{devops}/members/{member}"
	localVarPath = strings.Replace(localVarPath, "{"+"devops"+"}", url.PathEscape(parameterValueToString(r.devops, "devops")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member"+"}", url.PathEscape(parameterValueToString(r.member, "member")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
