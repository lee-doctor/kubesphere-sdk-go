/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1ContainerResizePolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ContainerResizePolicy{}

// V1ContainerResizePolicy ContainerResizePolicy represents resource resize policy for the container.
type V1ContainerResizePolicy struct {
	// Name of the resource to which this resource resize policy applies. Supported values: cpu, memory.
	ResourceName string `json:"resourceName"`
	// Restart policy to apply when specified resource is resized. If not specified, it defaults to NotRequired.
	RestartPolicy string `json:"restartPolicy"`
}

type _V1ContainerResizePolicy V1ContainerResizePolicy

// NewV1ContainerResizePolicy instantiates a new V1ContainerResizePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ContainerResizePolicy(resourceName string, restartPolicy string) *V1ContainerResizePolicy {
	this := V1ContainerResizePolicy{}
	this.ResourceName = resourceName
	this.RestartPolicy = restartPolicy
	return &this
}

// NewV1ContainerResizePolicyWithDefaults instantiates a new V1ContainerResizePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ContainerResizePolicyWithDefaults() *V1ContainerResizePolicy {
	this := V1ContainerResizePolicy{}
	return &this
}

// GetResourceName returns the ResourceName field value
func (o *V1ContainerResizePolicy) GetResourceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceName
}

// GetResourceNameOk returns a tuple with the ResourceName field value
// and a boolean to check if the value has been set.
func (o *V1ContainerResizePolicy) GetResourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceName, true
}

// SetResourceName sets field value
func (o *V1ContainerResizePolicy) SetResourceName(v string) {
	o.ResourceName = v
}

// GetRestartPolicy returns the RestartPolicy field value
func (o *V1ContainerResizePolicy) GetRestartPolicy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RestartPolicy
}

// GetRestartPolicyOk returns a tuple with the RestartPolicy field value
// and a boolean to check if the value has been set.
func (o *V1ContainerResizePolicy) GetRestartPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestartPolicy, true
}

// SetRestartPolicy sets field value
func (o *V1ContainerResizePolicy) SetRestartPolicy(v string) {
	o.RestartPolicy = v
}

func (o V1ContainerResizePolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ContainerResizePolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resourceName"] = o.ResourceName
	toSerialize["restartPolicy"] = o.RestartPolicy
	return toSerialize, nil
}

func (o *V1ContainerResizePolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resourceName",
		"restartPolicy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1ContainerResizePolicy := _V1ContainerResizePolicy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1ContainerResizePolicy)

	if err != nil {
		return err
	}

	*o = V1ContainerResizePolicy(varV1ContainerResizePolicy)

	return err
}

type NullableV1ContainerResizePolicy struct {
	value *V1ContainerResizePolicy
	isSet bool
}

func (v NullableV1ContainerResizePolicy) Get() *V1ContainerResizePolicy {
	return v.value
}

func (v *NullableV1ContainerResizePolicy) Set(val *V1ContainerResizePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ContainerResizePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ContainerResizePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ContainerResizePolicy(val *V1ContainerResizePolicy) *NullableV1ContainerResizePolicy {
	return &NullableV1ContainerResizePolicy{value: val, isSet: true}
}

func (v NullableV1ContainerResizePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ContainerResizePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


