/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1beta1GenericPlacement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1beta1GenericPlacement{}

// V1beta1GenericPlacement struct for V1beta1GenericPlacement
type V1beta1GenericPlacement struct {
	ClusterSelector *V1LabelSelector `json:"clusterSelector,omitempty"`
	Clusters []V1beta1GenericClusterReference `json:"clusters,omitempty"`
}

// NewV1beta1GenericPlacement instantiates a new V1beta1GenericPlacement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1beta1GenericPlacement() *V1beta1GenericPlacement {
	this := V1beta1GenericPlacement{}
	return &this
}

// NewV1beta1GenericPlacementWithDefaults instantiates a new V1beta1GenericPlacement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1beta1GenericPlacementWithDefaults() *V1beta1GenericPlacement {
	this := V1beta1GenericPlacement{}
	return &this
}

// GetClusterSelector returns the ClusterSelector field value if set, zero value otherwise.
func (o *V1beta1GenericPlacement) GetClusterSelector() V1LabelSelector {
	if o == nil || IsNil(o.ClusterSelector) {
		var ret V1LabelSelector
		return ret
	}
	return *o.ClusterSelector
}

// GetClusterSelectorOk returns a tuple with the ClusterSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1GenericPlacement) GetClusterSelectorOk() (*V1LabelSelector, bool) {
	if o == nil || IsNil(o.ClusterSelector) {
		return nil, false
	}
	return o.ClusterSelector, true
}

// HasClusterSelector returns a boolean if a field has been set.
func (o *V1beta1GenericPlacement) HasClusterSelector() bool {
	if o != nil && !IsNil(o.ClusterSelector) {
		return true
	}

	return false
}

// SetClusterSelector gets a reference to the given V1LabelSelector and assigns it to the ClusterSelector field.
func (o *V1beta1GenericPlacement) SetClusterSelector(v V1LabelSelector) {
	o.ClusterSelector = &v
}

// GetClusters returns the Clusters field value if set, zero value otherwise.
func (o *V1beta1GenericPlacement) GetClusters() []V1beta1GenericClusterReference {
	if o == nil || IsNil(o.Clusters) {
		var ret []V1beta1GenericClusterReference
		return ret
	}
	return o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1beta1GenericPlacement) GetClustersOk() ([]V1beta1GenericClusterReference, bool) {
	if o == nil || IsNil(o.Clusters) {
		return nil, false
	}
	return o.Clusters, true
}

// HasClusters returns a boolean if a field has been set.
func (o *V1beta1GenericPlacement) HasClusters() bool {
	if o != nil && !IsNil(o.Clusters) {
		return true
	}

	return false
}

// SetClusters gets a reference to the given []V1beta1GenericClusterReference and assigns it to the Clusters field.
func (o *V1beta1GenericPlacement) SetClusters(v []V1beta1GenericClusterReference) {
	o.Clusters = v
}

func (o V1beta1GenericPlacement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1beta1GenericPlacement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClusterSelector) {
		toSerialize["clusterSelector"] = o.ClusterSelector
	}
	if !IsNil(o.Clusters) {
		toSerialize["clusters"] = o.Clusters
	}
	return toSerialize, nil
}

type NullableV1beta1GenericPlacement struct {
	value *V1beta1GenericPlacement
	isSet bool
}

func (v NullableV1beta1GenericPlacement) Get() *V1beta1GenericPlacement {
	return v.value
}

func (v *NullableV1beta1GenericPlacement) Set(val *V1beta1GenericPlacement) {
	v.value = val
	v.isSet = true
}

func (v NullableV1beta1GenericPlacement) IsSet() bool {
	return v.isSet
}

func (v *NullableV1beta1GenericPlacement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1beta1GenericPlacement(val *V1beta1GenericPlacement) *NullableV1beta1GenericPlacement {
	return &NullableV1beta1GenericPlacement{value: val, isSet: true}
}

func (v NullableV1beta1GenericPlacement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1beta1GenericPlacement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


