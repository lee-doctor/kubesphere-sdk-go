/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1DaemonSetStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1DaemonSetStatus{}

// V1DaemonSetStatus DaemonSetStatus represents the current status of a daemon set.
type V1DaemonSetStatus struct {
	// Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
	CollisionCount *int32 `json:"collisionCount,omitempty"`
	// Represents the latest available observations of a DaemonSet's current state.
	Conditions []V1DaemonSetCondition `json:"conditions,omitempty"`
	// The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	CurrentNumberScheduled int32 `json:"currentNumberScheduled"`
	// The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	DesiredNumberScheduled int32 `json:"desiredNumberScheduled"`
	// The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
	NumberAvailable *int32 `json:"numberAvailable,omitempty"`
	// The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
	NumberMisscheduled int32 `json:"numberMisscheduled"`
	// The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
	NumberReady int32 `json:"numberReady"`
	// The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
	NumberUnavailable *int32 `json:"numberUnavailable,omitempty"`
	// The most recent generation observed by the daemon set controller.
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`
	// The total number of nodes that are running updated daemon pod
	UpdatedNumberScheduled *int32 `json:"updatedNumberScheduled,omitempty"`
}

type _V1DaemonSetStatus V1DaemonSetStatus

// NewV1DaemonSetStatus instantiates a new V1DaemonSetStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DaemonSetStatus(currentNumberScheduled int32, desiredNumberScheduled int32, numberMisscheduled int32, numberReady int32) *V1DaemonSetStatus {
	this := V1DaemonSetStatus{}
	this.CurrentNumberScheduled = currentNumberScheduled
	this.DesiredNumberScheduled = desiredNumberScheduled
	this.NumberMisscheduled = numberMisscheduled
	this.NumberReady = numberReady
	return &this
}

// NewV1DaemonSetStatusWithDefaults instantiates a new V1DaemonSetStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DaemonSetStatusWithDefaults() *V1DaemonSetStatus {
	this := V1DaemonSetStatus{}
	return &this
}

// GetCollisionCount returns the CollisionCount field value if set, zero value otherwise.
func (o *V1DaemonSetStatus) GetCollisionCount() int32 {
	if o == nil || IsNil(o.CollisionCount) {
		var ret int32
		return ret
	}
	return *o.CollisionCount
}

// GetCollisionCountOk returns a tuple with the CollisionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DaemonSetStatus) GetCollisionCountOk() (*int32, bool) {
	if o == nil || IsNil(o.CollisionCount) {
		return nil, false
	}
	return o.CollisionCount, true
}

// HasCollisionCount returns a boolean if a field has been set.
func (o *V1DaemonSetStatus) HasCollisionCount() bool {
	if o != nil && !IsNil(o.CollisionCount) {
		return true
	}

	return false
}

// SetCollisionCount gets a reference to the given int32 and assigns it to the CollisionCount field.
func (o *V1DaemonSetStatus) SetCollisionCount(v int32) {
	o.CollisionCount = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *V1DaemonSetStatus) GetConditions() []V1DaemonSetCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []V1DaemonSetCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DaemonSetStatus) GetConditionsOk() ([]V1DaemonSetCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *V1DaemonSetStatus) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []V1DaemonSetCondition and assigns it to the Conditions field.
func (o *V1DaemonSetStatus) SetConditions(v []V1DaemonSetCondition) {
	o.Conditions = v
}

// GetCurrentNumberScheduled returns the CurrentNumberScheduled field value
func (o *V1DaemonSetStatus) GetCurrentNumberScheduled() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CurrentNumberScheduled
}

// GetCurrentNumberScheduledOk returns a tuple with the CurrentNumberScheduled field value
// and a boolean to check if the value has been set.
func (o *V1DaemonSetStatus) GetCurrentNumberScheduledOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentNumberScheduled, true
}

// SetCurrentNumberScheduled sets field value
func (o *V1DaemonSetStatus) SetCurrentNumberScheduled(v int32) {
	o.CurrentNumberScheduled = v
}

// GetDesiredNumberScheduled returns the DesiredNumberScheduled field value
func (o *V1DaemonSetStatus) GetDesiredNumberScheduled() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DesiredNumberScheduled
}

// GetDesiredNumberScheduledOk returns a tuple with the DesiredNumberScheduled field value
// and a boolean to check if the value has been set.
func (o *V1DaemonSetStatus) GetDesiredNumberScheduledOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DesiredNumberScheduled, true
}

// SetDesiredNumberScheduled sets field value
func (o *V1DaemonSetStatus) SetDesiredNumberScheduled(v int32) {
	o.DesiredNumberScheduled = v
}

// GetNumberAvailable returns the NumberAvailable field value if set, zero value otherwise.
func (o *V1DaemonSetStatus) GetNumberAvailable() int32 {
	if o == nil || IsNil(o.NumberAvailable) {
		var ret int32
		return ret
	}
	return *o.NumberAvailable
}

// GetNumberAvailableOk returns a tuple with the NumberAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DaemonSetStatus) GetNumberAvailableOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberAvailable) {
		return nil, false
	}
	return o.NumberAvailable, true
}

// HasNumberAvailable returns a boolean if a field has been set.
func (o *V1DaemonSetStatus) HasNumberAvailable() bool {
	if o != nil && !IsNil(o.NumberAvailable) {
		return true
	}

	return false
}

// SetNumberAvailable gets a reference to the given int32 and assigns it to the NumberAvailable field.
func (o *V1DaemonSetStatus) SetNumberAvailable(v int32) {
	o.NumberAvailable = &v
}

// GetNumberMisscheduled returns the NumberMisscheduled field value
func (o *V1DaemonSetStatus) GetNumberMisscheduled() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberMisscheduled
}

// GetNumberMisscheduledOk returns a tuple with the NumberMisscheduled field value
// and a boolean to check if the value has been set.
func (o *V1DaemonSetStatus) GetNumberMisscheduledOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberMisscheduled, true
}

// SetNumberMisscheduled sets field value
func (o *V1DaemonSetStatus) SetNumberMisscheduled(v int32) {
	o.NumberMisscheduled = v
}

// GetNumberReady returns the NumberReady field value
func (o *V1DaemonSetStatus) GetNumberReady() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberReady
}

// GetNumberReadyOk returns a tuple with the NumberReady field value
// and a boolean to check if the value has been set.
func (o *V1DaemonSetStatus) GetNumberReadyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberReady, true
}

// SetNumberReady sets field value
func (o *V1DaemonSetStatus) SetNumberReady(v int32) {
	o.NumberReady = v
}

// GetNumberUnavailable returns the NumberUnavailable field value if set, zero value otherwise.
func (o *V1DaemonSetStatus) GetNumberUnavailable() int32 {
	if o == nil || IsNil(o.NumberUnavailable) {
		var ret int32
		return ret
	}
	return *o.NumberUnavailable
}

// GetNumberUnavailableOk returns a tuple with the NumberUnavailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DaemonSetStatus) GetNumberUnavailableOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberUnavailable) {
		return nil, false
	}
	return o.NumberUnavailable, true
}

// HasNumberUnavailable returns a boolean if a field has been set.
func (o *V1DaemonSetStatus) HasNumberUnavailable() bool {
	if o != nil && !IsNil(o.NumberUnavailable) {
		return true
	}

	return false
}

// SetNumberUnavailable gets a reference to the given int32 and assigns it to the NumberUnavailable field.
func (o *V1DaemonSetStatus) SetNumberUnavailable(v int32) {
	o.NumberUnavailable = &v
}

// GetObservedGeneration returns the ObservedGeneration field value if set, zero value otherwise.
func (o *V1DaemonSetStatus) GetObservedGeneration() int64 {
	if o == nil || IsNil(o.ObservedGeneration) {
		var ret int64
		return ret
	}
	return *o.ObservedGeneration
}

// GetObservedGenerationOk returns a tuple with the ObservedGeneration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DaemonSetStatus) GetObservedGenerationOk() (*int64, bool) {
	if o == nil || IsNil(o.ObservedGeneration) {
		return nil, false
	}
	return o.ObservedGeneration, true
}

// HasObservedGeneration returns a boolean if a field has been set.
func (o *V1DaemonSetStatus) HasObservedGeneration() bool {
	if o != nil && !IsNil(o.ObservedGeneration) {
		return true
	}

	return false
}

// SetObservedGeneration gets a reference to the given int64 and assigns it to the ObservedGeneration field.
func (o *V1DaemonSetStatus) SetObservedGeneration(v int64) {
	o.ObservedGeneration = &v
}

// GetUpdatedNumberScheduled returns the UpdatedNumberScheduled field value if set, zero value otherwise.
func (o *V1DaemonSetStatus) GetUpdatedNumberScheduled() int32 {
	if o == nil || IsNil(o.UpdatedNumberScheduled) {
		var ret int32
		return ret
	}
	return *o.UpdatedNumberScheduled
}

// GetUpdatedNumberScheduledOk returns a tuple with the UpdatedNumberScheduled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DaemonSetStatus) GetUpdatedNumberScheduledOk() (*int32, bool) {
	if o == nil || IsNil(o.UpdatedNumberScheduled) {
		return nil, false
	}
	return o.UpdatedNumberScheduled, true
}

// HasUpdatedNumberScheduled returns a boolean if a field has been set.
func (o *V1DaemonSetStatus) HasUpdatedNumberScheduled() bool {
	if o != nil && !IsNil(o.UpdatedNumberScheduled) {
		return true
	}

	return false
}

// SetUpdatedNumberScheduled gets a reference to the given int32 and assigns it to the UpdatedNumberScheduled field.
func (o *V1DaemonSetStatus) SetUpdatedNumberScheduled(v int32) {
	o.UpdatedNumberScheduled = &v
}

func (o V1DaemonSetStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1DaemonSetStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CollisionCount) {
		toSerialize["collisionCount"] = o.CollisionCount
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	toSerialize["currentNumberScheduled"] = o.CurrentNumberScheduled
	toSerialize["desiredNumberScheduled"] = o.DesiredNumberScheduled
	if !IsNil(o.NumberAvailable) {
		toSerialize["numberAvailable"] = o.NumberAvailable
	}
	toSerialize["numberMisscheduled"] = o.NumberMisscheduled
	toSerialize["numberReady"] = o.NumberReady
	if !IsNil(o.NumberUnavailable) {
		toSerialize["numberUnavailable"] = o.NumberUnavailable
	}
	if !IsNil(o.ObservedGeneration) {
		toSerialize["observedGeneration"] = o.ObservedGeneration
	}
	if !IsNil(o.UpdatedNumberScheduled) {
		toSerialize["updatedNumberScheduled"] = o.UpdatedNumberScheduled
	}
	return toSerialize, nil
}

func (o *V1DaemonSetStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currentNumberScheduled",
		"desiredNumberScheduled",
		"numberMisscheduled",
		"numberReady",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1DaemonSetStatus := _V1DaemonSetStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1DaemonSetStatus)

	if err != nil {
		return err
	}

	*o = V1DaemonSetStatus(varV1DaemonSetStatus)

	return err
}

type NullableV1DaemonSetStatus struct {
	value *V1DaemonSetStatus
	isSet bool
}

func (v NullableV1DaemonSetStatus) Get() *V1DaemonSetStatus {
	return v.value
}

func (v *NullableV1DaemonSetStatus) Set(val *V1DaemonSetStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DaemonSetStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DaemonSetStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DaemonSetStatus(val *V1DaemonSetStatus) *NullableV1DaemonSetStatus {
	return &NullableV1DaemonSetStatus{value: val, isSet: true}
}

func (v NullableV1DaemonSetStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DaemonSetStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


