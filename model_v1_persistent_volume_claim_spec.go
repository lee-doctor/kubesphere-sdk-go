/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1PersistentVolumeClaimSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1PersistentVolumeClaimSpec{}

// V1PersistentVolumeClaimSpec PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
type V1PersistentVolumeClaimSpec struct {
	// accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `json:"accessModes,omitempty"`
	DataSource *V1TypedLocalObjectReference `json:"dataSource,omitempty"`
	DataSourceRef *V1TypedObjectReference `json:"dataSourceRef,omitempty"`
	Resources *V1VolumeResourceRequirements `json:"resources,omitempty"`
	Selector *V1LabelSelector `json:"selector,omitempty"`
	// storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `json:"storageClassName,omitempty"`
	// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim. If specified, the CSI driver will create or update the volume with the attributes defined in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName, it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass will be applied to the claim but it's not allowed to reset this field to empty string once it is set. If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass will be set by the persistentvolume controller if it exists. If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass (Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.
	VolumeAttributesClassName *string `json:"volumeAttributesClassName,omitempty"`
	// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
	VolumeMode *string `json:"volumeMode,omitempty"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `json:"volumeName,omitempty"`
}

// NewV1PersistentVolumeClaimSpec instantiates a new V1PersistentVolumeClaimSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1PersistentVolumeClaimSpec() *V1PersistentVolumeClaimSpec {
	this := V1PersistentVolumeClaimSpec{}
	return &this
}

// NewV1PersistentVolumeClaimSpecWithDefaults instantiates a new V1PersistentVolumeClaimSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1PersistentVolumeClaimSpecWithDefaults() *V1PersistentVolumeClaimSpec {
	this := V1PersistentVolumeClaimSpec{}
	return &this
}

// GetAccessModes returns the AccessModes field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimSpec) GetAccessModes() []string {
	if o == nil || IsNil(o.AccessModes) {
		var ret []string
		return ret
	}
	return o.AccessModes
}

// GetAccessModesOk returns a tuple with the AccessModes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimSpec) GetAccessModesOk() ([]string, bool) {
	if o == nil || IsNil(o.AccessModes) {
		return nil, false
	}
	return o.AccessModes, true
}

// HasAccessModes returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimSpec) HasAccessModes() bool {
	if o != nil && !IsNil(o.AccessModes) {
		return true
	}

	return false
}

// SetAccessModes gets a reference to the given []string and assigns it to the AccessModes field.
func (o *V1PersistentVolumeClaimSpec) SetAccessModes(v []string) {
	o.AccessModes = v
}

// GetDataSource returns the DataSource field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimSpec) GetDataSource() V1TypedLocalObjectReference {
	if o == nil || IsNil(o.DataSource) {
		var ret V1TypedLocalObjectReference
		return ret
	}
	return *o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimSpec) GetDataSourceOk() (*V1TypedLocalObjectReference, bool) {
	if o == nil || IsNil(o.DataSource) {
		return nil, false
	}
	return o.DataSource, true
}

// HasDataSource returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimSpec) HasDataSource() bool {
	if o != nil && !IsNil(o.DataSource) {
		return true
	}

	return false
}

// SetDataSource gets a reference to the given V1TypedLocalObjectReference and assigns it to the DataSource field.
func (o *V1PersistentVolumeClaimSpec) SetDataSource(v V1TypedLocalObjectReference) {
	o.DataSource = &v
}

// GetDataSourceRef returns the DataSourceRef field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimSpec) GetDataSourceRef() V1TypedObjectReference {
	if o == nil || IsNil(o.DataSourceRef) {
		var ret V1TypedObjectReference
		return ret
	}
	return *o.DataSourceRef
}

// GetDataSourceRefOk returns a tuple with the DataSourceRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimSpec) GetDataSourceRefOk() (*V1TypedObjectReference, bool) {
	if o == nil || IsNil(o.DataSourceRef) {
		return nil, false
	}
	return o.DataSourceRef, true
}

// HasDataSourceRef returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimSpec) HasDataSourceRef() bool {
	if o != nil && !IsNil(o.DataSourceRef) {
		return true
	}

	return false
}

// SetDataSourceRef gets a reference to the given V1TypedObjectReference and assigns it to the DataSourceRef field.
func (o *V1PersistentVolumeClaimSpec) SetDataSourceRef(v V1TypedObjectReference) {
	o.DataSourceRef = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimSpec) GetResources() V1VolumeResourceRequirements {
	if o == nil || IsNil(o.Resources) {
		var ret V1VolumeResourceRequirements
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimSpec) GetResourcesOk() (*V1VolumeResourceRequirements, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimSpec) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given V1VolumeResourceRequirements and assigns it to the Resources field.
func (o *V1PersistentVolumeClaimSpec) SetResources(v V1VolumeResourceRequirements) {
	o.Resources = &v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimSpec) GetSelector() V1LabelSelector {
	if o == nil || IsNil(o.Selector) {
		var ret V1LabelSelector
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimSpec) GetSelectorOk() (*V1LabelSelector, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimSpec) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given V1LabelSelector and assigns it to the Selector field.
func (o *V1PersistentVolumeClaimSpec) SetSelector(v V1LabelSelector) {
	o.Selector = &v
}

// GetStorageClassName returns the StorageClassName field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimSpec) GetStorageClassName() string {
	if o == nil || IsNil(o.StorageClassName) {
		var ret string
		return ret
	}
	return *o.StorageClassName
}

// GetStorageClassNameOk returns a tuple with the StorageClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimSpec) GetStorageClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.StorageClassName) {
		return nil, false
	}
	return o.StorageClassName, true
}

// HasStorageClassName returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimSpec) HasStorageClassName() bool {
	if o != nil && !IsNil(o.StorageClassName) {
		return true
	}

	return false
}

// SetStorageClassName gets a reference to the given string and assigns it to the StorageClassName field.
func (o *V1PersistentVolumeClaimSpec) SetStorageClassName(v string) {
	o.StorageClassName = &v
}

// GetVolumeAttributesClassName returns the VolumeAttributesClassName field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimSpec) GetVolumeAttributesClassName() string {
	if o == nil || IsNil(o.VolumeAttributesClassName) {
		var ret string
		return ret
	}
	return *o.VolumeAttributesClassName
}

// GetVolumeAttributesClassNameOk returns a tuple with the VolumeAttributesClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimSpec) GetVolumeAttributesClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeAttributesClassName) {
		return nil, false
	}
	return o.VolumeAttributesClassName, true
}

// HasVolumeAttributesClassName returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimSpec) HasVolumeAttributesClassName() bool {
	if o != nil && !IsNil(o.VolumeAttributesClassName) {
		return true
	}

	return false
}

// SetVolumeAttributesClassName gets a reference to the given string and assigns it to the VolumeAttributesClassName field.
func (o *V1PersistentVolumeClaimSpec) SetVolumeAttributesClassName(v string) {
	o.VolumeAttributesClassName = &v
}

// GetVolumeMode returns the VolumeMode field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimSpec) GetVolumeMode() string {
	if o == nil || IsNil(o.VolumeMode) {
		var ret string
		return ret
	}
	return *o.VolumeMode
}

// GetVolumeModeOk returns a tuple with the VolumeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimSpec) GetVolumeModeOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeMode) {
		return nil, false
	}
	return o.VolumeMode, true
}

// HasVolumeMode returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimSpec) HasVolumeMode() bool {
	if o != nil && !IsNil(o.VolumeMode) {
		return true
	}

	return false
}

// SetVolumeMode gets a reference to the given string and assigns it to the VolumeMode field.
func (o *V1PersistentVolumeClaimSpec) SetVolumeMode(v string) {
	o.VolumeMode = &v
}

// GetVolumeName returns the VolumeName field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimSpec) GetVolumeName() string {
	if o == nil || IsNil(o.VolumeName) {
		var ret string
		return ret
	}
	return *o.VolumeName
}

// GetVolumeNameOk returns a tuple with the VolumeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimSpec) GetVolumeNameOk() (*string, bool) {
	if o == nil || IsNil(o.VolumeName) {
		return nil, false
	}
	return o.VolumeName, true
}

// HasVolumeName returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimSpec) HasVolumeName() bool {
	if o != nil && !IsNil(o.VolumeName) {
		return true
	}

	return false
}

// SetVolumeName gets a reference to the given string and assigns it to the VolumeName field.
func (o *V1PersistentVolumeClaimSpec) SetVolumeName(v string) {
	o.VolumeName = &v
}

func (o V1PersistentVolumeClaimSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1PersistentVolumeClaimSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccessModes) {
		toSerialize["accessModes"] = o.AccessModes
	}
	if !IsNil(o.DataSource) {
		toSerialize["dataSource"] = o.DataSource
	}
	if !IsNil(o.DataSourceRef) {
		toSerialize["dataSourceRef"] = o.DataSourceRef
	}
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !IsNil(o.StorageClassName) {
		toSerialize["storageClassName"] = o.StorageClassName
	}
	if !IsNil(o.VolumeAttributesClassName) {
		toSerialize["volumeAttributesClassName"] = o.VolumeAttributesClassName
	}
	if !IsNil(o.VolumeMode) {
		toSerialize["volumeMode"] = o.VolumeMode
	}
	if !IsNil(o.VolumeName) {
		toSerialize["volumeName"] = o.VolumeName
	}
	return toSerialize, nil
}

type NullableV1PersistentVolumeClaimSpec struct {
	value *V1PersistentVolumeClaimSpec
	isSet bool
}

func (v NullableV1PersistentVolumeClaimSpec) Get() *V1PersistentVolumeClaimSpec {
	return v.value
}

func (v *NullableV1PersistentVolumeClaimSpec) Set(val *V1PersistentVolumeClaimSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableV1PersistentVolumeClaimSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableV1PersistentVolumeClaimSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1PersistentVolumeClaimSpec(val *V1PersistentVolumeClaimSpec) *NullableV1PersistentVolumeClaimSpec {
	return &NullableV1PersistentVolumeClaimSpec{value: val, isSet: true}
}

func (v NullableV1PersistentVolumeClaimSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1PersistentVolumeClaimSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


