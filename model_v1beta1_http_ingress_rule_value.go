/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1beta1HTTPIngressRuleValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1beta1HTTPIngressRuleValue{}

// V1beta1HTTPIngressRuleValue HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
type V1beta1HTTPIngressRuleValue struct {
	// A collection of paths that map requests to backends.
	Paths []V1beta1HTTPIngressPath `json:"paths"`
}

type _V1beta1HTTPIngressRuleValue V1beta1HTTPIngressRuleValue

// NewV1beta1HTTPIngressRuleValue instantiates a new V1beta1HTTPIngressRuleValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1beta1HTTPIngressRuleValue(paths []V1beta1HTTPIngressPath) *V1beta1HTTPIngressRuleValue {
	this := V1beta1HTTPIngressRuleValue{}
	this.Paths = paths
	return &this
}

// NewV1beta1HTTPIngressRuleValueWithDefaults instantiates a new V1beta1HTTPIngressRuleValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1beta1HTTPIngressRuleValueWithDefaults() *V1beta1HTTPIngressRuleValue {
	this := V1beta1HTTPIngressRuleValue{}
	return &this
}

// GetPaths returns the Paths field value
func (o *V1beta1HTTPIngressRuleValue) GetPaths() []V1beta1HTTPIngressPath {
	if o == nil {
		var ret []V1beta1HTTPIngressPath
		return ret
	}

	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value
// and a boolean to check if the value has been set.
func (o *V1beta1HTTPIngressRuleValue) GetPathsOk() ([]V1beta1HTTPIngressPath, bool) {
	if o == nil {
		return nil, false
	}
	return o.Paths, true
}

// SetPaths sets field value
func (o *V1beta1HTTPIngressRuleValue) SetPaths(v []V1beta1HTTPIngressPath) {
	o.Paths = v
}

func (o V1beta1HTTPIngressRuleValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1beta1HTTPIngressRuleValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["paths"] = o.Paths
	return toSerialize, nil
}

func (o *V1beta1HTTPIngressRuleValue) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"paths",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1beta1HTTPIngressRuleValue := _V1beta1HTTPIngressRuleValue{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1beta1HTTPIngressRuleValue)

	if err != nil {
		return err
	}

	*o = V1beta1HTTPIngressRuleValue(varV1beta1HTTPIngressRuleValue)

	return err
}

type NullableV1beta1HTTPIngressRuleValue struct {
	value *V1beta1HTTPIngressRuleValue
	isSet bool
}

func (v NullableV1beta1HTTPIngressRuleValue) Get() *V1beta1HTTPIngressRuleValue {
	return v.value
}

func (v *NullableV1beta1HTTPIngressRuleValue) Set(val *V1beta1HTTPIngressRuleValue) {
	v.value = val
	v.isSet = true
}

func (v NullableV1beta1HTTPIngressRuleValue) IsSet() bool {
	return v.isSet
}

func (v *NullableV1beta1HTTPIngressRuleValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1beta1HTTPIngressRuleValue(val *V1beta1HTTPIngressRuleValue) *NullableV1beta1HTTPIngressRuleValue {
	return &NullableV1beta1HTTPIngressRuleValue{value: val, isSet: true}
}

func (v NullableV1beta1HTTPIngressRuleValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1beta1HTTPIngressRuleValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


