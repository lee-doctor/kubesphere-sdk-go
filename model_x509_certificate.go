/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the X509Certificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &X509Certificate{}

// X509Certificate struct for X509Certificate
type X509Certificate struct {
	AuthorityKeyId string `json:"AuthorityKeyId"`
	BasicConstraintsValid bool `json:"BasicConstraintsValid"`
	CRLDistributionPoints []string `json:"CRLDistributionPoints"`
	DNSNames []string `json:"DNSNames"`
	EmailAddresses []string `json:"EmailAddresses"`
	ExcludedDNSDomains []string `json:"ExcludedDNSDomains"`
	ExcludedEmailAddresses []string `json:"ExcludedEmailAddresses"`
	ExcludedIPRanges []NetIPNet `json:"ExcludedIPRanges"`
	ExcludedURIDomains []string `json:"ExcludedURIDomains"`
	ExtKeyUsage []int32 `json:"ExtKeyUsage"`
	Extensions []PkixExtension `json:"Extensions"`
	ExtraExtensions []PkixExtension `json:"ExtraExtensions"`
	IPAddresses []string `json:"IPAddresses"`
	IsCA bool `json:"IsCA"`
	Issuer PkixName `json:"Issuer"`
	IssuingCertificateURL []string `json:"IssuingCertificateURL"`
	KeyUsage int32 `json:"KeyUsage"`
	MaxPathLen int32 `json:"MaxPathLen"`
	MaxPathLenZero bool `json:"MaxPathLenZero"`
	NotAfter time.Time `json:"NotAfter"`
	NotBefore time.Time `json:"NotBefore"`
	OCSPServer []string `json:"OCSPServer"`
	PermittedDNSDomains []string `json:"PermittedDNSDomains"`
	PermittedDNSDomainsCritical bool `json:"PermittedDNSDomainsCritical"`
	PermittedEmailAddresses []string `json:"PermittedEmailAddresses"`
	PermittedIPRanges []NetIPNet `json:"PermittedIPRanges"`
	PermittedURIDomains []string `json:"PermittedURIDomains"`
	Policies []X509OID `json:"Policies"`
	PolicyIdentifiers [][]int32 `json:"PolicyIdentifiers"`
	PublicKey map[string]interface{} `json:"PublicKey"`
	PublicKeyAlgorithm int32 `json:"PublicKeyAlgorithm"`
	Raw string `json:"Raw"`
	RawIssuer string `json:"RawIssuer"`
	RawSubject string `json:"RawSubject"`
	RawSubjectPublicKeyInfo string `json:"RawSubjectPublicKeyInfo"`
	RawTBSCertificate string `json:"RawTBSCertificate"`
	SerialNumber string `json:"SerialNumber"`
	Signature string `json:"Signature"`
	SignatureAlgorithm int32 `json:"SignatureAlgorithm"`
	Subject PkixName `json:"Subject"`
	SubjectKeyId string `json:"SubjectKeyId"`
	URIs []UrlURL `json:"URIs"`
	UnhandledCriticalExtensions [][]int32 `json:"UnhandledCriticalExtensions"`
	UnknownExtKeyUsage [][]int32 `json:"UnknownExtKeyUsage"`
	Version int32 `json:"Version"`
}

type _X509Certificate X509Certificate

// NewX509Certificate instantiates a new X509Certificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewX509Certificate(authorityKeyId string, basicConstraintsValid bool, cRLDistributionPoints []string, dNSNames []string, emailAddresses []string, excludedDNSDomains []string, excludedEmailAddresses []string, excludedIPRanges []NetIPNet, excludedURIDomains []string, extKeyUsage []int32, extensions []PkixExtension, extraExtensions []PkixExtension, iPAddresses []string, isCA bool, issuer PkixName, issuingCertificateURL []string, keyUsage int32, maxPathLen int32, maxPathLenZero bool, notAfter time.Time, notBefore time.Time, oCSPServer []string, permittedDNSDomains []string, permittedDNSDomainsCritical bool, permittedEmailAddresses []string, permittedIPRanges []NetIPNet, permittedURIDomains []string, policies []X509OID, policyIdentifiers [][]int32, publicKey map[string]interface{}, publicKeyAlgorithm int32, raw string, rawIssuer string, rawSubject string, rawSubjectPublicKeyInfo string, rawTBSCertificate string, serialNumber string, signature string, signatureAlgorithm int32, subject PkixName, subjectKeyId string, uRIs []UrlURL, unhandledCriticalExtensions [][]int32, unknownExtKeyUsage [][]int32, version int32) *X509Certificate {
	this := X509Certificate{}
	this.AuthorityKeyId = authorityKeyId
	this.BasicConstraintsValid = basicConstraintsValid
	this.CRLDistributionPoints = cRLDistributionPoints
	this.DNSNames = dNSNames
	this.EmailAddresses = emailAddresses
	this.ExcludedDNSDomains = excludedDNSDomains
	this.ExcludedEmailAddresses = excludedEmailAddresses
	this.ExcludedIPRanges = excludedIPRanges
	this.ExcludedURIDomains = excludedURIDomains
	this.ExtKeyUsage = extKeyUsage
	this.Extensions = extensions
	this.ExtraExtensions = extraExtensions
	this.IPAddresses = iPAddresses
	this.IsCA = isCA
	this.Issuer = issuer
	this.IssuingCertificateURL = issuingCertificateURL
	this.KeyUsage = keyUsage
	this.MaxPathLen = maxPathLen
	this.MaxPathLenZero = maxPathLenZero
	this.NotAfter = notAfter
	this.NotBefore = notBefore
	this.OCSPServer = oCSPServer
	this.PermittedDNSDomains = permittedDNSDomains
	this.PermittedDNSDomainsCritical = permittedDNSDomainsCritical
	this.PermittedEmailAddresses = permittedEmailAddresses
	this.PermittedIPRanges = permittedIPRanges
	this.PermittedURIDomains = permittedURIDomains
	this.Policies = policies
	this.PolicyIdentifiers = policyIdentifiers
	this.PublicKey = publicKey
	this.PublicKeyAlgorithm = publicKeyAlgorithm
	this.Raw = raw
	this.RawIssuer = rawIssuer
	this.RawSubject = rawSubject
	this.RawSubjectPublicKeyInfo = rawSubjectPublicKeyInfo
	this.RawTBSCertificate = rawTBSCertificate
	this.SerialNumber = serialNumber
	this.Signature = signature
	this.SignatureAlgorithm = signatureAlgorithm
	this.Subject = subject
	this.SubjectKeyId = subjectKeyId
	this.URIs = uRIs
	this.UnhandledCriticalExtensions = unhandledCriticalExtensions
	this.UnknownExtKeyUsage = unknownExtKeyUsage
	this.Version = version
	return &this
}

// NewX509CertificateWithDefaults instantiates a new X509Certificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewX509CertificateWithDefaults() *X509Certificate {
	this := X509Certificate{}
	return &this
}

// GetAuthorityKeyId returns the AuthorityKeyId field value
func (o *X509Certificate) GetAuthorityKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthorityKeyId
}

// GetAuthorityKeyIdOk returns a tuple with the AuthorityKeyId field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetAuthorityKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthorityKeyId, true
}

// SetAuthorityKeyId sets field value
func (o *X509Certificate) SetAuthorityKeyId(v string) {
	o.AuthorityKeyId = v
}

// GetBasicConstraintsValid returns the BasicConstraintsValid field value
func (o *X509Certificate) GetBasicConstraintsValid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.BasicConstraintsValid
}

// GetBasicConstraintsValidOk returns a tuple with the BasicConstraintsValid field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetBasicConstraintsValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BasicConstraintsValid, true
}

// SetBasicConstraintsValid sets field value
func (o *X509Certificate) SetBasicConstraintsValid(v bool) {
	o.BasicConstraintsValid = v
}

// GetCRLDistributionPoints returns the CRLDistributionPoints field value
func (o *X509Certificate) GetCRLDistributionPoints() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CRLDistributionPoints
}

// GetCRLDistributionPointsOk returns a tuple with the CRLDistributionPoints field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetCRLDistributionPointsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CRLDistributionPoints, true
}

// SetCRLDistributionPoints sets field value
func (o *X509Certificate) SetCRLDistributionPoints(v []string) {
	o.CRLDistributionPoints = v
}

// GetDNSNames returns the DNSNames field value
func (o *X509Certificate) GetDNSNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DNSNames
}

// GetDNSNamesOk returns a tuple with the DNSNames field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetDNSNamesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DNSNames, true
}

// SetDNSNames sets field value
func (o *X509Certificate) SetDNSNames(v []string) {
	o.DNSNames = v
}

// GetEmailAddresses returns the EmailAddresses field value
func (o *X509Certificate) GetEmailAddresses() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EmailAddresses
}

// GetEmailAddressesOk returns a tuple with the EmailAddresses field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetEmailAddressesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailAddresses, true
}

// SetEmailAddresses sets field value
func (o *X509Certificate) SetEmailAddresses(v []string) {
	o.EmailAddresses = v
}

// GetExcludedDNSDomains returns the ExcludedDNSDomains field value
func (o *X509Certificate) GetExcludedDNSDomains() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ExcludedDNSDomains
}

// GetExcludedDNSDomainsOk returns a tuple with the ExcludedDNSDomains field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetExcludedDNSDomainsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExcludedDNSDomains, true
}

// SetExcludedDNSDomains sets field value
func (o *X509Certificate) SetExcludedDNSDomains(v []string) {
	o.ExcludedDNSDomains = v
}

// GetExcludedEmailAddresses returns the ExcludedEmailAddresses field value
func (o *X509Certificate) GetExcludedEmailAddresses() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ExcludedEmailAddresses
}

// GetExcludedEmailAddressesOk returns a tuple with the ExcludedEmailAddresses field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetExcludedEmailAddressesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExcludedEmailAddresses, true
}

// SetExcludedEmailAddresses sets field value
func (o *X509Certificate) SetExcludedEmailAddresses(v []string) {
	o.ExcludedEmailAddresses = v
}

// GetExcludedIPRanges returns the ExcludedIPRanges field value
func (o *X509Certificate) GetExcludedIPRanges() []NetIPNet {
	if o == nil {
		var ret []NetIPNet
		return ret
	}

	return o.ExcludedIPRanges
}

// GetExcludedIPRangesOk returns a tuple with the ExcludedIPRanges field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetExcludedIPRangesOk() ([]NetIPNet, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExcludedIPRanges, true
}

// SetExcludedIPRanges sets field value
func (o *X509Certificate) SetExcludedIPRanges(v []NetIPNet) {
	o.ExcludedIPRanges = v
}

// GetExcludedURIDomains returns the ExcludedURIDomains field value
func (o *X509Certificate) GetExcludedURIDomains() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ExcludedURIDomains
}

// GetExcludedURIDomainsOk returns a tuple with the ExcludedURIDomains field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetExcludedURIDomainsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExcludedURIDomains, true
}

// SetExcludedURIDomains sets field value
func (o *X509Certificate) SetExcludedURIDomains(v []string) {
	o.ExcludedURIDomains = v
}

// GetExtKeyUsage returns the ExtKeyUsage field value
func (o *X509Certificate) GetExtKeyUsage() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.ExtKeyUsage
}

// GetExtKeyUsageOk returns a tuple with the ExtKeyUsage field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetExtKeyUsageOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtKeyUsage, true
}

// SetExtKeyUsage sets field value
func (o *X509Certificate) SetExtKeyUsage(v []int32) {
	o.ExtKeyUsage = v
}

// GetExtensions returns the Extensions field value
func (o *X509Certificate) GetExtensions() []PkixExtension {
	if o == nil {
		var ret []PkixExtension
		return ret
	}

	return o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetExtensionsOk() ([]PkixExtension, bool) {
	if o == nil {
		return nil, false
	}
	return o.Extensions, true
}

// SetExtensions sets field value
func (o *X509Certificate) SetExtensions(v []PkixExtension) {
	o.Extensions = v
}

// GetExtraExtensions returns the ExtraExtensions field value
func (o *X509Certificate) GetExtraExtensions() []PkixExtension {
	if o == nil {
		var ret []PkixExtension
		return ret
	}

	return o.ExtraExtensions
}

// GetExtraExtensionsOk returns a tuple with the ExtraExtensions field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetExtraExtensionsOk() ([]PkixExtension, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExtraExtensions, true
}

// SetExtraExtensions sets field value
func (o *X509Certificate) SetExtraExtensions(v []PkixExtension) {
	o.ExtraExtensions = v
}

// GetIPAddresses returns the IPAddresses field value
func (o *X509Certificate) GetIPAddresses() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IPAddresses
}

// GetIPAddressesOk returns a tuple with the IPAddresses field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetIPAddressesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IPAddresses, true
}

// SetIPAddresses sets field value
func (o *X509Certificate) SetIPAddresses(v []string) {
	o.IPAddresses = v
}

// GetIsCA returns the IsCA field value
func (o *X509Certificate) GetIsCA() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsCA
}

// GetIsCAOk returns a tuple with the IsCA field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetIsCAOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsCA, true
}

// SetIsCA sets field value
func (o *X509Certificate) SetIsCA(v bool) {
	o.IsCA = v
}

// GetIssuer returns the Issuer field value
func (o *X509Certificate) GetIssuer() PkixName {
	if o == nil {
		var ret PkixName
		return ret
	}

	return o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetIssuerOk() (*PkixName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issuer, true
}

// SetIssuer sets field value
func (o *X509Certificate) SetIssuer(v PkixName) {
	o.Issuer = v
}

// GetIssuingCertificateURL returns the IssuingCertificateURL field value
func (o *X509Certificate) GetIssuingCertificateURL() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IssuingCertificateURL
}

// GetIssuingCertificateURLOk returns a tuple with the IssuingCertificateURL field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetIssuingCertificateURLOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssuingCertificateURL, true
}

// SetIssuingCertificateURL sets field value
func (o *X509Certificate) SetIssuingCertificateURL(v []string) {
	o.IssuingCertificateURL = v
}

// GetKeyUsage returns the KeyUsage field value
func (o *X509Certificate) GetKeyUsage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.KeyUsage
}

// GetKeyUsageOk returns a tuple with the KeyUsage field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetKeyUsageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyUsage, true
}

// SetKeyUsage sets field value
func (o *X509Certificate) SetKeyUsage(v int32) {
	o.KeyUsage = v
}

// GetMaxPathLen returns the MaxPathLen field value
func (o *X509Certificate) GetMaxPathLen() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxPathLen
}

// GetMaxPathLenOk returns a tuple with the MaxPathLen field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetMaxPathLenOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxPathLen, true
}

// SetMaxPathLen sets field value
func (o *X509Certificate) SetMaxPathLen(v int32) {
	o.MaxPathLen = v
}

// GetMaxPathLenZero returns the MaxPathLenZero field value
func (o *X509Certificate) GetMaxPathLenZero() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MaxPathLenZero
}

// GetMaxPathLenZeroOk returns a tuple with the MaxPathLenZero field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetMaxPathLenZeroOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxPathLenZero, true
}

// SetMaxPathLenZero sets field value
func (o *X509Certificate) SetMaxPathLenZero(v bool) {
	o.MaxPathLenZero = v
}

// GetNotAfter returns the NotAfter field value
func (o *X509Certificate) GetNotAfter() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.NotAfter
}

// GetNotAfterOk returns a tuple with the NotAfter field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetNotAfterOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotAfter, true
}

// SetNotAfter sets field value
func (o *X509Certificate) SetNotAfter(v time.Time) {
	o.NotAfter = v
}

// GetNotBefore returns the NotBefore field value
func (o *X509Certificate) GetNotBefore() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.NotBefore
}

// GetNotBeforeOk returns a tuple with the NotBefore field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetNotBeforeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotBefore, true
}

// SetNotBefore sets field value
func (o *X509Certificate) SetNotBefore(v time.Time) {
	o.NotBefore = v
}

// GetOCSPServer returns the OCSPServer field value
func (o *X509Certificate) GetOCSPServer() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.OCSPServer
}

// GetOCSPServerOk returns a tuple with the OCSPServer field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetOCSPServerOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OCSPServer, true
}

// SetOCSPServer sets field value
func (o *X509Certificate) SetOCSPServer(v []string) {
	o.OCSPServer = v
}

// GetPermittedDNSDomains returns the PermittedDNSDomains field value
func (o *X509Certificate) GetPermittedDNSDomains() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PermittedDNSDomains
}

// GetPermittedDNSDomainsOk returns a tuple with the PermittedDNSDomains field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetPermittedDNSDomainsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PermittedDNSDomains, true
}

// SetPermittedDNSDomains sets field value
func (o *X509Certificate) SetPermittedDNSDomains(v []string) {
	o.PermittedDNSDomains = v
}

// GetPermittedDNSDomainsCritical returns the PermittedDNSDomainsCritical field value
func (o *X509Certificate) GetPermittedDNSDomainsCritical() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.PermittedDNSDomainsCritical
}

// GetPermittedDNSDomainsCriticalOk returns a tuple with the PermittedDNSDomainsCritical field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetPermittedDNSDomainsCriticalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PermittedDNSDomainsCritical, true
}

// SetPermittedDNSDomainsCritical sets field value
func (o *X509Certificate) SetPermittedDNSDomainsCritical(v bool) {
	o.PermittedDNSDomainsCritical = v
}

// GetPermittedEmailAddresses returns the PermittedEmailAddresses field value
func (o *X509Certificate) GetPermittedEmailAddresses() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PermittedEmailAddresses
}

// GetPermittedEmailAddressesOk returns a tuple with the PermittedEmailAddresses field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetPermittedEmailAddressesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PermittedEmailAddresses, true
}

// SetPermittedEmailAddresses sets field value
func (o *X509Certificate) SetPermittedEmailAddresses(v []string) {
	o.PermittedEmailAddresses = v
}

// GetPermittedIPRanges returns the PermittedIPRanges field value
func (o *X509Certificate) GetPermittedIPRanges() []NetIPNet {
	if o == nil {
		var ret []NetIPNet
		return ret
	}

	return o.PermittedIPRanges
}

// GetPermittedIPRangesOk returns a tuple with the PermittedIPRanges field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetPermittedIPRangesOk() ([]NetIPNet, bool) {
	if o == nil {
		return nil, false
	}
	return o.PermittedIPRanges, true
}

// SetPermittedIPRanges sets field value
func (o *X509Certificate) SetPermittedIPRanges(v []NetIPNet) {
	o.PermittedIPRanges = v
}

// GetPermittedURIDomains returns the PermittedURIDomains field value
func (o *X509Certificate) GetPermittedURIDomains() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PermittedURIDomains
}

// GetPermittedURIDomainsOk returns a tuple with the PermittedURIDomains field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetPermittedURIDomainsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PermittedURIDomains, true
}

// SetPermittedURIDomains sets field value
func (o *X509Certificate) SetPermittedURIDomains(v []string) {
	o.PermittedURIDomains = v
}

// GetPolicies returns the Policies field value
func (o *X509Certificate) GetPolicies() []X509OID {
	if o == nil {
		var ret []X509OID
		return ret
	}

	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetPoliciesOk() ([]X509OID, bool) {
	if o == nil {
		return nil, false
	}
	return o.Policies, true
}

// SetPolicies sets field value
func (o *X509Certificate) SetPolicies(v []X509OID) {
	o.Policies = v
}

// GetPolicyIdentifiers returns the PolicyIdentifiers field value
func (o *X509Certificate) GetPolicyIdentifiers() [][]int32 {
	if o == nil {
		var ret [][]int32
		return ret
	}

	return o.PolicyIdentifiers
}

// GetPolicyIdentifiersOk returns a tuple with the PolicyIdentifiers field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetPolicyIdentifiersOk() ([][]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PolicyIdentifiers, true
}

// SetPolicyIdentifiers sets field value
func (o *X509Certificate) SetPolicyIdentifiers(v [][]int32) {
	o.PolicyIdentifiers = v
}

// GetPublicKey returns the PublicKey field value
func (o *X509Certificate) GetPublicKey() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetPublicKeyOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.PublicKey, true
}

// SetPublicKey sets field value
func (o *X509Certificate) SetPublicKey(v map[string]interface{}) {
	o.PublicKey = v
}

// GetPublicKeyAlgorithm returns the PublicKeyAlgorithm field value
func (o *X509Certificate) GetPublicKeyAlgorithm() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PublicKeyAlgorithm
}

// GetPublicKeyAlgorithmOk returns a tuple with the PublicKeyAlgorithm field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetPublicKeyAlgorithmOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicKeyAlgorithm, true
}

// SetPublicKeyAlgorithm sets field value
func (o *X509Certificate) SetPublicKeyAlgorithm(v int32) {
	o.PublicKeyAlgorithm = v
}

// GetRaw returns the Raw field value
func (o *X509Certificate) GetRaw() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Raw
}

// GetRawOk returns a tuple with the Raw field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetRawOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Raw, true
}

// SetRaw sets field value
func (o *X509Certificate) SetRaw(v string) {
	o.Raw = v
}

// GetRawIssuer returns the RawIssuer field value
func (o *X509Certificate) GetRawIssuer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RawIssuer
}

// GetRawIssuerOk returns a tuple with the RawIssuer field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetRawIssuerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RawIssuer, true
}

// SetRawIssuer sets field value
func (o *X509Certificate) SetRawIssuer(v string) {
	o.RawIssuer = v
}

// GetRawSubject returns the RawSubject field value
func (o *X509Certificate) GetRawSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RawSubject
}

// GetRawSubjectOk returns a tuple with the RawSubject field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetRawSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RawSubject, true
}

// SetRawSubject sets field value
func (o *X509Certificate) SetRawSubject(v string) {
	o.RawSubject = v
}

// GetRawSubjectPublicKeyInfo returns the RawSubjectPublicKeyInfo field value
func (o *X509Certificate) GetRawSubjectPublicKeyInfo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RawSubjectPublicKeyInfo
}

// GetRawSubjectPublicKeyInfoOk returns a tuple with the RawSubjectPublicKeyInfo field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetRawSubjectPublicKeyInfoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RawSubjectPublicKeyInfo, true
}

// SetRawSubjectPublicKeyInfo sets field value
func (o *X509Certificate) SetRawSubjectPublicKeyInfo(v string) {
	o.RawSubjectPublicKeyInfo = v
}

// GetRawTBSCertificate returns the RawTBSCertificate field value
func (o *X509Certificate) GetRawTBSCertificate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RawTBSCertificate
}

// GetRawTBSCertificateOk returns a tuple with the RawTBSCertificate field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetRawTBSCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RawTBSCertificate, true
}

// SetRawTBSCertificate sets field value
func (o *X509Certificate) SetRawTBSCertificate(v string) {
	o.RawTBSCertificate = v
}

// GetSerialNumber returns the SerialNumber field value
func (o *X509Certificate) GetSerialNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SerialNumber, true
}

// SetSerialNumber sets field value
func (o *X509Certificate) SetSerialNumber(v string) {
	o.SerialNumber = v
}

// GetSignature returns the Signature field value
func (o *X509Certificate) GetSignature() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetSignatureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Signature, true
}

// SetSignature sets field value
func (o *X509Certificate) SetSignature(v string) {
	o.Signature = v
}

// GetSignatureAlgorithm returns the SignatureAlgorithm field value
func (o *X509Certificate) GetSignatureAlgorithm() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SignatureAlgorithm
}

// GetSignatureAlgorithmOk returns a tuple with the SignatureAlgorithm field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetSignatureAlgorithmOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignatureAlgorithm, true
}

// SetSignatureAlgorithm sets field value
func (o *X509Certificate) SetSignatureAlgorithm(v int32) {
	o.SignatureAlgorithm = v
}

// GetSubject returns the Subject field value
func (o *X509Certificate) GetSubject() PkixName {
	if o == nil {
		var ret PkixName
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetSubjectOk() (*PkixName, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *X509Certificate) SetSubject(v PkixName) {
	o.Subject = v
}

// GetSubjectKeyId returns the SubjectKeyId field value
func (o *X509Certificate) GetSubjectKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubjectKeyId
}

// GetSubjectKeyIdOk returns a tuple with the SubjectKeyId field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetSubjectKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubjectKeyId, true
}

// SetSubjectKeyId sets field value
func (o *X509Certificate) SetSubjectKeyId(v string) {
	o.SubjectKeyId = v
}

// GetURIs returns the URIs field value
func (o *X509Certificate) GetURIs() []UrlURL {
	if o == nil {
		var ret []UrlURL
		return ret
	}

	return o.URIs
}

// GetURIsOk returns a tuple with the URIs field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetURIsOk() ([]UrlURL, bool) {
	if o == nil {
		return nil, false
	}
	return o.URIs, true
}

// SetURIs sets field value
func (o *X509Certificate) SetURIs(v []UrlURL) {
	o.URIs = v
}

// GetUnhandledCriticalExtensions returns the UnhandledCriticalExtensions field value
func (o *X509Certificate) GetUnhandledCriticalExtensions() [][]int32 {
	if o == nil {
		var ret [][]int32
		return ret
	}

	return o.UnhandledCriticalExtensions
}

// GetUnhandledCriticalExtensionsOk returns a tuple with the UnhandledCriticalExtensions field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetUnhandledCriticalExtensionsOk() ([][]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnhandledCriticalExtensions, true
}

// SetUnhandledCriticalExtensions sets field value
func (o *X509Certificate) SetUnhandledCriticalExtensions(v [][]int32) {
	o.UnhandledCriticalExtensions = v
}

// GetUnknownExtKeyUsage returns the UnknownExtKeyUsage field value
func (o *X509Certificate) GetUnknownExtKeyUsage() [][]int32 {
	if o == nil {
		var ret [][]int32
		return ret
	}

	return o.UnknownExtKeyUsage
}

// GetUnknownExtKeyUsageOk returns a tuple with the UnknownExtKeyUsage field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetUnknownExtKeyUsageOk() ([][]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnknownExtKeyUsage, true
}

// SetUnknownExtKeyUsage sets field value
func (o *X509Certificate) SetUnknownExtKeyUsage(v [][]int32) {
	o.UnknownExtKeyUsage = v
}

// GetVersion returns the Version field value
func (o *X509Certificate) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *X509Certificate) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *X509Certificate) SetVersion(v int32) {
	o.Version = v
}

func (o X509Certificate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o X509Certificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["AuthorityKeyId"] = o.AuthorityKeyId
	toSerialize["BasicConstraintsValid"] = o.BasicConstraintsValid
	toSerialize["CRLDistributionPoints"] = o.CRLDistributionPoints
	toSerialize["DNSNames"] = o.DNSNames
	toSerialize["EmailAddresses"] = o.EmailAddresses
	toSerialize["ExcludedDNSDomains"] = o.ExcludedDNSDomains
	toSerialize["ExcludedEmailAddresses"] = o.ExcludedEmailAddresses
	toSerialize["ExcludedIPRanges"] = o.ExcludedIPRanges
	toSerialize["ExcludedURIDomains"] = o.ExcludedURIDomains
	toSerialize["ExtKeyUsage"] = o.ExtKeyUsage
	toSerialize["Extensions"] = o.Extensions
	toSerialize["ExtraExtensions"] = o.ExtraExtensions
	toSerialize["IPAddresses"] = o.IPAddresses
	toSerialize["IsCA"] = o.IsCA
	toSerialize["Issuer"] = o.Issuer
	toSerialize["IssuingCertificateURL"] = o.IssuingCertificateURL
	toSerialize["KeyUsage"] = o.KeyUsage
	toSerialize["MaxPathLen"] = o.MaxPathLen
	toSerialize["MaxPathLenZero"] = o.MaxPathLenZero
	toSerialize["NotAfter"] = o.NotAfter
	toSerialize["NotBefore"] = o.NotBefore
	toSerialize["OCSPServer"] = o.OCSPServer
	toSerialize["PermittedDNSDomains"] = o.PermittedDNSDomains
	toSerialize["PermittedDNSDomainsCritical"] = o.PermittedDNSDomainsCritical
	toSerialize["PermittedEmailAddresses"] = o.PermittedEmailAddresses
	toSerialize["PermittedIPRanges"] = o.PermittedIPRanges
	toSerialize["PermittedURIDomains"] = o.PermittedURIDomains
	toSerialize["Policies"] = o.Policies
	toSerialize["PolicyIdentifiers"] = o.PolicyIdentifiers
	toSerialize["PublicKey"] = o.PublicKey
	toSerialize["PublicKeyAlgorithm"] = o.PublicKeyAlgorithm
	toSerialize["Raw"] = o.Raw
	toSerialize["RawIssuer"] = o.RawIssuer
	toSerialize["RawSubject"] = o.RawSubject
	toSerialize["RawSubjectPublicKeyInfo"] = o.RawSubjectPublicKeyInfo
	toSerialize["RawTBSCertificate"] = o.RawTBSCertificate
	toSerialize["SerialNumber"] = o.SerialNumber
	toSerialize["Signature"] = o.Signature
	toSerialize["SignatureAlgorithm"] = o.SignatureAlgorithm
	toSerialize["Subject"] = o.Subject
	toSerialize["SubjectKeyId"] = o.SubjectKeyId
	toSerialize["URIs"] = o.URIs
	toSerialize["UnhandledCriticalExtensions"] = o.UnhandledCriticalExtensions
	toSerialize["UnknownExtKeyUsage"] = o.UnknownExtKeyUsage
	toSerialize["Version"] = o.Version
	return toSerialize, nil
}

func (o *X509Certificate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"AuthorityKeyId",
		"BasicConstraintsValid",
		"CRLDistributionPoints",
		"DNSNames",
		"EmailAddresses",
		"ExcludedDNSDomains",
		"ExcludedEmailAddresses",
		"ExcludedIPRanges",
		"ExcludedURIDomains",
		"ExtKeyUsage",
		"Extensions",
		"ExtraExtensions",
		"IPAddresses",
		"IsCA",
		"Issuer",
		"IssuingCertificateURL",
		"KeyUsage",
		"MaxPathLen",
		"MaxPathLenZero",
		"NotAfter",
		"NotBefore",
		"OCSPServer",
		"PermittedDNSDomains",
		"PermittedDNSDomainsCritical",
		"PermittedEmailAddresses",
		"PermittedIPRanges",
		"PermittedURIDomains",
		"Policies",
		"PolicyIdentifiers",
		"PublicKey",
		"PublicKeyAlgorithm",
		"Raw",
		"RawIssuer",
		"RawSubject",
		"RawSubjectPublicKeyInfo",
		"RawTBSCertificate",
		"SerialNumber",
		"Signature",
		"SignatureAlgorithm",
		"Subject",
		"SubjectKeyId",
		"URIs",
		"UnhandledCriticalExtensions",
		"UnknownExtKeyUsage",
		"Version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varX509Certificate := _X509Certificate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varX509Certificate)

	if err != nil {
		return err
	}

	*o = X509Certificate(varX509Certificate)

	return err
}

type NullableX509Certificate struct {
	value *X509Certificate
	isSet bool
}

func (v NullableX509Certificate) Get() *X509Certificate {
	return v.value
}

func (v *NullableX509Certificate) Set(val *X509Certificate) {
	v.value = val
	v.isSet = true
}

func (v NullableX509Certificate) IsSet() bool {
	return v.isSet
}

func (v *NullableX509Certificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableX509Certificate(val *X509Certificate) *NullableX509Certificate {
	return &NullableX509Certificate{value: val, isSet: true}
}

func (v NullableX509Certificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableX509Certificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


