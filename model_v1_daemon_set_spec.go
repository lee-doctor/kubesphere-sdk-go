/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1DaemonSetSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1DaemonSetSpec{}

// V1DaemonSetSpec DaemonSetSpec is the specification of a daemon set.
type V1DaemonSetSpec struct {
	// The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
	MinReadySeconds *int32 `json:"minReadySeconds,omitempty"`
	// The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
	RevisionHistoryLimit *int32 `json:"revisionHistoryLimit,omitempty"`
	Selector V1LabelSelector `json:"selector"`
	Template V1PodTemplateSpec `json:"template"`
	UpdateStrategy *V1DaemonSetUpdateStrategy `json:"updateStrategy,omitempty"`
}

type _V1DaemonSetSpec V1DaemonSetSpec

// NewV1DaemonSetSpec instantiates a new V1DaemonSetSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1DaemonSetSpec(selector V1LabelSelector, template V1PodTemplateSpec) *V1DaemonSetSpec {
	this := V1DaemonSetSpec{}
	this.Selector = selector
	this.Template = template
	return &this
}

// NewV1DaemonSetSpecWithDefaults instantiates a new V1DaemonSetSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1DaemonSetSpecWithDefaults() *V1DaemonSetSpec {
	this := V1DaemonSetSpec{}
	return &this
}

// GetMinReadySeconds returns the MinReadySeconds field value if set, zero value otherwise.
func (o *V1DaemonSetSpec) GetMinReadySeconds() int32 {
	if o == nil || IsNil(o.MinReadySeconds) {
		var ret int32
		return ret
	}
	return *o.MinReadySeconds
}

// GetMinReadySecondsOk returns a tuple with the MinReadySeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DaemonSetSpec) GetMinReadySecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinReadySeconds) {
		return nil, false
	}
	return o.MinReadySeconds, true
}

// HasMinReadySeconds returns a boolean if a field has been set.
func (o *V1DaemonSetSpec) HasMinReadySeconds() bool {
	if o != nil && !IsNil(o.MinReadySeconds) {
		return true
	}

	return false
}

// SetMinReadySeconds gets a reference to the given int32 and assigns it to the MinReadySeconds field.
func (o *V1DaemonSetSpec) SetMinReadySeconds(v int32) {
	o.MinReadySeconds = &v
}

// GetRevisionHistoryLimit returns the RevisionHistoryLimit field value if set, zero value otherwise.
func (o *V1DaemonSetSpec) GetRevisionHistoryLimit() int32 {
	if o == nil || IsNil(o.RevisionHistoryLimit) {
		var ret int32
		return ret
	}
	return *o.RevisionHistoryLimit
}

// GetRevisionHistoryLimitOk returns a tuple with the RevisionHistoryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DaemonSetSpec) GetRevisionHistoryLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.RevisionHistoryLimit) {
		return nil, false
	}
	return o.RevisionHistoryLimit, true
}

// HasRevisionHistoryLimit returns a boolean if a field has been set.
func (o *V1DaemonSetSpec) HasRevisionHistoryLimit() bool {
	if o != nil && !IsNil(o.RevisionHistoryLimit) {
		return true
	}

	return false
}

// SetRevisionHistoryLimit gets a reference to the given int32 and assigns it to the RevisionHistoryLimit field.
func (o *V1DaemonSetSpec) SetRevisionHistoryLimit(v int32) {
	o.RevisionHistoryLimit = &v
}

// GetSelector returns the Selector field value
func (o *V1DaemonSetSpec) GetSelector() V1LabelSelector {
	if o == nil {
		var ret V1LabelSelector
		return ret
	}

	return o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value
// and a boolean to check if the value has been set.
func (o *V1DaemonSetSpec) GetSelectorOk() (*V1LabelSelector, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Selector, true
}

// SetSelector sets field value
func (o *V1DaemonSetSpec) SetSelector(v V1LabelSelector) {
	o.Selector = v
}

// GetTemplate returns the Template field value
func (o *V1DaemonSetSpec) GetTemplate() V1PodTemplateSpec {
	if o == nil {
		var ret V1PodTemplateSpec
		return ret
	}

	return o.Template
}

// GetTemplateOk returns a tuple with the Template field value
// and a boolean to check if the value has been set.
func (o *V1DaemonSetSpec) GetTemplateOk() (*V1PodTemplateSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Template, true
}

// SetTemplate sets field value
func (o *V1DaemonSetSpec) SetTemplate(v V1PodTemplateSpec) {
	o.Template = v
}

// GetUpdateStrategy returns the UpdateStrategy field value if set, zero value otherwise.
func (o *V1DaemonSetSpec) GetUpdateStrategy() V1DaemonSetUpdateStrategy {
	if o == nil || IsNil(o.UpdateStrategy) {
		var ret V1DaemonSetUpdateStrategy
		return ret
	}
	return *o.UpdateStrategy
}

// GetUpdateStrategyOk returns a tuple with the UpdateStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1DaemonSetSpec) GetUpdateStrategyOk() (*V1DaemonSetUpdateStrategy, bool) {
	if o == nil || IsNil(o.UpdateStrategy) {
		return nil, false
	}
	return o.UpdateStrategy, true
}

// HasUpdateStrategy returns a boolean if a field has been set.
func (o *V1DaemonSetSpec) HasUpdateStrategy() bool {
	if o != nil && !IsNil(o.UpdateStrategy) {
		return true
	}

	return false
}

// SetUpdateStrategy gets a reference to the given V1DaemonSetUpdateStrategy and assigns it to the UpdateStrategy field.
func (o *V1DaemonSetSpec) SetUpdateStrategy(v V1DaemonSetUpdateStrategy) {
	o.UpdateStrategy = &v
}

func (o V1DaemonSetSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1DaemonSetSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinReadySeconds) {
		toSerialize["minReadySeconds"] = o.MinReadySeconds
	}
	if !IsNil(o.RevisionHistoryLimit) {
		toSerialize["revisionHistoryLimit"] = o.RevisionHistoryLimit
	}
	toSerialize["selector"] = o.Selector
	toSerialize["template"] = o.Template
	if !IsNil(o.UpdateStrategy) {
		toSerialize["updateStrategy"] = o.UpdateStrategy
	}
	return toSerialize, nil
}

func (o *V1DaemonSetSpec) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"selector",
		"template",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1DaemonSetSpec := _V1DaemonSetSpec{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1DaemonSetSpec)

	if err != nil {
		return err
	}

	*o = V1DaemonSetSpec(varV1DaemonSetSpec)

	return err
}

type NullableV1DaemonSetSpec struct {
	value *V1DaemonSetSpec
	isSet bool
}

func (v NullableV1DaemonSetSpec) Get() *V1DaemonSetSpec {
	return v.value
}

func (v *NullableV1DaemonSetSpec) Set(val *V1DaemonSetSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableV1DaemonSetSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableV1DaemonSetSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1DaemonSetSpec(val *V1DaemonSetSpec) *NullableV1DaemonSetSpec {
	return &NullableV1DaemonSetSpec{value: val, isSet: true}
}

func (v NullableV1DaemonSetSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1DaemonSetSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


