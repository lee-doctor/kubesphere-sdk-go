/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1PersistentVolumeClaimTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1PersistentVolumeClaimTemplate{}

// V1PersistentVolumeClaimTemplate PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
type V1PersistentVolumeClaimTemplate struct {
	Metadata *V1ObjectMeta `json:"metadata,omitempty"`
	Spec V1PersistentVolumeClaimSpec `json:"spec"`
}

type _V1PersistentVolumeClaimTemplate V1PersistentVolumeClaimTemplate

// NewV1PersistentVolumeClaimTemplate instantiates a new V1PersistentVolumeClaimTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1PersistentVolumeClaimTemplate(spec V1PersistentVolumeClaimSpec) *V1PersistentVolumeClaimTemplate {
	this := V1PersistentVolumeClaimTemplate{}
	this.Spec = spec
	return &this
}

// NewV1PersistentVolumeClaimTemplateWithDefaults instantiates a new V1PersistentVolumeClaimTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1PersistentVolumeClaimTemplateWithDefaults() *V1PersistentVolumeClaimTemplate {
	this := V1PersistentVolumeClaimTemplate{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V1PersistentVolumeClaimTemplate) GetMetadata() V1ObjectMeta {
	if o == nil || IsNil(o.Metadata) {
		var ret V1ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimTemplate) GetMetadataOk() (*V1ObjectMeta, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V1PersistentVolumeClaimTemplate) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given V1ObjectMeta and assigns it to the Metadata field.
func (o *V1PersistentVolumeClaimTemplate) SetMetadata(v V1ObjectMeta) {
	o.Metadata = &v
}

// GetSpec returns the Spec field value
func (o *V1PersistentVolumeClaimTemplate) GetSpec() V1PersistentVolumeClaimSpec {
	if o == nil {
		var ret V1PersistentVolumeClaimSpec
		return ret
	}

	return o.Spec
}

// GetSpecOk returns a tuple with the Spec field value
// and a boolean to check if the value has been set.
func (o *V1PersistentVolumeClaimTemplate) GetSpecOk() (*V1PersistentVolumeClaimSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Spec, true
}

// SetSpec sets field value
func (o *V1PersistentVolumeClaimTemplate) SetSpec(v V1PersistentVolumeClaimSpec) {
	o.Spec = v
}

func (o V1PersistentVolumeClaimTemplate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1PersistentVolumeClaimTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["spec"] = o.Spec
	return toSerialize, nil
}

func (o *V1PersistentVolumeClaimTemplate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"spec",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1PersistentVolumeClaimTemplate := _V1PersistentVolumeClaimTemplate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1PersistentVolumeClaimTemplate)

	if err != nil {
		return err
	}

	*o = V1PersistentVolumeClaimTemplate(varV1PersistentVolumeClaimTemplate)

	return err
}

type NullableV1PersistentVolumeClaimTemplate struct {
	value *V1PersistentVolumeClaimTemplate
	isSet bool
}

func (v NullableV1PersistentVolumeClaimTemplate) Get() *V1PersistentVolumeClaimTemplate {
	return v.value
}

func (v *NullableV1PersistentVolumeClaimTemplate) Set(val *V1PersistentVolumeClaimTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableV1PersistentVolumeClaimTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableV1PersistentVolumeClaimTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1PersistentVolumeClaimTemplate(val *V1PersistentVolumeClaimTemplate) *NullableV1PersistentVolumeClaimTemplate {
	return &NullableV1PersistentVolumeClaimTemplate{value: val, isSet: true}
}

func (v NullableV1PersistentVolumeClaimTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1PersistentVolumeClaimTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


