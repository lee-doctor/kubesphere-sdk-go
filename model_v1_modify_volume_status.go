/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1ModifyVolumeStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ModifyVolumeStatus{}

// V1ModifyVolumeStatus ModifyVolumeStatus represents the status object of ControllerModifyVolume operation
type V1ModifyVolumeStatus struct {
	// status is the status of the ControllerModifyVolume operation. It can be in any of following states:  - Pending    Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as    the specified VolumeAttributesClass not existing.  - InProgress    InProgress indicates that the volume is being modified.  - Infeasible   Infeasible indicates that the request has been rejected as invalid by the CSI driver. To    resolve the error, a valid VolumeAttributesClass needs to be specified. Note: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.
	Status string `json:"status"`
	// targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled
	TargetVolumeAttributesClassName *string `json:"targetVolumeAttributesClassName,omitempty"`
}

type _V1ModifyVolumeStatus V1ModifyVolumeStatus

// NewV1ModifyVolumeStatus instantiates a new V1ModifyVolumeStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ModifyVolumeStatus(status string) *V1ModifyVolumeStatus {
	this := V1ModifyVolumeStatus{}
	this.Status = status
	return &this
}

// NewV1ModifyVolumeStatusWithDefaults instantiates a new V1ModifyVolumeStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ModifyVolumeStatusWithDefaults() *V1ModifyVolumeStatus {
	this := V1ModifyVolumeStatus{}
	return &this
}

// GetStatus returns the Status field value
func (o *V1ModifyVolumeStatus) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *V1ModifyVolumeStatus) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *V1ModifyVolumeStatus) SetStatus(v string) {
	o.Status = v
}

// GetTargetVolumeAttributesClassName returns the TargetVolumeAttributesClassName field value if set, zero value otherwise.
func (o *V1ModifyVolumeStatus) GetTargetVolumeAttributesClassName() string {
	if o == nil || IsNil(o.TargetVolumeAttributesClassName) {
		var ret string
		return ret
	}
	return *o.TargetVolumeAttributesClassName
}

// GetTargetVolumeAttributesClassNameOk returns a tuple with the TargetVolumeAttributesClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ModifyVolumeStatus) GetTargetVolumeAttributesClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.TargetVolumeAttributesClassName) {
		return nil, false
	}
	return o.TargetVolumeAttributesClassName, true
}

// HasTargetVolumeAttributesClassName returns a boolean if a field has been set.
func (o *V1ModifyVolumeStatus) HasTargetVolumeAttributesClassName() bool {
	if o != nil && !IsNil(o.TargetVolumeAttributesClassName) {
		return true
	}

	return false
}

// SetTargetVolumeAttributesClassName gets a reference to the given string and assigns it to the TargetVolumeAttributesClassName field.
func (o *V1ModifyVolumeStatus) SetTargetVolumeAttributesClassName(v string) {
	o.TargetVolumeAttributesClassName = &v
}

func (o V1ModifyVolumeStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ModifyVolumeStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	if !IsNil(o.TargetVolumeAttributesClassName) {
		toSerialize["targetVolumeAttributesClassName"] = o.TargetVolumeAttributesClassName
	}
	return toSerialize, nil
}

func (o *V1ModifyVolumeStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1ModifyVolumeStatus := _V1ModifyVolumeStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1ModifyVolumeStatus)

	if err != nil {
		return err
	}

	*o = V1ModifyVolumeStatus(varV1ModifyVolumeStatus)

	return err
}

type NullableV1ModifyVolumeStatus struct {
	value *V1ModifyVolumeStatus
	isSet bool
}

func (v NullableV1ModifyVolumeStatus) Get() *V1ModifyVolumeStatus {
	return v.value
}

func (v *NullableV1ModifyVolumeStatus) Set(val *V1ModifyVolumeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ModifyVolumeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ModifyVolumeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ModifyVolumeStatus(val *V1ModifyVolumeStatus) *NullableV1ModifyVolumeStatus {
	return &NullableV1ModifyVolumeStatus{value: val, isSet: true}
}

func (v NullableV1ModifyVolumeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ModifyVolumeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


