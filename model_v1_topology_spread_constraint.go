/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1TopologySpreadConstraint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1TopologySpreadConstraint{}

// V1TopologySpreadConstraint TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type V1TopologySpreadConstraint struct {
	LabelSelector *V1LabelSelector `json:"labelSelector,omitempty"`
	// MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.  This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
	MatchLabelKeys []string `json:"matchLabelKeys,omitempty"`
	// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. 
	MaxSkew int32 `json:"maxSkew"`
	// MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: 
	MinDomains *int32 `json:"minDomains,omitempty"`
	// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeAffinityPolicy *string `json:"nodeAffinityPolicy,omitempty"`
	// NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeTaintsPolicy *string `json:"nodeTaintsPolicy,omitempty"`
	// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology. And, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology. It's a required field.
	TopologyKey string `json:"topologyKey"`
	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: 
	WhenUnsatisfiable string `json:"whenUnsatisfiable"`
}

type _V1TopologySpreadConstraint V1TopologySpreadConstraint

// NewV1TopologySpreadConstraint instantiates a new V1TopologySpreadConstraint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1TopologySpreadConstraint(maxSkew int32, topologyKey string, whenUnsatisfiable string) *V1TopologySpreadConstraint {
	this := V1TopologySpreadConstraint{}
	this.MaxSkew = maxSkew
	this.TopologyKey = topologyKey
	this.WhenUnsatisfiable = whenUnsatisfiable
	return &this
}

// NewV1TopologySpreadConstraintWithDefaults instantiates a new V1TopologySpreadConstraint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1TopologySpreadConstraintWithDefaults() *V1TopologySpreadConstraint {
	this := V1TopologySpreadConstraint{}
	return &this
}

// GetLabelSelector returns the LabelSelector field value if set, zero value otherwise.
func (o *V1TopologySpreadConstraint) GetLabelSelector() V1LabelSelector {
	if o == nil || IsNil(o.LabelSelector) {
		var ret V1LabelSelector
		return ret
	}
	return *o.LabelSelector
}

// GetLabelSelectorOk returns a tuple with the LabelSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TopologySpreadConstraint) GetLabelSelectorOk() (*V1LabelSelector, bool) {
	if o == nil || IsNil(o.LabelSelector) {
		return nil, false
	}
	return o.LabelSelector, true
}

// HasLabelSelector returns a boolean if a field has been set.
func (o *V1TopologySpreadConstraint) HasLabelSelector() bool {
	if o != nil && !IsNil(o.LabelSelector) {
		return true
	}

	return false
}

// SetLabelSelector gets a reference to the given V1LabelSelector and assigns it to the LabelSelector field.
func (o *V1TopologySpreadConstraint) SetLabelSelector(v V1LabelSelector) {
	o.LabelSelector = &v
}

// GetMatchLabelKeys returns the MatchLabelKeys field value if set, zero value otherwise.
func (o *V1TopologySpreadConstraint) GetMatchLabelKeys() []string {
	if o == nil || IsNil(o.MatchLabelKeys) {
		var ret []string
		return ret
	}
	return o.MatchLabelKeys
}

// GetMatchLabelKeysOk returns a tuple with the MatchLabelKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TopologySpreadConstraint) GetMatchLabelKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.MatchLabelKeys) {
		return nil, false
	}
	return o.MatchLabelKeys, true
}

// HasMatchLabelKeys returns a boolean if a field has been set.
func (o *V1TopologySpreadConstraint) HasMatchLabelKeys() bool {
	if o != nil && !IsNil(o.MatchLabelKeys) {
		return true
	}

	return false
}

// SetMatchLabelKeys gets a reference to the given []string and assigns it to the MatchLabelKeys field.
func (o *V1TopologySpreadConstraint) SetMatchLabelKeys(v []string) {
	o.MatchLabelKeys = v
}

// GetMaxSkew returns the MaxSkew field value
func (o *V1TopologySpreadConstraint) GetMaxSkew() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxSkew
}

// GetMaxSkewOk returns a tuple with the MaxSkew field value
// and a boolean to check if the value has been set.
func (o *V1TopologySpreadConstraint) GetMaxSkewOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxSkew, true
}

// SetMaxSkew sets field value
func (o *V1TopologySpreadConstraint) SetMaxSkew(v int32) {
	o.MaxSkew = v
}

// GetMinDomains returns the MinDomains field value if set, zero value otherwise.
func (o *V1TopologySpreadConstraint) GetMinDomains() int32 {
	if o == nil || IsNil(o.MinDomains) {
		var ret int32
		return ret
	}
	return *o.MinDomains
}

// GetMinDomainsOk returns a tuple with the MinDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TopologySpreadConstraint) GetMinDomainsOk() (*int32, bool) {
	if o == nil || IsNil(o.MinDomains) {
		return nil, false
	}
	return o.MinDomains, true
}

// HasMinDomains returns a boolean if a field has been set.
func (o *V1TopologySpreadConstraint) HasMinDomains() bool {
	if o != nil && !IsNil(o.MinDomains) {
		return true
	}

	return false
}

// SetMinDomains gets a reference to the given int32 and assigns it to the MinDomains field.
func (o *V1TopologySpreadConstraint) SetMinDomains(v int32) {
	o.MinDomains = &v
}

// GetNodeAffinityPolicy returns the NodeAffinityPolicy field value if set, zero value otherwise.
func (o *V1TopologySpreadConstraint) GetNodeAffinityPolicy() string {
	if o == nil || IsNil(o.NodeAffinityPolicy) {
		var ret string
		return ret
	}
	return *o.NodeAffinityPolicy
}

// GetNodeAffinityPolicyOk returns a tuple with the NodeAffinityPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TopologySpreadConstraint) GetNodeAffinityPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.NodeAffinityPolicy) {
		return nil, false
	}
	return o.NodeAffinityPolicy, true
}

// HasNodeAffinityPolicy returns a boolean if a field has been set.
func (o *V1TopologySpreadConstraint) HasNodeAffinityPolicy() bool {
	if o != nil && !IsNil(o.NodeAffinityPolicy) {
		return true
	}

	return false
}

// SetNodeAffinityPolicy gets a reference to the given string and assigns it to the NodeAffinityPolicy field.
func (o *V1TopologySpreadConstraint) SetNodeAffinityPolicy(v string) {
	o.NodeAffinityPolicy = &v
}

// GetNodeTaintsPolicy returns the NodeTaintsPolicy field value if set, zero value otherwise.
func (o *V1TopologySpreadConstraint) GetNodeTaintsPolicy() string {
	if o == nil || IsNil(o.NodeTaintsPolicy) {
		var ret string
		return ret
	}
	return *o.NodeTaintsPolicy
}

// GetNodeTaintsPolicyOk returns a tuple with the NodeTaintsPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TopologySpreadConstraint) GetNodeTaintsPolicyOk() (*string, bool) {
	if o == nil || IsNil(o.NodeTaintsPolicy) {
		return nil, false
	}
	return o.NodeTaintsPolicy, true
}

// HasNodeTaintsPolicy returns a boolean if a field has been set.
func (o *V1TopologySpreadConstraint) HasNodeTaintsPolicy() bool {
	if o != nil && !IsNil(o.NodeTaintsPolicy) {
		return true
	}

	return false
}

// SetNodeTaintsPolicy gets a reference to the given string and assigns it to the NodeTaintsPolicy field.
func (o *V1TopologySpreadConstraint) SetNodeTaintsPolicy(v string) {
	o.NodeTaintsPolicy = &v
}

// GetTopologyKey returns the TopologyKey field value
func (o *V1TopologySpreadConstraint) GetTopologyKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TopologyKey
}

// GetTopologyKeyOk returns a tuple with the TopologyKey field value
// and a boolean to check if the value has been set.
func (o *V1TopologySpreadConstraint) GetTopologyKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopologyKey, true
}

// SetTopologyKey sets field value
func (o *V1TopologySpreadConstraint) SetTopologyKey(v string) {
	o.TopologyKey = v
}

// GetWhenUnsatisfiable returns the WhenUnsatisfiable field value
func (o *V1TopologySpreadConstraint) GetWhenUnsatisfiable() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WhenUnsatisfiable
}

// GetWhenUnsatisfiableOk returns a tuple with the WhenUnsatisfiable field value
// and a boolean to check if the value has been set.
func (o *V1TopologySpreadConstraint) GetWhenUnsatisfiableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WhenUnsatisfiable, true
}

// SetWhenUnsatisfiable sets field value
func (o *V1TopologySpreadConstraint) SetWhenUnsatisfiable(v string) {
	o.WhenUnsatisfiable = v
}

func (o V1TopologySpreadConstraint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1TopologySpreadConstraint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LabelSelector) {
		toSerialize["labelSelector"] = o.LabelSelector
	}
	if !IsNil(o.MatchLabelKeys) {
		toSerialize["matchLabelKeys"] = o.MatchLabelKeys
	}
	toSerialize["maxSkew"] = o.MaxSkew
	if !IsNil(o.MinDomains) {
		toSerialize["minDomains"] = o.MinDomains
	}
	if !IsNil(o.NodeAffinityPolicy) {
		toSerialize["nodeAffinityPolicy"] = o.NodeAffinityPolicy
	}
	if !IsNil(o.NodeTaintsPolicy) {
		toSerialize["nodeTaintsPolicy"] = o.NodeTaintsPolicy
	}
	toSerialize["topologyKey"] = o.TopologyKey
	toSerialize["whenUnsatisfiable"] = o.WhenUnsatisfiable
	return toSerialize, nil
}

func (o *V1TopologySpreadConstraint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"maxSkew",
		"topologyKey",
		"whenUnsatisfiable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1TopologySpreadConstraint := _V1TopologySpreadConstraint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1TopologySpreadConstraint)

	if err != nil {
		return err
	}

	*o = V1TopologySpreadConstraint(varV1TopologySpreadConstraint)

	return err
}

type NullableV1TopologySpreadConstraint struct {
	value *V1TopologySpreadConstraint
	isSet bool
}

func (v NullableV1TopologySpreadConstraint) Get() *V1TopologySpreadConstraint {
	return v.value
}

func (v *NullableV1TopologySpreadConstraint) Set(val *V1TopologySpreadConstraint) {
	v.value = val
	v.isSet = true
}

func (v NullableV1TopologySpreadConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullableV1TopologySpreadConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1TopologySpreadConstraint(val *V1TopologySpreadConstraint) *NullableV1TopologySpreadConstraint {
	return &NullableV1TopologySpreadConstraint{value: val, isSet: true}
}

func (v NullableV1TopologySpreadConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1TopologySpreadConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


