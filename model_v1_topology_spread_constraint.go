/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1TopologySpreadConstraint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1TopologySpreadConstraint{}

// V1TopologySpreadConstraint TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type V1TopologySpreadConstraint struct {
	LabelSelector *V1LabelSelector `json:"labelSelector,omitempty"`
	// MaxSkew describes the degree to which pods may be unevenly distributed. It's the maximum permitted difference between the number of matching pods in any two topology domains of a given topology type. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: 
	MaxSkew int32 `json:"maxSkew"`
	// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. It's a required field.
	TopologyKey string `json:"topologyKey"`
	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it - ScheduleAnyway tells the scheduler to still schedule it It's considered as \"Unsatisfiable\" if and only if placing incoming pod on any topology violates \"MaxSkew\". For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: 
	WhenUnsatisfiable string `json:"whenUnsatisfiable"`
}

type _V1TopologySpreadConstraint V1TopologySpreadConstraint

// NewV1TopologySpreadConstraint instantiates a new V1TopologySpreadConstraint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1TopologySpreadConstraint(maxSkew int32, topologyKey string, whenUnsatisfiable string) *V1TopologySpreadConstraint {
	this := V1TopologySpreadConstraint{}
	this.MaxSkew = maxSkew
	this.TopologyKey = topologyKey
	this.WhenUnsatisfiable = whenUnsatisfiable
	return &this
}

// NewV1TopologySpreadConstraintWithDefaults instantiates a new V1TopologySpreadConstraint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1TopologySpreadConstraintWithDefaults() *V1TopologySpreadConstraint {
	this := V1TopologySpreadConstraint{}
	return &this
}

// GetLabelSelector returns the LabelSelector field value if set, zero value otherwise.
func (o *V1TopologySpreadConstraint) GetLabelSelector() V1LabelSelector {
	if o == nil || IsNil(o.LabelSelector) {
		var ret V1LabelSelector
		return ret
	}
	return *o.LabelSelector
}

// GetLabelSelectorOk returns a tuple with the LabelSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TopologySpreadConstraint) GetLabelSelectorOk() (*V1LabelSelector, bool) {
	if o == nil || IsNil(o.LabelSelector) {
		return nil, false
	}
	return o.LabelSelector, true
}

// HasLabelSelector returns a boolean if a field has been set.
func (o *V1TopologySpreadConstraint) HasLabelSelector() bool {
	if o != nil && !IsNil(o.LabelSelector) {
		return true
	}

	return false
}

// SetLabelSelector gets a reference to the given V1LabelSelector and assigns it to the LabelSelector field.
func (o *V1TopologySpreadConstraint) SetLabelSelector(v V1LabelSelector) {
	o.LabelSelector = &v
}

// GetMaxSkew returns the MaxSkew field value
func (o *V1TopologySpreadConstraint) GetMaxSkew() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxSkew
}

// GetMaxSkewOk returns a tuple with the MaxSkew field value
// and a boolean to check if the value has been set.
func (o *V1TopologySpreadConstraint) GetMaxSkewOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxSkew, true
}

// SetMaxSkew sets field value
func (o *V1TopologySpreadConstraint) SetMaxSkew(v int32) {
	o.MaxSkew = v
}

// GetTopologyKey returns the TopologyKey field value
func (o *V1TopologySpreadConstraint) GetTopologyKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TopologyKey
}

// GetTopologyKeyOk returns a tuple with the TopologyKey field value
// and a boolean to check if the value has been set.
func (o *V1TopologySpreadConstraint) GetTopologyKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopologyKey, true
}

// SetTopologyKey sets field value
func (o *V1TopologySpreadConstraint) SetTopologyKey(v string) {
	o.TopologyKey = v
}

// GetWhenUnsatisfiable returns the WhenUnsatisfiable field value
func (o *V1TopologySpreadConstraint) GetWhenUnsatisfiable() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WhenUnsatisfiable
}

// GetWhenUnsatisfiableOk returns a tuple with the WhenUnsatisfiable field value
// and a boolean to check if the value has been set.
func (o *V1TopologySpreadConstraint) GetWhenUnsatisfiableOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WhenUnsatisfiable, true
}

// SetWhenUnsatisfiable sets field value
func (o *V1TopologySpreadConstraint) SetWhenUnsatisfiable(v string) {
	o.WhenUnsatisfiable = v
}

func (o V1TopologySpreadConstraint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1TopologySpreadConstraint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LabelSelector) {
		toSerialize["labelSelector"] = o.LabelSelector
	}
	toSerialize["maxSkew"] = o.MaxSkew
	toSerialize["topologyKey"] = o.TopologyKey
	toSerialize["whenUnsatisfiable"] = o.WhenUnsatisfiable
	return toSerialize, nil
}

func (o *V1TopologySpreadConstraint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"maxSkew",
		"topologyKey",
		"whenUnsatisfiable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1TopologySpreadConstraint := _V1TopologySpreadConstraint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1TopologySpreadConstraint)

	if err != nil {
		return err
	}

	*o = V1TopologySpreadConstraint(varV1TopologySpreadConstraint)

	return err
}

type NullableV1TopologySpreadConstraint struct {
	value *V1TopologySpreadConstraint
	isSet bool
}

func (v NullableV1TopologySpreadConstraint) Get() *V1TopologySpreadConstraint {
	return v.value
}

func (v *NullableV1TopologySpreadConstraint) Set(val *V1TopologySpreadConstraint) {
	v.value = val
	v.isSet = true
}

func (v NullableV1TopologySpreadConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullableV1TopologySpreadConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1TopologySpreadConstraint(val *V1TopologySpreadConstraint) *NullableV1TopologySpreadConstraint {
	return &NullableV1TopologySpreadConstraint{value: val, isSet: true}
}

func (v NullableV1TopologySpreadConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1TopologySpreadConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


