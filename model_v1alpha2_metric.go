/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1alpha2Metric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha2Metric{}

// V1alpha2Metric struct for V1alpha2Metric
type V1alpha2Metric struct {
	Max float64 `json:"max"`
	Min float64 `json:"min"`
	Samples []V1alpha2Sample `json:"samples,omitempty"`
}

type _V1alpha2Metric V1alpha2Metric

// NewV1alpha2Metric instantiates a new V1alpha2Metric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha2Metric(max float64, min float64) *V1alpha2Metric {
	this := V1alpha2Metric{}
	this.Max = max
	this.Min = min
	return &this
}

// NewV1alpha2MetricWithDefaults instantiates a new V1alpha2Metric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha2MetricWithDefaults() *V1alpha2Metric {
	this := V1alpha2Metric{}
	return &this
}

// GetMax returns the Max field value
func (o *V1alpha2Metric) GetMax() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Max
}

// GetMaxOk returns a tuple with the Max field value
// and a boolean to check if the value has been set.
func (o *V1alpha2Metric) GetMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Max, true
}

// SetMax sets field value
func (o *V1alpha2Metric) SetMax(v float64) {
	o.Max = v
}

// GetMin returns the Min field value
func (o *V1alpha2Metric) GetMin() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Min
}

// GetMinOk returns a tuple with the Min field value
// and a boolean to check if the value has been set.
func (o *V1alpha2Metric) GetMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Min, true
}

// SetMin sets field value
func (o *V1alpha2Metric) SetMin(v float64) {
	o.Min = v
}

// GetSamples returns the Samples field value if set, zero value otherwise.
func (o *V1alpha2Metric) GetSamples() []V1alpha2Sample {
	if o == nil || IsNil(o.Samples) {
		var ret []V1alpha2Sample
		return ret
	}
	return o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha2Metric) GetSamplesOk() ([]V1alpha2Sample, bool) {
	if o == nil || IsNil(o.Samples) {
		return nil, false
	}
	return o.Samples, true
}

// HasSamples returns a boolean if a field has been set.
func (o *V1alpha2Metric) HasSamples() bool {
	if o != nil && !IsNil(o.Samples) {
		return true
	}

	return false
}

// SetSamples gets a reference to the given []V1alpha2Sample and assigns it to the Samples field.
func (o *V1alpha2Metric) SetSamples(v []V1alpha2Sample) {
	o.Samples = v
}

func (o V1alpha2Metric) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha2Metric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["max"] = o.Max
	toSerialize["min"] = o.Min
	if !IsNil(o.Samples) {
		toSerialize["samples"] = o.Samples
	}
	return toSerialize, nil
}

func (o *V1alpha2Metric) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"max",
		"min",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1alpha2Metric := _V1alpha2Metric{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1alpha2Metric)

	if err != nil {
		return err
	}

	*o = V1alpha2Metric(varV1alpha2Metric)

	return err
}

type NullableV1alpha2Metric struct {
	value *V1alpha2Metric
	isSet bool
}

func (v NullableV1alpha2Metric) Get() *V1alpha2Metric {
	return v.value
}

func (v *NullableV1alpha2Metric) Set(val *V1alpha2Metric) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha2Metric) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha2Metric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha2Metric(val *V1alpha2Metric) *NullableV1alpha2Metric {
	return &NullableV1alpha2Metric{value: val, isSet: true}
}

func (v NullableV1alpha2Metric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha2Metric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


