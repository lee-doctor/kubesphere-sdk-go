/*
KubeSphere

KubeSphere OpenAPI

API version: v3.1.0
Contact: info@kubesphere.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PodMetricsAPIService PodMetricsAPI service
type PodMetricsAPIService service

type ApiHandleAllPodMetricsQueryRequest struct {
	ctx context.Context
	ApiService *PodMetricsAPIService
	node string
	metricsFilter *string
	resourcesFilter *string
	start *string
	end *string
	step *string
	time *string
	sortMetric *string
	sortType *string
	page *int32
	limit *int32
}

// The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both pod CPU usage and memory usage: &#x60;pod_cpu_usage|pod_memory_usage&#x60;. View available metrics at [kubesphere.io](https://v2-0.docs.kubesphere.io/docs/api-reference/monitoring-metrics/).
func (r ApiHandleAllPodMetricsQueryRequest) MetricsFilter(metricsFilter string) ApiHandleAllPodMetricsQueryRequest {
	r.metricsFilter = &metricsFilter
	return r
}

// The pod filter consists of a regexp pattern. It specifies which pod data to return. For example, the following filter matches any pod whose name begins with redis: &#x60;redis.*&#x60;.
func (r ApiHandleAllPodMetricsQueryRequest) ResourcesFilter(resourcesFilter string) ApiHandleAllPodMetricsQueryRequest {
	r.resourcesFilter = &resourcesFilter
	return r
}

// Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. 
func (r ApiHandleAllPodMetricsQueryRequest) Start(start string) ApiHandleAllPodMetricsQueryRequest {
	r.start = &start
	return r
}

// End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. 
func (r ApiHandleAllPodMetricsQueryRequest) End(end string) ApiHandleAllPodMetricsQueryRequest {
	r.end = &end
	return r
}

// Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).
func (r ApiHandleAllPodMetricsQueryRequest) Step(step string) ApiHandleAllPodMetricsQueryRequest {
	r.step = &step
	return r
}

// A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.
func (r ApiHandleAllPodMetricsQueryRequest) Time(time string) ApiHandleAllPodMetricsQueryRequest {
	r.time = &time
	return r
}

// Sort pods by the specified metric. Not applicable if **start** and **end** are provided.
func (r ApiHandleAllPodMetricsQueryRequest) SortMetric(sortMetric string) ApiHandleAllPodMetricsQueryRequest {
	r.sortMetric = &sortMetric
	return r
}

// Sort order. One of asc, desc.
func (r ApiHandleAllPodMetricsQueryRequest) SortType(sortType string) ApiHandleAllPodMetricsQueryRequest {
	r.sortType = &sortType
	return r
}

// The page number. This field paginates result data of each metric, then returns a specific page. For example, setting **page** to 2 returns the second page. It only applies to sorted metric data.
func (r ApiHandleAllPodMetricsQueryRequest) Page(page int32) ApiHandleAllPodMetricsQueryRequest {
	r.page = &page
	return r
}

// Page size, the maximum number of results in a single page. Defaults to 5.
func (r ApiHandleAllPodMetricsQueryRequest) Limit(limit int32) ApiHandleAllPodMetricsQueryRequest {
	r.limit = &limit
	return r
}

func (r ApiHandleAllPodMetricsQueryRequest) Execute() (*MonitoringMetrics, *http.Response, error) {
	return r.ApiService.HandleAllPodMetricsQueryExecute(r)
}

/*
HandleAllPodMetricsQuery Get pod-level metric data of all pods on a specific node.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param node Node name.
 @return ApiHandleAllPodMetricsQueryRequest
*/
func (a *PodMetricsAPIService) HandleAllPodMetricsQuery(ctx context.Context, node string) ApiHandleAllPodMetricsQueryRequest {
	return ApiHandleAllPodMetricsQueryRequest{
		ApiService: a,
		ctx: ctx,
		node: node,
	}
}

// Execute executes the request
//  @return MonitoringMetrics
func (a *PodMetricsAPIService) HandleAllPodMetricsQueryExecute(r ApiHandleAllPodMetricsQueryRequest) (*MonitoringMetrics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MonitoringMetrics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PodMetricsAPIService.HandleAllPodMetricsQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/monitoring.kubesphere.io/v1alpha3/nodes/{node}/pods"
	localVarPath = strings.Replace(localVarPath, "{"+"node"+"}", url.PathEscape(parameterValueToString(r.node, "node")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.metricsFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metrics_filter", r.metricsFilter, "form", "")
	}
	if r.resourcesFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resources_filter", r.resourcesFilter, "form", "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "form", "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "form", "")
	}
	if r.step != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "step", r.step, "form", "")
	} else {
		var defaultValue string = "10m"
		r.step = &defaultValue
	}
	if r.time != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "time", r.time, "form", "")
	}
	if r.sortMetric != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_metric", r.sortMetric, "form", "")
	}
	if r.sortType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_type", r.sortType, "form", "")
	} else {
		var defaultValue string = "desc."
		r.sortType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 5
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleClusterPodMetricsQueryRequest struct {
	ctx context.Context
	ApiService *PodMetricsAPIService
	metricsFilter *string
	resourcesFilter *string
	start *string
	end *string
	step *string
	time *string
	sortMetric *string
	sortType *string
	page *int32
	limit *int32
}

// The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both pod CPU usage and memory usage: &#x60;pod_cpu_usage|pod_memory_usage&#x60;. View available metrics at [kubesphere.io](https://v2-0.docs.kubesphere.io/docs/api-reference/monitoring-metrics/).
func (r ApiHandleClusterPodMetricsQueryRequest) MetricsFilter(metricsFilter string) ApiHandleClusterPodMetricsQueryRequest {
	r.metricsFilter = &metricsFilter
	return r
}

// The pod filter consists of a regexp pattern. It specifies which pod data to return. For example, the following filter matches any pod whose name begins with redis: &#x60;redis.*&#x60;.
func (r ApiHandleClusterPodMetricsQueryRequest) ResourcesFilter(resourcesFilter string) ApiHandleClusterPodMetricsQueryRequest {
	r.resourcesFilter = &resourcesFilter
	return r
}

// Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. 
func (r ApiHandleClusterPodMetricsQueryRequest) Start(start string) ApiHandleClusterPodMetricsQueryRequest {
	r.start = &start
	return r
}

// End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. 
func (r ApiHandleClusterPodMetricsQueryRequest) End(end string) ApiHandleClusterPodMetricsQueryRequest {
	r.end = &end
	return r
}

// Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).
func (r ApiHandleClusterPodMetricsQueryRequest) Step(step string) ApiHandleClusterPodMetricsQueryRequest {
	r.step = &step
	return r
}

// A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.
func (r ApiHandleClusterPodMetricsQueryRequest) Time(time string) ApiHandleClusterPodMetricsQueryRequest {
	r.time = &time
	return r
}

// Sort pods by the specified metric. Not applicable if **start** and **end** are provided.
func (r ApiHandleClusterPodMetricsQueryRequest) SortMetric(sortMetric string) ApiHandleClusterPodMetricsQueryRequest {
	r.sortMetric = &sortMetric
	return r
}

// Sort order. One of asc, desc.
func (r ApiHandleClusterPodMetricsQueryRequest) SortType(sortType string) ApiHandleClusterPodMetricsQueryRequest {
	r.sortType = &sortType
	return r
}

// The page number. This field paginates result data of each metric, then returns a specific page. For example, setting **page** to 2 returns the second page. It only applies to sorted metric data.
func (r ApiHandleClusterPodMetricsQueryRequest) Page(page int32) ApiHandleClusterPodMetricsQueryRequest {
	r.page = &page
	return r
}

// Page size, the maximum number of results in a single page. Defaults to 5.
func (r ApiHandleClusterPodMetricsQueryRequest) Limit(limit int32) ApiHandleClusterPodMetricsQueryRequest {
	r.limit = &limit
	return r
}

func (r ApiHandleClusterPodMetricsQueryRequest) Execute() (*MonitoringMetrics, *http.Response, error) {
	return r.ApiService.HandleClusterPodMetricsQueryExecute(r)
}

/*
HandleClusterPodMetricsQuery Get pod-level metric data of the whole cluster's pods.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiHandleClusterPodMetricsQueryRequest
*/
func (a *PodMetricsAPIService) HandleClusterPodMetricsQuery(ctx context.Context) ApiHandleClusterPodMetricsQueryRequest {
	return ApiHandleClusterPodMetricsQueryRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MonitoringMetrics
func (a *PodMetricsAPIService) HandleClusterPodMetricsQueryExecute(r ApiHandleClusterPodMetricsQueryRequest) (*MonitoringMetrics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MonitoringMetrics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PodMetricsAPIService.HandleClusterPodMetricsQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/monitoring.kubesphere.io/v1alpha3/pods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.metricsFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metrics_filter", r.metricsFilter, "form", "")
	}
	if r.resourcesFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resources_filter", r.resourcesFilter, "form", "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "form", "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "form", "")
	}
	if r.step != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "step", r.step, "form", "")
	} else {
		var defaultValue string = "10m"
		r.step = &defaultValue
	}
	if r.time != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "time", r.time, "form", "")
	}
	if r.sortMetric != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_metric", r.sortMetric, "form", "")
	}
	if r.sortType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_type", r.sortType, "form", "")
	} else {
		var defaultValue string = "desc."
		r.sortType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 5
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleNamespacePodMetricsQueryRequest struct {
	ctx context.Context
	ApiService *PodMetricsAPIService
	namespace string
	metricsFilter *string
	resourcesFilter *string
	start *string
	end *string
	step *string
	time *string
	sortMetric *string
	sortType *string
	page *int32
	limit *int32
}

// The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both pod CPU usage and memory usage: &#x60;pod_cpu_usage|pod_memory_usage&#x60;. View available metrics at [kubesphere.io](https://v2-0.docs.kubesphere.io/docs/api-reference/monitoring-metrics/).
func (r ApiHandleNamespacePodMetricsQueryRequest) MetricsFilter(metricsFilter string) ApiHandleNamespacePodMetricsQueryRequest {
	r.metricsFilter = &metricsFilter
	return r
}

// The pod filter consists of a regexp pattern. It specifies which pod data to return. For example, the following filter matches any pod whose name begins with redis: &#x60;redis.*&#x60;.
func (r ApiHandleNamespacePodMetricsQueryRequest) ResourcesFilter(resourcesFilter string) ApiHandleNamespacePodMetricsQueryRequest {
	r.resourcesFilter = &resourcesFilter
	return r
}

// Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. 
func (r ApiHandleNamespacePodMetricsQueryRequest) Start(start string) ApiHandleNamespacePodMetricsQueryRequest {
	r.start = &start
	return r
}

// End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. 
func (r ApiHandleNamespacePodMetricsQueryRequest) End(end string) ApiHandleNamespacePodMetricsQueryRequest {
	r.end = &end
	return r
}

// Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).
func (r ApiHandleNamespacePodMetricsQueryRequest) Step(step string) ApiHandleNamespacePodMetricsQueryRequest {
	r.step = &step
	return r
}

// A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.
func (r ApiHandleNamespacePodMetricsQueryRequest) Time(time string) ApiHandleNamespacePodMetricsQueryRequest {
	r.time = &time
	return r
}

// Sort pods by the specified metric. Not applicable if **start** and **end** are provided.
func (r ApiHandleNamespacePodMetricsQueryRequest) SortMetric(sortMetric string) ApiHandleNamespacePodMetricsQueryRequest {
	r.sortMetric = &sortMetric
	return r
}

// Sort order. One of asc, desc.
func (r ApiHandleNamespacePodMetricsQueryRequest) SortType(sortType string) ApiHandleNamespacePodMetricsQueryRequest {
	r.sortType = &sortType
	return r
}

// The page number. This field paginates result data of each metric, then returns a specific page. For example, setting **page** to 2 returns the second page. It only applies to sorted metric data.
func (r ApiHandleNamespacePodMetricsQueryRequest) Page(page int32) ApiHandleNamespacePodMetricsQueryRequest {
	r.page = &page
	return r
}

// Page size, the maximum number of results in a single page. Defaults to 5.
func (r ApiHandleNamespacePodMetricsQueryRequest) Limit(limit int32) ApiHandleNamespacePodMetricsQueryRequest {
	r.limit = &limit
	return r
}

func (r ApiHandleNamespacePodMetricsQueryRequest) Execute() (*MonitoringMetrics, *http.Response, error) {
	return r.ApiService.HandleNamespacePodMetricsQueryExecute(r)
}

/*
HandleNamespacePodMetricsQuery Get pod-level metric data of the specific namespace's pods.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace The name of the namespace.
 @return ApiHandleNamespacePodMetricsQueryRequest
*/
func (a *PodMetricsAPIService) HandleNamespacePodMetricsQuery(ctx context.Context, namespace string) ApiHandleNamespacePodMetricsQueryRequest {
	return ApiHandleNamespacePodMetricsQueryRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
	}
}

// Execute executes the request
//  @return MonitoringMetrics
func (a *PodMetricsAPIService) HandleNamespacePodMetricsQueryExecute(r ApiHandleNamespacePodMetricsQueryRequest) (*MonitoringMetrics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MonitoringMetrics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PodMetricsAPIService.HandleNamespacePodMetricsQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/monitoring.kubesphere.io/v1alpha3/namespaces/{namespace}/pods"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.metricsFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metrics_filter", r.metricsFilter, "form", "")
	}
	if r.resourcesFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resources_filter", r.resourcesFilter, "form", "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "form", "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "form", "")
	}
	if r.step != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "step", r.step, "form", "")
	} else {
		var defaultValue string = "10m"
		r.step = &defaultValue
	}
	if r.time != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "time", r.time, "form", "")
	}
	if r.sortMetric != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_metric", r.sortMetric, "form", "")
	}
	if r.sortType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_type", r.sortType, "form", "")
	} else {
		var defaultValue string = "desc."
		r.sortType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 5
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandlePodMetricsQueryRequest struct {
	ctx context.Context
	ApiService *PodMetricsAPIService
	node string
	pod string
	metricsFilter *string
	start *string
	end *string
	step *string
	time *string
}

// The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both pod CPU usage and memory usage: &#x60;pod_cpu_usage|pod_memory_usage&#x60;. View available metrics at [kubesphere.io](https://v2-0.docs.kubesphere.io/docs/api-reference/monitoring-metrics/).
func (r ApiHandlePodMetricsQueryRequest) MetricsFilter(metricsFilter string) ApiHandlePodMetricsQueryRequest {
	r.metricsFilter = &metricsFilter
	return r
}

// Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. 
func (r ApiHandlePodMetricsQueryRequest) Start(start string) ApiHandlePodMetricsQueryRequest {
	r.start = &start
	return r
}

// End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. 
func (r ApiHandlePodMetricsQueryRequest) End(end string) ApiHandlePodMetricsQueryRequest {
	r.end = &end
	return r
}

// Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).
func (r ApiHandlePodMetricsQueryRequest) Step(step string) ApiHandlePodMetricsQueryRequest {
	r.step = &step
	return r
}

// A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.
func (r ApiHandlePodMetricsQueryRequest) Time(time string) ApiHandlePodMetricsQueryRequest {
	r.time = &time
	return r
}

func (r ApiHandlePodMetricsQueryRequest) Execute() (*MonitoringMetrics, *http.Response, error) {
	return r.ApiService.HandlePodMetricsQueryExecute(r)
}

/*
HandlePodMetricsQuery Get pod-level metric data of a specific pod. Navigate to the pod by the node where it is scheduled.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param node Node name.
 @param pod Pod name.
 @return ApiHandlePodMetricsQueryRequest
*/
func (a *PodMetricsAPIService) HandlePodMetricsQuery(ctx context.Context, node string, pod string) ApiHandlePodMetricsQueryRequest {
	return ApiHandlePodMetricsQueryRequest{
		ApiService: a,
		ctx: ctx,
		node: node,
		pod: pod,
	}
}

// Execute executes the request
//  @return MonitoringMetrics
func (a *PodMetricsAPIService) HandlePodMetricsQueryExecute(r ApiHandlePodMetricsQueryRequest) (*MonitoringMetrics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MonitoringMetrics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PodMetricsAPIService.HandlePodMetricsQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/monitoring.kubesphere.io/v1alpha3/nodes/{node}/pods/{pod}"
	localVarPath = strings.Replace(localVarPath, "{"+"node"+"}", url.PathEscape(parameterValueToString(r.node, "node")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pod"+"}", url.PathEscape(parameterValueToString(r.pod, "pod")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.metricsFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metrics_filter", r.metricsFilter, "form", "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "form", "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "form", "")
	}
	if r.step != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "step", r.step, "form", "")
	} else {
		var defaultValue string = "10m"
		r.step = &defaultValue
	}
	if r.time != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "time", r.time, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleSpecificPodMetricsQueryRequest struct {
	ctx context.Context
	ApiService *PodMetricsAPIService
	namespace string
	pod string
	metricsFilter *string
	start *string
	end *string
	step *string
	time *string
}

// The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both pod CPU usage and memory usage: &#x60;pod_cpu_usage|pod_memory_usage&#x60;. View available metrics at [kubesphere.io](https://v2-0.docs.kubesphere.io/docs/api-reference/monitoring-metrics/).
func (r ApiHandleSpecificPodMetricsQueryRequest) MetricsFilter(metricsFilter string) ApiHandleSpecificPodMetricsQueryRequest {
	r.metricsFilter = &metricsFilter
	return r
}

// Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. 
func (r ApiHandleSpecificPodMetricsQueryRequest) Start(start string) ApiHandleSpecificPodMetricsQueryRequest {
	r.start = &start
	return r
}

// End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. 
func (r ApiHandleSpecificPodMetricsQueryRequest) End(end string) ApiHandleSpecificPodMetricsQueryRequest {
	r.end = &end
	return r
}

// Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).
func (r ApiHandleSpecificPodMetricsQueryRequest) Step(step string) ApiHandleSpecificPodMetricsQueryRequest {
	r.step = &step
	return r
}

// A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.
func (r ApiHandleSpecificPodMetricsQueryRequest) Time(time string) ApiHandleSpecificPodMetricsQueryRequest {
	r.time = &time
	return r
}

func (r ApiHandleSpecificPodMetricsQueryRequest) Execute() (*MonitoringMetrics, *http.Response, error) {
	return r.ApiService.HandleSpecificPodMetricsQueryExecute(r)
}

/*
HandleSpecificPodMetricsQuery Get pod-level metric data of a specific pod. Navigate to the pod by the pod's namespace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace The name of the namespace.
 @param pod Pod name.
 @return ApiHandleSpecificPodMetricsQueryRequest
*/
func (a *PodMetricsAPIService) HandleSpecificPodMetricsQuery(ctx context.Context, namespace string, pod string) ApiHandleSpecificPodMetricsQueryRequest {
	return ApiHandleSpecificPodMetricsQueryRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
		pod: pod,
	}
}

// Execute executes the request
//  @return MonitoringMetrics
func (a *PodMetricsAPIService) HandleSpecificPodMetricsQueryExecute(r ApiHandleSpecificPodMetricsQueryRequest) (*MonitoringMetrics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MonitoringMetrics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PodMetricsAPIService.HandleSpecificPodMetricsQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/monitoring.kubesphere.io/v1alpha3/namespaces/{namespace}/pods/{pod}"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"pod"+"}", url.PathEscape(parameterValueToString(r.pod, "pod")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.metricsFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metrics_filter", r.metricsFilter, "form", "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "form", "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "form", "")
	}
	if r.step != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "step", r.step, "form", "")
	} else {
		var defaultValue string = "10m"
		r.step = &defaultValue
	}
	if r.time != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "time", r.time, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHandleSpecificWorkloadPodMetricsQueryRequest struct {
	ctx context.Context
	ApiService *PodMetricsAPIService
	namespace string
	kind string
	workload string
	metricsFilter *string
	resourcesFilter *string
	start *string
	end *string
	step *string
	time *string
	sortMetric *string
	sortType *string
	page *int32
	limit *int32
}

// The metric name filter consists of a regexp pattern. It specifies which metric data to return. For example, the following filter matches both pod CPU usage and memory usage: &#x60;pod_cpu_usage|pod_memory_usage&#x60;. View available metrics at [kubesphere.io](https://v2-0.docs.kubesphere.io/docs/api-reference/monitoring-metrics/).
func (r ApiHandleSpecificWorkloadPodMetricsQueryRequest) MetricsFilter(metricsFilter string) ApiHandleSpecificWorkloadPodMetricsQueryRequest {
	r.metricsFilter = &metricsFilter
	return r
}

// The pod filter consists of a regexp pattern. It specifies which pod data to return. For example, the following filter matches any pod whose name begins with redis: &#x60;redis.*&#x60;.
func (r ApiHandleSpecificWorkloadPodMetricsQueryRequest) ResourcesFilter(resourcesFilter string) ApiHandleSpecificWorkloadPodMetricsQueryRequest {
	r.resourcesFilter = &resourcesFilter
	return r
}

// Start time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1559347200. 
func (r ApiHandleSpecificWorkloadPodMetricsQueryRequest) Start(start string) ApiHandleSpecificWorkloadPodMetricsQueryRequest {
	r.start = &start
	return r
}

// End time of query. Use **start** and **end** to retrieve metric data over a time span. It is a string with Unix time format, eg. 1561939200. 
func (r ApiHandleSpecificWorkloadPodMetricsQueryRequest) End(end string) ApiHandleSpecificWorkloadPodMetricsQueryRequest {
	r.end = &end
	return r
}

// Time interval. Retrieve metric data at a fixed interval within the time range of start and end. It requires both **start** and **end** are provided. The format is [0-9]+[smhdwy]. Defaults to 10m (i.e. 10 min).
func (r ApiHandleSpecificWorkloadPodMetricsQueryRequest) Step(step string) ApiHandleSpecificWorkloadPodMetricsQueryRequest {
	r.step = &step
	return r
}

// A timestamp in Unix time format. Retrieve metric data at a single point in time. Defaults to now. Time and the combination of start, end, step are mutually exclusive.
func (r ApiHandleSpecificWorkloadPodMetricsQueryRequest) Time(time string) ApiHandleSpecificWorkloadPodMetricsQueryRequest {
	r.time = &time
	return r
}

// Sort pods by the specified metric. Not applicable if **start** and **end** are provided.
func (r ApiHandleSpecificWorkloadPodMetricsQueryRequest) SortMetric(sortMetric string) ApiHandleSpecificWorkloadPodMetricsQueryRequest {
	r.sortMetric = &sortMetric
	return r
}

// Sort order. One of asc, desc.
func (r ApiHandleSpecificWorkloadPodMetricsQueryRequest) SortType(sortType string) ApiHandleSpecificWorkloadPodMetricsQueryRequest {
	r.sortType = &sortType
	return r
}

// The page number. This field paginates result data of each metric, then returns a specific page. For example, setting **page** to 2 returns the second page. It only applies to sorted metric data.
func (r ApiHandleSpecificWorkloadPodMetricsQueryRequest) Page(page int32) ApiHandleSpecificWorkloadPodMetricsQueryRequest {
	r.page = &page
	return r
}

// Page size, the maximum number of results in a single page. Defaults to 5.
func (r ApiHandleSpecificWorkloadPodMetricsQueryRequest) Limit(limit int32) ApiHandleSpecificWorkloadPodMetricsQueryRequest {
	r.limit = &limit
	return r
}

func (r ApiHandleSpecificWorkloadPodMetricsQueryRequest) Execute() (*MonitoringMetrics, *http.Response, error) {
	return r.ApiService.HandleSpecificWorkloadPodMetricsQueryExecute(r)
}

/*
HandleSpecificWorkloadPodMetricsQuery Get pod-level metric data of a specific workload's pods. Navigate to the workload by the namespace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param namespace The name of the namespace.
 @param kind Workload kind. One of deployment, daemonset, statefulset.
 @param workload Workload name.
 @return ApiHandleSpecificWorkloadPodMetricsQueryRequest
*/
func (a *PodMetricsAPIService) HandleSpecificWorkloadPodMetricsQuery(ctx context.Context, namespace string, kind string, workload string) ApiHandleSpecificWorkloadPodMetricsQueryRequest {
	return ApiHandleSpecificWorkloadPodMetricsQueryRequest{
		ApiService: a,
		ctx: ctx,
		namespace: namespace,
		kind: kind,
		workload: workload,
	}
}

// Execute executes the request
//  @return MonitoringMetrics
func (a *PodMetricsAPIService) HandleSpecificWorkloadPodMetricsQueryExecute(r ApiHandleSpecificWorkloadPodMetricsQueryRequest) (*MonitoringMetrics, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MonitoringMetrics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PodMetricsAPIService.HandleSpecificWorkloadPodMetricsQuery")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/kapis/monitoring.kubesphere.io/v1alpha3/namespaces/{namespace}/workloads/{kind}/{workload}/pods"
	localVarPath = strings.Replace(localVarPath, "{"+"namespace"+"}", url.PathEscape(parameterValueToString(r.namespace, "namespace")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kind"+"}", url.PathEscape(parameterValueToString(r.kind, "kind")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workload"+"}", url.PathEscape(parameterValueToString(r.workload, "workload")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.metricsFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metrics_filter", r.metricsFilter, "form", "")
	}
	if r.resourcesFilter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resources_filter", r.resourcesFilter, "form", "")
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "form", "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "form", "")
	}
	if r.step != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "step", r.step, "form", "")
	} else {
		var defaultValue string = "10m"
		r.step = &defaultValue
	}
	if r.time != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "time", r.time, "form", "")
	}
	if r.sortMetric != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_metric", r.sortMetric, "form", "")
	}
	if r.sortType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort_type", r.sortType, "form", "")
	} else {
		var defaultValue string = "desc."
		r.sortType = &defaultValue
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int32 = 5
		r.limit = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["jwt"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
