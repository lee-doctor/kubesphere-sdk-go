/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V2ImageConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V2ImageConfig{}

// V2ImageConfig struct for V2ImageConfig
type V2ImageConfig struct {
	ConfigFile V1ConfigFile `json:"ConfigFile"`
}

type _V2ImageConfig V2ImageConfig

// NewV2ImageConfig instantiates a new V2ImageConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV2ImageConfig(configFile V1ConfigFile) *V2ImageConfig {
	this := V2ImageConfig{}
	this.ConfigFile = configFile
	return &this
}

// NewV2ImageConfigWithDefaults instantiates a new V2ImageConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV2ImageConfigWithDefaults() *V2ImageConfig {
	this := V2ImageConfig{}
	return &this
}

// GetConfigFile returns the ConfigFile field value
func (o *V2ImageConfig) GetConfigFile() V1ConfigFile {
	if o == nil {
		var ret V1ConfigFile
		return ret
	}

	return o.ConfigFile
}

// GetConfigFileOk returns a tuple with the ConfigFile field value
// and a boolean to check if the value has been set.
func (o *V2ImageConfig) GetConfigFileOk() (*V1ConfigFile, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfigFile, true
}

// SetConfigFile sets field value
func (o *V2ImageConfig) SetConfigFile(v V1ConfigFile) {
	o.ConfigFile = v
}

func (o V2ImageConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V2ImageConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ConfigFile"] = o.ConfigFile
	return toSerialize, nil
}

func (o *V2ImageConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ConfigFile",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV2ImageConfig := _V2ImageConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV2ImageConfig)

	if err != nil {
		return err
	}

	*o = V2ImageConfig(varV2ImageConfig)

	return err
}

type NullableV2ImageConfig struct {
	value *V2ImageConfig
	isSet bool
}

func (v NullableV2ImageConfig) Get() *V2ImageConfig {
	return v.value
}

func (v *NullableV2ImageConfig) Set(val *V2ImageConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableV2ImageConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableV2ImageConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV2ImageConfig(val *V2ImageConfig) *NullableV2ImageConfig {
	return &NullableV2ImageConfig{value: val, isSet: true}
}

func (v NullableV2ImageConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV2ImageConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


