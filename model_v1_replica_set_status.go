/*
KS API

KubeSphere OpenAPI

API version: v4.1.1
Contact: support@kubesphere.cloud
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1ReplicaSetStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ReplicaSetStatus{}

// V1ReplicaSetStatus ReplicaSetStatus represents the current status of a ReplicaSet.
type V1ReplicaSetStatus struct {
	// The number of available replicas (ready for at least minReadySeconds) for this replica set.
	AvailableReplicas *int32 `json:"availableReplicas,omitempty"`
	// Represents the latest available observations of a replica set's current state.
	Conditions []V1ReplicaSetCondition `json:"conditions,omitempty"`
	// The number of pods that have labels matching the labels of the pod template of the replicaset.
	FullyLabeledReplicas *int32 `json:"fullyLabeledReplicas,omitempty"`
	// ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`
	// readyReplicas is the number of pods targeted by this ReplicaSet with a Ready Condition.
	ReadyReplicas *int32 `json:"readyReplicas,omitempty"`
	// Replicas is the most recently observed number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
	Replicas int32 `json:"replicas"`
}

type _V1ReplicaSetStatus V1ReplicaSetStatus

// NewV1ReplicaSetStatus instantiates a new V1ReplicaSetStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ReplicaSetStatus(replicas int32) *V1ReplicaSetStatus {
	this := V1ReplicaSetStatus{}
	this.Replicas = replicas
	return &this
}

// NewV1ReplicaSetStatusWithDefaults instantiates a new V1ReplicaSetStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ReplicaSetStatusWithDefaults() *V1ReplicaSetStatus {
	this := V1ReplicaSetStatus{}
	return &this
}

// GetAvailableReplicas returns the AvailableReplicas field value if set, zero value otherwise.
func (o *V1ReplicaSetStatus) GetAvailableReplicas() int32 {
	if o == nil || IsNil(o.AvailableReplicas) {
		var ret int32
		return ret
	}
	return *o.AvailableReplicas
}

// GetAvailableReplicasOk returns a tuple with the AvailableReplicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ReplicaSetStatus) GetAvailableReplicasOk() (*int32, bool) {
	if o == nil || IsNil(o.AvailableReplicas) {
		return nil, false
	}
	return o.AvailableReplicas, true
}

// HasAvailableReplicas returns a boolean if a field has been set.
func (o *V1ReplicaSetStatus) HasAvailableReplicas() bool {
	if o != nil && !IsNil(o.AvailableReplicas) {
		return true
	}

	return false
}

// SetAvailableReplicas gets a reference to the given int32 and assigns it to the AvailableReplicas field.
func (o *V1ReplicaSetStatus) SetAvailableReplicas(v int32) {
	o.AvailableReplicas = &v
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *V1ReplicaSetStatus) GetConditions() []V1ReplicaSetCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []V1ReplicaSetCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ReplicaSetStatus) GetConditionsOk() ([]V1ReplicaSetCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *V1ReplicaSetStatus) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []V1ReplicaSetCondition and assigns it to the Conditions field.
func (o *V1ReplicaSetStatus) SetConditions(v []V1ReplicaSetCondition) {
	o.Conditions = v
}

// GetFullyLabeledReplicas returns the FullyLabeledReplicas field value if set, zero value otherwise.
func (o *V1ReplicaSetStatus) GetFullyLabeledReplicas() int32 {
	if o == nil || IsNil(o.FullyLabeledReplicas) {
		var ret int32
		return ret
	}
	return *o.FullyLabeledReplicas
}

// GetFullyLabeledReplicasOk returns a tuple with the FullyLabeledReplicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ReplicaSetStatus) GetFullyLabeledReplicasOk() (*int32, bool) {
	if o == nil || IsNil(o.FullyLabeledReplicas) {
		return nil, false
	}
	return o.FullyLabeledReplicas, true
}

// HasFullyLabeledReplicas returns a boolean if a field has been set.
func (o *V1ReplicaSetStatus) HasFullyLabeledReplicas() bool {
	if o != nil && !IsNil(o.FullyLabeledReplicas) {
		return true
	}

	return false
}

// SetFullyLabeledReplicas gets a reference to the given int32 and assigns it to the FullyLabeledReplicas field.
func (o *V1ReplicaSetStatus) SetFullyLabeledReplicas(v int32) {
	o.FullyLabeledReplicas = &v
}

// GetObservedGeneration returns the ObservedGeneration field value if set, zero value otherwise.
func (o *V1ReplicaSetStatus) GetObservedGeneration() int64 {
	if o == nil || IsNil(o.ObservedGeneration) {
		var ret int64
		return ret
	}
	return *o.ObservedGeneration
}

// GetObservedGenerationOk returns a tuple with the ObservedGeneration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ReplicaSetStatus) GetObservedGenerationOk() (*int64, bool) {
	if o == nil || IsNil(o.ObservedGeneration) {
		return nil, false
	}
	return o.ObservedGeneration, true
}

// HasObservedGeneration returns a boolean if a field has been set.
func (o *V1ReplicaSetStatus) HasObservedGeneration() bool {
	if o != nil && !IsNil(o.ObservedGeneration) {
		return true
	}

	return false
}

// SetObservedGeneration gets a reference to the given int64 and assigns it to the ObservedGeneration field.
func (o *V1ReplicaSetStatus) SetObservedGeneration(v int64) {
	o.ObservedGeneration = &v
}

// GetReadyReplicas returns the ReadyReplicas field value if set, zero value otherwise.
func (o *V1ReplicaSetStatus) GetReadyReplicas() int32 {
	if o == nil || IsNil(o.ReadyReplicas) {
		var ret int32
		return ret
	}
	return *o.ReadyReplicas
}

// GetReadyReplicasOk returns a tuple with the ReadyReplicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ReplicaSetStatus) GetReadyReplicasOk() (*int32, bool) {
	if o == nil || IsNil(o.ReadyReplicas) {
		return nil, false
	}
	return o.ReadyReplicas, true
}

// HasReadyReplicas returns a boolean if a field has been set.
func (o *V1ReplicaSetStatus) HasReadyReplicas() bool {
	if o != nil && !IsNil(o.ReadyReplicas) {
		return true
	}

	return false
}

// SetReadyReplicas gets a reference to the given int32 and assigns it to the ReadyReplicas field.
func (o *V1ReplicaSetStatus) SetReadyReplicas(v int32) {
	o.ReadyReplicas = &v
}

// GetReplicas returns the Replicas field value
func (o *V1ReplicaSetStatus) GetReplicas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value
// and a boolean to check if the value has been set.
func (o *V1ReplicaSetStatus) GetReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Replicas, true
}

// SetReplicas sets field value
func (o *V1ReplicaSetStatus) SetReplicas(v int32) {
	o.Replicas = v
}

func (o V1ReplicaSetStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ReplicaSetStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvailableReplicas) {
		toSerialize["availableReplicas"] = o.AvailableReplicas
	}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.FullyLabeledReplicas) {
		toSerialize["fullyLabeledReplicas"] = o.FullyLabeledReplicas
	}
	if !IsNil(o.ObservedGeneration) {
		toSerialize["observedGeneration"] = o.ObservedGeneration
	}
	if !IsNil(o.ReadyReplicas) {
		toSerialize["readyReplicas"] = o.ReadyReplicas
	}
	toSerialize["replicas"] = o.Replicas
	return toSerialize, nil
}

func (o *V1ReplicaSetStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"replicas",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1ReplicaSetStatus := _V1ReplicaSetStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1ReplicaSetStatus)

	if err != nil {
		return err
	}

	*o = V1ReplicaSetStatus(varV1ReplicaSetStatus)

	return err
}

type NullableV1ReplicaSetStatus struct {
	value *V1ReplicaSetStatus
	isSet bool
}

func (v NullableV1ReplicaSetStatus) Get() *V1ReplicaSetStatus {
	return v.value
}

func (v *NullableV1ReplicaSetStatus) Set(val *V1ReplicaSetStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ReplicaSetStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ReplicaSetStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ReplicaSetStatus(val *V1ReplicaSetStatus) *NullableV1ReplicaSetStatus {
	return &NullableV1ReplicaSetStatus{value: val, isSet: true}
}

func (v NullableV1ReplicaSetStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ReplicaSetStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


